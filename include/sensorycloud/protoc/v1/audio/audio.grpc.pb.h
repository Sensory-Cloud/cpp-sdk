// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/audio/audio.proto
// Original file comments:
// sensory.api.audio
#ifndef GRPC_v1_2faudio_2faudio_2eproto__INCLUDED
#define GRPC_v1_2faudio_2faudio_2eproto__INCLUDED

#include "sensorycloud/protoc/v1/audio/audio.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sensory {
namespace api {
namespace v1 {
namespace audio {

// Handles the retrieval and management of audio models
class AudioModels final {
 public:
  static constexpr char const* service_full_name() {
    return "sensory.api.v1.audio.AudioModels";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get available models for enrollment and authentication
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetModels(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest& request, ::sensory::api::v1::audio::GetModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::audio::GetModelsResponse>> AsyncGetModels(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::audio::GetModelsResponse>>(AsyncGetModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::audio::GetModelsResponse>> PrepareAsyncGetModels(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::audio::GetModelsResponse>>(PrepareAsyncGetModelsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get available models for enrollment and authentication
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void GetModels(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest* request, ::sensory::api::v1::audio::GetModelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModels(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest* request, ::sensory::api::v1::audio::GetModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::audio::GetModelsResponse>* AsyncGetModelsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::audio::GetModelsResponse>* PrepareAsyncGetModelsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetModels(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest& request, ::sensory::api::v1::audio::GetModelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::audio::GetModelsResponse>> AsyncGetModels(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::audio::GetModelsResponse>>(AsyncGetModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::audio::GetModelsResponse>> PrepareAsyncGetModels(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::audio::GetModelsResponse>>(PrepareAsyncGetModelsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetModels(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest* request, ::sensory::api::v1::audio::GetModelsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetModels(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest* request, ::sensory::api::v1::audio::GetModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::audio::GetModelsResponse>* AsyncGetModelsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::audio::GetModelsResponse>* PrepareAsyncGetModelsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::audio::GetModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetModels_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get available models for enrollment and authentication
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetModels(::grpc::ServerContext* context, const ::sensory::api::v1::audio::GetModelsRequest* request, ::sensory::api::v1::audio::GetModelsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModels() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModels(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::audio::GetModelsRequest* /*request*/, ::sensory::api::v1::audio::GetModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModels(::grpc::ServerContext* context, ::sensory::api::v1::audio::GetModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::audio::GetModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetModels<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModels() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::audio::GetModelsRequest, ::sensory::api::v1::audio::GetModelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::audio::GetModelsRequest* request, ::sensory::api::v1::audio::GetModelsResponse* response) { return this->GetModels(context, request, response); }));}
    void SetMessageAllocatorFor_GetModels(
        ::grpc::MessageAllocator< ::sensory::api::v1::audio::GetModelsRequest, ::sensory::api::v1::audio::GetModelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::audio::GetModelsRequest, ::sensory::api::v1::audio::GetModelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModels(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::audio::GetModelsRequest* /*request*/, ::sensory::api::v1::audio::GetModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModels(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::audio::GetModelsRequest* /*request*/, ::sensory::api::v1::audio::GetModelsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetModels<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModels() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModels(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::audio::GetModelsRequest* /*request*/, ::sensory::api::v1::audio::GetModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModels() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModels(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::audio::GetModelsRequest* /*request*/, ::sensory::api::v1::audio::GetModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModels() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModels(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::audio::GetModelsRequest* /*request*/, ::sensory::api::v1::audio::GetModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModels() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::audio::GetModelsRequest, ::sensory::api::v1::audio::GetModelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::audio::GetModelsRequest, ::sensory::api::v1::audio::GetModelsResponse>* streamer) {
                       return this->StreamedGetModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModels(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::audio::GetModelsRequest* /*request*/, ::sensory::api::v1::audio::GetModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::audio::GetModelsRequest,::sensory::api::v1::audio::GetModelsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetModels<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetModels<Service > StreamedService;
};

// Handles all audio-related biometrics
class AudioBiometrics final {
 public:
  static constexpr char const* service_full_name() {
    return "sensory.api.v1.audio.AudioBiometrics";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Enrolls a user with a stream of audio. Streams a CreateEnrollmentResponse
    // as the audio is processed.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>> CreateEnrollment(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>>(CreateEnrollmentRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>> AsyncCreateEnrollment(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>>(AsyncCreateEnrollmentRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>> PrepareAsyncCreateEnrollment(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>>(PrepareAsyncCreateEnrollmentRaw(context, cq));
    }
    // Authenticates a user with a stream of audio against an existing enrollment.
    // Streams an AuthenticateResponse as the audio is processed.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>> Authenticate(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>>(AuthenticateRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>> AsyncAuthenticate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>>(AsyncAuthenticateRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>>(PrepareAsyncAuthenticateRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Enrolls a user with a stream of audio. Streams a CreateEnrollmentResponse
      // as the audio is processed.
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void CreateEnrollment(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::audio::CreateEnrollmentRequest,::sensory::api::v1::audio::CreateEnrollmentResponse>* reactor) = 0;
      // Authenticates a user with a stream of audio against an existing enrollment.
      // Streams an AuthenticateResponse as the audio is processed.
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void Authenticate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::audio::AuthenticateRequest,::sensory::api::v1::audio::AuthenticateResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>* CreateEnrollmentRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>* AsyncCreateEnrollmentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>* PrepareAsyncCreateEnrollmentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>* AuthenticateRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>* AsyncAuthenticateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>> CreateEnrollment(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>>(CreateEnrollmentRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>> AsyncCreateEnrollment(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>>(AsyncCreateEnrollmentRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>> PrepareAsyncCreateEnrollment(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>>(PrepareAsyncCreateEnrollmentRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>> Authenticate(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>>(AuthenticateRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>> AsyncAuthenticate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>>(AsyncAuthenticateRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>>(PrepareAsyncAuthenticateRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateEnrollment(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::audio::CreateEnrollmentRequest,::sensory::api::v1::audio::CreateEnrollmentResponse>* reactor) override;
      void Authenticate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::audio::AuthenticateRequest,::sensory::api::v1::audio::AuthenticateResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>* CreateEnrollmentRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>* AsyncCreateEnrollmentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>* PrepareAsyncCreateEnrollmentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>* AuthenticateRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>* AsyncAuthenticateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateEnrollment_;
    const ::grpc::internal::RpcMethod rpcmethod_Authenticate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Enrolls a user with a stream of audio. Streams a CreateEnrollmentResponse
    // as the audio is processed.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status CreateEnrollment(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentResponse, ::sensory::api::v1::audio::CreateEnrollmentRequest>* stream);
    // Authenticates a user with a stream of audio against an existing enrollment.
    // Streams an AuthenticateResponse as the audio is processed.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status Authenticate(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::AuthenticateResponse, ::sensory::api::v1::audio::AuthenticateRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateEnrollment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateEnrollment() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateEnrollment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnrollment(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentResponse, ::sensory::api::v1::audio::CreateEnrollmentRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEnrollment(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentResponse, ::sensory::api::v1::audio::CreateEnrollmentRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Authenticate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::AuthenticateResponse, ::sensory::api::v1::audio::AuthenticateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::sensory::api::v1::audio::AuthenticateResponse, ::sensory::api::v1::audio::AuthenticateRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateEnrollment<WithAsyncMethod_Authenticate<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateEnrollment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateEnrollment() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CreateEnrollment(context); }));
    }
    ~WithCallbackMethod_CreateEnrollment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnrollment(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentResponse, ::sensory::api::v1::audio::CreateEnrollmentRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::sensory::api::v1::audio::CreateEnrollmentRequest, ::sensory::api::v1::audio::CreateEnrollmentResponse>* CreateEnrollment(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Authenticate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Authenticate(context); }));
    }
    ~WithCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::AuthenticateResponse, ::sensory::api::v1::audio::AuthenticateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::sensory::api::v1::audio::AuthenticateRequest, ::sensory::api::v1::audio::AuthenticateResponse>* Authenticate(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_CreateEnrollment<WithCallbackMethod_Authenticate<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateEnrollment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateEnrollment() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateEnrollment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnrollment(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentResponse, ::sensory::api::v1::audio::CreateEnrollmentRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Authenticate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::AuthenticateResponse, ::sensory::api::v1::audio::AuthenticateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateEnrollment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateEnrollment() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateEnrollment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnrollment(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentResponse, ::sensory::api::v1::audio::CreateEnrollmentRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEnrollment(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Authenticate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::AuthenticateResponse, ::sensory::api::v1::audio::AuthenticateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateEnrollment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateEnrollment() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CreateEnrollment(context); }));
    }
    ~WithRawCallbackMethod_CreateEnrollment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnrollment(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::CreateEnrollmentResponse, ::sensory::api::v1::audio::CreateEnrollmentRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* CreateEnrollment(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Authenticate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Authenticate(context); }));
    }
    ~WithRawCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::AuthenticateResponse, ::sensory::api::v1::audio::AuthenticateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Authenticate(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

// Handles all audio event processing
class AudioEvents final {
 public:
  static constexpr char const* service_full_name() {
    return "sensory.api.v1.audio.AudioEvents";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Validates a phrase or sound with a stream of audio.
    // Streams a ValidateEventResponse as the audio is processed.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>> ValidateEvent(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>>(ValidateEventRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>> AsyncValidateEvent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>>(AsyncValidateEventRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>> PrepareAsyncValidateEvent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>>(PrepareAsyncValidateEventRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Validates a phrase or sound with a stream of audio.
      // Streams a ValidateEventResponse as the audio is processed.
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void ValidateEvent(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::audio::ValidateEventRequest,::sensory::api::v1::audio::ValidateEventResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>* ValidateEventRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>* AsyncValidateEventRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>* PrepareAsyncValidateEventRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>> ValidateEvent(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>>(ValidateEventRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>> AsyncValidateEvent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>>(AsyncValidateEventRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>> PrepareAsyncValidateEvent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>>(PrepareAsyncValidateEventRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ValidateEvent(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::audio::ValidateEventRequest,::sensory::api::v1::audio::ValidateEventResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>* ValidateEventRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>* AsyncValidateEventRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>* PrepareAsyncValidateEventRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateEvent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Validates a phrase or sound with a stream of audio.
    // Streams a ValidateEventResponse as the audio is processed.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status ValidateEvent(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::ValidateEventResponse, ::sensory::api::v1::audio::ValidateEventRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateEvent() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ValidateEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::ValidateEventResponse, ::sensory::api::v1::audio::ValidateEventRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateEvent(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::sensory::api::v1::audio::ValidateEventResponse, ::sensory::api::v1::audio::ValidateEventRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ValidateEvent<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ValidateEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidateEvent() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ValidateEvent(context); }));
    }
    ~WithCallbackMethod_ValidateEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::ValidateEventResponse, ::sensory::api::v1::audio::ValidateEventRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::sensory::api::v1::audio::ValidateEventRequest, ::sensory::api::v1::audio::ValidateEventResponse>* ValidateEvent(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_ValidateEvent<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ValidateEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateEvent() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ValidateEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::ValidateEventResponse, ::sensory::api::v1::audio::ValidateEventRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateEvent() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ValidateEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::ValidateEventResponse, ::sensory::api::v1::audio::ValidateEventRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateEvent(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidateEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidateEvent() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ValidateEvent(context); }));
    }
    ~WithRawCallbackMethod_ValidateEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::ValidateEventResponse, ::sensory::api::v1::audio::ValidateEventRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ValidateEvent(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

// Handles all audio transcriptions
class AudioTranscriptions final {
 public:
  static constexpr char const* service_full_name() {
    return "sensory.api.v1.audio.AudioTranscriptions";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Transcribes voice into text.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>> Transcribe(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>>(TranscribeRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>> AsyncTranscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>>(AsyncTranscribeRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>> PrepareAsyncTranscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>>(PrepareAsyncTranscribeRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Transcribes voice into text.
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void Transcribe(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::audio::TranscribeRequest,::sensory::api::v1::audio::TranscribeResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>* TranscribeRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>* AsyncTranscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>* PrepareAsyncTranscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>> Transcribe(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>>(TranscribeRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>> AsyncTranscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>>(AsyncTranscribeRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>> PrepareAsyncTranscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>>(PrepareAsyncTranscribeRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Transcribe(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::audio::TranscribeRequest,::sensory::api::v1::audio::TranscribeResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>* TranscribeRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>* AsyncTranscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>* PrepareAsyncTranscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Transcribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Transcribes voice into text.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status Transcribe(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::TranscribeResponse, ::sensory::api::v1::audio::TranscribeRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Transcribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Transcribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Transcribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transcribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::TranscribeResponse, ::sensory::api::v1::audio::TranscribeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTranscribe(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::sensory::api::v1::audio::TranscribeResponse, ::sensory::api::v1::audio::TranscribeRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Transcribe<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Transcribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Transcribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Transcribe(context); }));
    }
    ~WithCallbackMethod_Transcribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transcribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::TranscribeResponse, ::sensory::api::v1::audio::TranscribeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::sensory::api::v1::audio::TranscribeRequest, ::sensory::api::v1::audio::TranscribeResponse>* Transcribe(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_Transcribe<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Transcribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Transcribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Transcribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transcribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::TranscribeResponse, ::sensory::api::v1::audio::TranscribeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Transcribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Transcribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Transcribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transcribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::TranscribeResponse, ::sensory::api::v1::audio::TranscribeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTranscribe(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Transcribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Transcribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Transcribe(context); }));
    }
    ~WithRawCallbackMethod_Transcribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transcribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sensory::api::v1::audio::TranscribeResponse, ::sensory::api::v1::audio::TranscribeRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Transcribe(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace audio
}  // namespace v1
}  // namespace api
}  // namespace sensory


#endif  // GRPC_v1_2faudio_2faudio_2eproto__INCLUDED
