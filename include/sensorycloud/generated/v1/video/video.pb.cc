// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/video/video.proto

#include "v1/video/video.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensory {
namespace api {
namespace v1 {
namespace video {
constexpr VideoModel::VideoModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : versions_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fixedobject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modeltype_(0)

  , isenrollable_(false)
  , islivenesssupported_(false)
  , technology_(0)
{}
struct VideoModelDefaultTypeInternal {
  constexpr VideoModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoModelDefaultTypeInternal() {}
  union {
    VideoModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoModelDefaultTypeInternal _VideoModel_default_instance_;
constexpr GetModelsRequest::GetModelsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetModelsRequestDefaultTypeInternal {
  constexpr GetModelsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetModelsRequestDefaultTypeInternal() {}
  union {
    GetModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetModelsRequestDefaultTypeInternal _GetModelsRequest_default_instance_;
constexpr GetModelsResponse::GetModelsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : models_(){}
struct GetModelsResponseDefaultTypeInternal {
  constexpr GetModelsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetModelsResponseDefaultTypeInternal() {}
  union {
    GetModelsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetModelsResponseDefaultTypeInternal _GetModelsResponse_default_instance_;
constexpr CreateEnrollmentRequest::CreateEnrollmentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CreateEnrollmentRequestDefaultTypeInternal {
  constexpr CreateEnrollmentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateEnrollmentRequestDefaultTypeInternal() {}
  union {
    CreateEnrollmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateEnrollmentRequestDefaultTypeInternal _CreateEnrollmentRequest_default_instance_;
constexpr AuthenticateRequest::AuthenticateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AuthenticateRequestDefaultTypeInternal {
  constexpr AuthenticateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticateRequestDefaultTypeInternal() {}
  union {
    AuthenticateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticateRequestDefaultTypeInternal _AuthenticateRequest_default_instance_;
constexpr ValidateRecognitionRequest::ValidateRecognitionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ValidateRecognitionRequestDefaultTypeInternal {
  constexpr ValidateRecognitionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateRecognitionRequestDefaultTypeInternal() {}
  union {
    ValidateRecognitionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateRecognitionRequestDefaultTypeInternal _ValidateRecognitionRequest_default_instance_;
constexpr CreateEnrollmentResponse::CreateEnrollmentResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enrollmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , percentcomplete_(int64_t{0})
  , isalive_(false){}
struct CreateEnrollmentResponseDefaultTypeInternal {
  constexpr CreateEnrollmentResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateEnrollmentResponseDefaultTypeInternal() {}
  union {
    CreateEnrollmentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateEnrollmentResponseDefaultTypeInternal _CreateEnrollmentResponse_default_instance_;
constexpr AuthenticateResponse::AuthenticateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(nullptr)
  , score_(0)
  , success_(false)
  , isalive_(false){}
struct AuthenticateResponseDefaultTypeInternal {
  constexpr AuthenticateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticateResponseDefaultTypeInternal() {}
  union {
    AuthenticateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticateResponseDefaultTypeInternal _AuthenticateResponse_default_instance_;
constexpr LivenessRecognitionResponse::LivenessRecognitionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isalive_(false)
  , score_(0){}
struct LivenessRecognitionResponseDefaultTypeInternal {
  constexpr LivenessRecognitionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LivenessRecognitionResponseDefaultTypeInternal() {}
  union {
    LivenessRecognitionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LivenessRecognitionResponseDefaultTypeInternal _LivenessRecognitionResponse_default_instance_;
constexpr CreateEnrollmentConfig::CreateEnrollmentConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , compression_(nullptr)
  , islivenessenabled_(false)
  , livenessthreshold_(0)
{}
struct CreateEnrollmentConfigDefaultTypeInternal {
  constexpr CreateEnrollmentConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateEnrollmentConfigDefaultTypeInternal() {}
  union {
    CreateEnrollmentConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateEnrollmentConfigDefaultTypeInternal _CreateEnrollmentConfig_default_instance_;
constexpr AuthenticateConfig::AuthenticateConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enrollmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , compression_(nullptr)
  , livenessthreshold_(0)

  , islivenessenabled_(false)
  , doincludetoken_(false){}
struct AuthenticateConfigDefaultTypeInternal {
  constexpr AuthenticateConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticateConfigDefaultTypeInternal() {}
  union {
    AuthenticateConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticateConfigDefaultTypeInternal _AuthenticateConfig_default_instance_;
constexpr ValidateRecognitionConfig::ValidateRecognitionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , threshold_(0)
{}
struct ValidateRecognitionConfigDefaultTypeInternal {
  constexpr ValidateRecognitionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateRecognitionConfigDefaultTypeInternal() {}
  union {
    ValidateRecognitionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateRecognitionConfigDefaultTypeInternal _ValidateRecognitionConfig_default_instance_;
}  // namespace video
}  // namespace v1
}  // namespace api
}  // namespace sensory
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_v1_2fvideo_2fvideo_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_v1_2fvideo_2fvideo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_v1_2fvideo_2fvideo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_v1_2fvideo_2fvideo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::VideoModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::VideoModel, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::VideoModel, isenrollable_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::VideoModel, modeltype_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::VideoModel, fixedobject_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::VideoModel, versions_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::VideoModel, technology_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::VideoModel, islivenesssupported_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::GetModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::GetModelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::GetModelsResponse, models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentRequest, streamingRequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateRequest, streamingRequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::ValidateRecognitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::ValidateRecognitionRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::ValidateRecognitionRequest, streamingRequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentResponse, percentcomplete_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentResponse, isalive_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentResponse, enrollmentid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentResponse, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentResponse, modelversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateResponse, success_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateResponse, score_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateResponse, isalive_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateResponse, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::LivenessRecognitionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::LivenessRecognitionResponse, isalive_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::LivenessRecognitionResponse, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentConfig, userid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentConfig, deviceid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentConfig, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentConfig, description_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentConfig, islivenessenabled_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentConfig, livenessthreshold_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::CreateEnrollmentConfig, compression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateConfig, enrollmentid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateConfig, islivenessenabled_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateConfig, livenessthreshold_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateConfig, compression_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::AuthenticateConfig, doincludetoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::ValidateRecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::ValidateRecognitionConfig, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::ValidateRecognitionConfig, userid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::video::ValidateRecognitionConfig, threshold_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensory::api::v1::video::VideoModel)},
  { 12, -1, sizeof(::sensory::api::v1::video::GetModelsRequest)},
  { 17, -1, sizeof(::sensory::api::v1::video::GetModelsResponse)},
  { 23, -1, sizeof(::sensory::api::v1::video::CreateEnrollmentRequest)},
  { 31, -1, sizeof(::sensory::api::v1::video::AuthenticateRequest)},
  { 39, -1, sizeof(::sensory::api::v1::video::ValidateRecognitionRequest)},
  { 47, -1, sizeof(::sensory::api::v1::video::CreateEnrollmentResponse)},
  { 57, -1, sizeof(::sensory::api::v1::video::AuthenticateResponse)},
  { 66, -1, sizeof(::sensory::api::v1::video::LivenessRecognitionResponse)},
  { 73, -1, sizeof(::sensory::api::v1::video::CreateEnrollmentConfig)},
  { 85, -1, sizeof(::sensory::api::v1::video::AuthenticateConfig)},
  { 95, -1, sizeof(::sensory::api::v1::video::ValidateRecognitionConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_VideoModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_GetModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_GetModelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_CreateEnrollmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_AuthenticateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_ValidateRecognitionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_CreateEnrollmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_AuthenticateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_LivenessRecognitionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_CreateEnrollmentConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_AuthenticateConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::video::_ValidateRecognitionConfig_default_instance_),
};

const char descriptor_table_protodef_v1_2fvideo_2fvideo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024v1/video/video.proto\022\024sensory.api.v1.v"
  "ideo\032\027validate/validate.proto\032\023common/co"
  "mmon.proto\"\336\001\n\nVideoModel\022\014\n\004name\030\001 \001(\t\022"
  "\024\n\014isEnrollable\030\002 \001(\010\0220\n\tmodelType\030\003 \001(\016"
  "2\035.sensory.api.common.ModelType\022\023\n\013fixed"
  "Object\030\004 \001(\t\022\020\n\010versions\030\005 \003(\t\0226\n\ntechno"
  "logy\030\006 \001(\0162\".sensory.api.common.Technolo"
  "gyType\022\033\n\023isLivenessSupported\030\007 \001(\010\"\022\n\020G"
  "etModelsRequest\"E\n\021GetModelsResponse\0220\n\006"
  "models\030\001 \003(\0132 .sensory.api.v1.video.Vide"
  "oModel\"\212\001\n\027CreateEnrollmentRequest\022>\n\006co"
  "nfig\030\001 \001(\0132,.sensory.api.v1.video.Create"
  "EnrollmentConfigH\000\022\026\n\014imageContent\030\002 \001(\014"
  "H\000B\027\n\020streamingRequest\022\003\370B\001\"\202\001\n\023Authenti"
  "cateRequest\022:\n\006config\030\001 \001(\0132(.sensory.ap"
  "i.v1.video.AuthenticateConfigH\000\022\026\n\014image"
  "Content\030\002 \001(\014H\000B\027\n\020streamingRequest\022\003\370B\001"
  "\"\220\001\n\032ValidateRecognitionRequest\022A\n\006confi"
  "g\030\001 \001(\0132/.sensory.api.v1.video.ValidateR"
  "ecognitionConfigH\000\022\026\n\014imageContent\030\002 \001(\014"
  "H\000B\027\n\020streamingRequest\022\003\370B\001\"\203\001\n\030CreateEn"
  "rollmentResponse\022\027\n\017percentComplete\030\001 \001("
  "\003\022\017\n\007isAlive\030\002 \001(\010\022\024\n\014enrollmentId\030\003 \001(\t"
  "\022\021\n\tmodelName\030\004 \001(\t\022\024\n\014modelVersion\030\005 \001("
  "\t\"y\n\024AuthenticateResponse\022\017\n\007success\030\001 \001"
  "(\010\022\r\n\005score\030\002 \001(\002\022\017\n\007isAlive\030\003 \001(\010\0220\n\005to"
  "ken\030\004 \001(\0132!.sensory.api.common.TokenResp"
  "onse\"=\n\033LivenessRecognitionResponse\022\017\n\007i"
  "sAlive\030\001 \001(\010\022\r\n\005score\030\002 \001(\002\"\275\002\n\026CreateEn"
  "rollmentConfig\022\031\n\006userId\030\001 \001(\tB\t\372B\006r\004\020\001\030"
  "\177\022\033\n\010deviceId\030\002 \001(\tB\t\372B\006r\004\020\001\030\177\022\035\n\tmodelN"
  "ame\030\003 \001(\tB\n\372B\007r\005\020\001\030\377\001\022\035\n\013description\030\004 \001"
  "(\tB\010\372B\005r\003\030\377\007\022\031\n\021isLivenessEnabled\030\005 \001(\010\022"
  "O\n\021livenessThreshold\030\006 \001(\0162*.sensory.api"
  ".v1.video.RecognitionThresholdB\010\372B\005\202\001\002\020\001"
  "\022A\n\013compression\030\007 \001(\0132,.sensory.api.comm"
  "on.CompressionConfiguration\"\373\001\n\022Authenti"
  "cateConfig\022\036\n\014enrollmentId\030\001 \001(\tB\010\372B\005r\003\260"
  "\001\001\022\031\n\021isLivenessEnabled\030\002 \001(\010\022O\n\021livenes"
  "sThreshold\030\003 \001(\0162*.sensory.api.v1.video."
  "RecognitionThresholdB\010\372B\005\202\001\002\020\001\022A\n\013compre"
  "ssion\030\004 \001(\0132,.sensory.api.common.Compres"
  "sionConfiguration\022\026\n\016doIncludeToken\030\005 \001("
  "\010\"\236\001\n\031ValidateRecognitionConfig\022\035\n\tmodel"
  "Name\030\001 \001(\tB\n\372B\007r\005\020\001\030\377\001\022\031\n\006userId\030\002 \001(\tB\t"
  "\372B\006r\004\020\001\030\177\022G\n\tthreshold\030\003 \001(\0162*.sensory.a"
  "pi.v1.video.RecognitionThresholdB\010\372B\005\202\001\002"
  "\020\001*B\n\024RecognitionThreshold\022\007\n\003LOW\020\000\022\n\n\006M"
  "EDIUM\020\001\022\010\n\004HIGH\020\002\022\013\n\007HIGHEST\020\0032m\n\013VideoM"
  "odels\022^\n\tGetModels\022&.sensory.api.v1.vide"
  "o.GetModelsRequest\032\'.sensory.api.v1.vide"
  "o.GetModelsResponse\"\0002\367\001\n\017VideoBiometric"
  "s\022w\n\020CreateEnrollment\022-.sensory.api.v1.v"
  "ideo.CreateEnrollmentRequest\032..sensory.a"
  "pi.v1.video.CreateEnrollmentResponse\"\000(\001"
  "0\001\022k\n\014Authenticate\022).sensory.api.v1.vide"
  "o.AuthenticateRequest\032*.sensory.api.v1.v"
  "ideo.AuthenticateResponse\"\000(\0010\0012\221\001\n\020Vide"
  "oRecognition\022}\n\020ValidateLiveness\0220.senso"
  "ry.api.v1.video.ValidateRecognitionReque"
  "st\0321.sensory.api.v1.video.LivenessRecogn"
  "itionResponse\"\000(\0010\001Bo\n\027io.sensory.api.v1"
  ".videoB\026SensoryApiV1VideoProtoP\001Z:gitlab"
  ".com/sensory-cloud/server/titan.git/pkg/"
  "api/v1/videob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_v1_2fvideo_2fvideo_2eproto_deps[2] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_v1_2fvideo_2fvideo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fvideo_2fvideo_2eproto = {
  false, false, 2580, descriptor_table_protodef_v1_2fvideo_2fvideo_2eproto, "v1/video/video.proto", 
  &descriptor_table_v1_2fvideo_2fvideo_2eproto_once, descriptor_table_v1_2fvideo_2fvideo_2eproto_deps, 2, 12,
  schemas, file_default_instances, TableStruct_v1_2fvideo_2fvideo_2eproto::offsets,
  file_level_metadata_v1_2fvideo_2fvideo_2eproto, file_level_enum_descriptors_v1_2fvideo_2fvideo_2eproto, file_level_service_descriptors_v1_2fvideo_2fvideo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_v1_2fvideo_2fvideo_2eproto_getter() {
  return &descriptor_table_v1_2fvideo_2fvideo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_v1_2fvideo_2fvideo_2eproto(&descriptor_table_v1_2fvideo_2fvideo_2eproto);
namespace sensory {
namespace api {
namespace v1 {
namespace video {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionThreshold_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v1_2fvideo_2fvideo_2eproto);
  return file_level_enum_descriptors_v1_2fvideo_2fvideo_2eproto[0];
}
bool RecognitionThreshold_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class VideoModel::_Internal {
 public:
};

VideoModel::VideoModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.VideoModel)
}
VideoModel::VideoModel(const VideoModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      versions_(from.versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  fixedobject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fixedobject().empty()) {
    fixedobject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fixedobject(), 
      GetArenaForAllocation());
  }
  ::memcpy(&modeltype_, &from.modeltype_,
    static_cast<size_t>(reinterpret_cast<char*>(&technology_) -
    reinterpret_cast<char*>(&modeltype_)) + sizeof(technology_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.VideoModel)
}

inline void VideoModel::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fixedobject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&modeltype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&technology_) -
    reinterpret_cast<char*>(&modeltype_)) + sizeof(technology_));
}

VideoModel::~VideoModel() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.VideoModel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VideoModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fixedobject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoModel::ArenaDtor(void* object) {
  VideoModel* _this = reinterpret_cast< VideoModel* >(object);
  (void)_this;
}
void VideoModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoModel::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.VideoModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  name_.ClearToEmpty();
  fixedobject_.ClearToEmpty();
  ::memset(&modeltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&technology_) -
      reinterpret_cast<char*>(&modeltype_)) + sizeof(technology_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.VideoModel.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isEnrollable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isenrollable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensory.api.common.ModelType modelType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_modeltype(static_cast<::sensory::api::common::ModelType>(val));
        } else goto handle_unusual;
        continue;
      // string fixedObject = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fixedobject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.VideoModel.fixedObject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string versions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_versions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.VideoModel.versions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .sensory.api.common.TechnologyType technology = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_technology(static_cast<::sensory::api::common::TechnologyType>(val));
        } else goto handle_unusual;
        continue;
      // bool isLivenessSupported = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          islivenesssupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.VideoModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.VideoModel.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool isEnrollable = 2;
  if (this->_internal_isenrollable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isenrollable(), target);
  }

  // .sensory.api.common.ModelType modelType = 3;
  if (this->_internal_modeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_modeltype(), target);
  }

  // string fixedObject = 4;
  if (!this->_internal_fixedobject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fixedobject().data(), static_cast<int>(this->_internal_fixedobject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.VideoModel.fixedObject");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fixedobject(), target);
  }

  // repeated string versions = 5;
  for (int i = 0, n = this->_internal_versions_size(); i < n; i++) {
    const auto& s = this->_internal_versions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.VideoModel.versions");
    target = stream->WriteString(5, s, target);
  }

  // .sensory.api.common.TechnologyType technology = 6;
  if (this->_internal_technology() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_technology(), target);
  }

  // bool isLivenessSupported = 7;
  if (this->_internal_islivenesssupported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_islivenesssupported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.VideoModel)
  return target;
}

size_t VideoModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.VideoModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string versions = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(versions_.size());
  for (int i = 0, n = versions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      versions_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string fixedObject = 4;
  if (!this->_internal_fixedobject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fixedobject());
  }

  // .sensory.api.common.ModelType modelType = 3;
  if (this->_internal_modeltype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_modeltype());
  }

  // bool isEnrollable = 2;
  if (this->_internal_isenrollable() != 0) {
    total_size += 1 + 1;
  }

  // bool isLivenessSupported = 7;
  if (this->_internal_islivenesssupported() != 0) {
    total_size += 1 + 1;
  }

  // .sensory.api.common.TechnologyType technology = 6;
  if (this->_internal_technology() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_technology());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoModel::GetClassData() const { return &_class_data_; }

void VideoModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VideoModel *>(to)->MergeFrom(
      static_cast<const VideoModel &>(from));
}


void VideoModel::MergeFrom(const VideoModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.VideoModel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_fixedobject().empty()) {
    _internal_set_fixedobject(from._internal_fixedobject());
  }
  if (from._internal_modeltype() != 0) {
    _internal_set_modeltype(from._internal_modeltype());
  }
  if (from._internal_isenrollable() != 0) {
    _internal_set_isenrollable(from._internal_isenrollable());
  }
  if (from._internal_islivenesssupported() != 0) {
    _internal_set_islivenesssupported(from._internal_islivenesssupported());
  }
  if (from._internal_technology() != 0) {
    _internal_set_technology(from._internal_technology());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoModel::CopyFrom(const VideoModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.VideoModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoModel::IsInitialized() const {
  return true;
}

void VideoModel::InternalSwap(VideoModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  versions_.InternalSwap(&other->versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fixedobject_, GetArenaForAllocation(),
      &other->fixedobject_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoModel, technology_)
      + sizeof(VideoModel::technology_)
      - PROTOBUF_FIELD_OFFSET(VideoModel, modeltype_)>(
          reinterpret_cast<char*>(&modeltype_),
          reinterpret_cast<char*>(&other->modeltype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[0]);
}

// ===================================================================

class GetModelsRequest::_Internal {
 public:
};

GetModelsRequest::GetModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.GetModelsRequest)
}
GetModelsRequest::GetModelsRequest(const GetModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.GetModelsRequest)
}

inline void GetModelsRequest::SharedCtor() {
}

GetModelsRequest::~GetModelsRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.GetModelsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetModelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetModelsRequest::ArenaDtor(void* object) {
  GetModelsRequest* _this = reinterpret_cast< GetModelsRequest* >(object);
  (void)_this;
}
void GetModelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.GetModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.GetModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.GetModelsRequest)
  return target;
}

size_t GetModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.GetModelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetModelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelsRequest::GetClassData() const { return &_class_data_; }

void GetModelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetModelsRequest *>(to)->MergeFrom(
      static_cast<const GetModelsRequest &>(from));
}


void GetModelsRequest::MergeFrom(const GetModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.GetModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelsRequest::CopyFrom(const GetModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.GetModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelsRequest::IsInitialized() const {
  return true;
}

void GetModelsRequest::InternalSwap(GetModelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[1]);
}

// ===================================================================

class GetModelsResponse::_Internal {
 public:
};

GetModelsResponse::GetModelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  models_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.GetModelsResponse)
}
GetModelsResponse::GetModelsResponse(const GetModelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      models_(from.models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.GetModelsResponse)
}

inline void GetModelsResponse::SharedCtor() {
}

GetModelsResponse::~GetModelsResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.GetModelsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetModelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetModelsResponse::ArenaDtor(void* object) {
  GetModelsResponse* _this = reinterpret_cast< GetModelsResponse* >(object);
  (void)_this;
}
void GetModelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.GetModelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensory.api.v1.video.VideoModel models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.GetModelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensory.api.v1.video.VideoModel models = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.GetModelsResponse)
  return target;
}

size_t GetModelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.GetModelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensory.api.v1.video.VideoModel models = 1;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetModelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelsResponse::GetClassData() const { return &_class_data_; }

void GetModelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetModelsResponse *>(to)->MergeFrom(
      static_cast<const GetModelsResponse &>(from));
}


void GetModelsResponse::MergeFrom(const GetModelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.GetModelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelsResponse::CopyFrom(const GetModelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.GetModelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelsResponse::IsInitialized() const {
  return true;
}

void GetModelsResponse::InternalSwap(GetModelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[2]);
}

// ===================================================================

class CreateEnrollmentRequest::_Internal {
 public:
  static const ::sensory::api::v1::video::CreateEnrollmentConfig& config(const CreateEnrollmentRequest* msg);
};

const ::sensory::api::v1::video::CreateEnrollmentConfig&
CreateEnrollmentRequest::_Internal::config(const CreateEnrollmentRequest* msg) {
  return *msg->streamingRequest_.config_;
}
void CreateEnrollmentRequest::set_allocated_config(::sensory::api::v1::video::CreateEnrollmentConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streamingRequest();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::video::CreateEnrollmentConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streamingRequest_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.video.CreateEnrollmentRequest.config)
}
CreateEnrollmentRequest::CreateEnrollmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.CreateEnrollmentRequest)
}
CreateEnrollmentRequest::CreateEnrollmentRequest(const CreateEnrollmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streamingRequest();
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::video::CreateEnrollmentConfig::MergeFrom(from._internal_config());
      break;
    }
    case kImageContent: {
      _internal_set_imagecontent(from._internal_imagecontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.CreateEnrollmentRequest)
}

inline void CreateEnrollmentRequest::SharedCtor() {
clear_has_streamingRequest();
}

CreateEnrollmentRequest::~CreateEnrollmentRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.CreateEnrollmentRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateEnrollmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streamingRequest()) {
    clear_streamingRequest();
  }
}

void CreateEnrollmentRequest::ArenaDtor(void* object) {
  CreateEnrollmentRequest* _this = reinterpret_cast< CreateEnrollmentRequest* >(object);
  (void)_this;
}
void CreateEnrollmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEnrollmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateEnrollmentRequest::clear_streamingRequest() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.video.CreateEnrollmentRequest)
  switch (streamingRequest_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streamingRequest_.config_;
      }
      break;
    }
    case kImageContent: {
      streamingRequest_.imagecontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMINGREQUEST_NOT_SET;
}


void CreateEnrollmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.CreateEnrollmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streamingRequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEnrollmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.video.CreateEnrollmentConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes imageContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imagecontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEnrollmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.CreateEnrollmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.video.CreateEnrollmentConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // bytes imageContent = 2;
  if (_internal_has_imagecontent()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_imagecontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.CreateEnrollmentRequest)
  return target;
}

size_t CreateEnrollmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.CreateEnrollmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streamingRequest_case()) {
    // .sensory.api.v1.video.CreateEnrollmentConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streamingRequest_.config_);
      break;
    }
    // bytes imageContent = 2;
    case kImageContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_imagecontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEnrollmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateEnrollmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEnrollmentRequest::GetClassData() const { return &_class_data_; }

void CreateEnrollmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateEnrollmentRequest *>(to)->MergeFrom(
      static_cast<const CreateEnrollmentRequest &>(from));
}


void CreateEnrollmentRequest::MergeFrom(const CreateEnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.CreateEnrollmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::video::CreateEnrollmentConfig::MergeFrom(from._internal_config());
      break;
    }
    case kImageContent: {
      _internal_set_imagecontent(from._internal_imagecontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEnrollmentRequest::CopyFrom(const CreateEnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.CreateEnrollmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEnrollmentRequest::IsInitialized() const {
  return true;
}

void CreateEnrollmentRequest::InternalSwap(CreateEnrollmentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(streamingRequest_, other->streamingRequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEnrollmentRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[3]);
}

// ===================================================================

class AuthenticateRequest::_Internal {
 public:
  static const ::sensory::api::v1::video::AuthenticateConfig& config(const AuthenticateRequest* msg);
};

const ::sensory::api::v1::video::AuthenticateConfig&
AuthenticateRequest::_Internal::config(const AuthenticateRequest* msg) {
  return *msg->streamingRequest_.config_;
}
void AuthenticateRequest::set_allocated_config(::sensory::api::v1::video::AuthenticateConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streamingRequest();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::video::AuthenticateConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streamingRequest_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.video.AuthenticateRequest.config)
}
AuthenticateRequest::AuthenticateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.AuthenticateRequest)
}
AuthenticateRequest::AuthenticateRequest(const AuthenticateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streamingRequest();
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::video::AuthenticateConfig::MergeFrom(from._internal_config());
      break;
    }
    case kImageContent: {
      _internal_set_imagecontent(from._internal_imagecontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.AuthenticateRequest)
}

inline void AuthenticateRequest::SharedCtor() {
clear_has_streamingRequest();
}

AuthenticateRequest::~AuthenticateRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.AuthenticateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streamingRequest()) {
    clear_streamingRequest();
  }
}

void AuthenticateRequest::ArenaDtor(void* object) {
  AuthenticateRequest* _this = reinterpret_cast< AuthenticateRequest* >(object);
  (void)_this;
}
void AuthenticateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticateRequest::clear_streamingRequest() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.video.AuthenticateRequest)
  switch (streamingRequest_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streamingRequest_.config_;
      }
      break;
    }
    case kImageContent: {
      streamingRequest_.imagecontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMINGREQUEST_NOT_SET;
}


void AuthenticateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.AuthenticateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streamingRequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.video.AuthenticateConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes imageContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imagecontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.AuthenticateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.video.AuthenticateConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // bytes imageContent = 2;
  if (_internal_has_imagecontent()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_imagecontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.AuthenticateRequest)
  return target;
}

size_t AuthenticateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.AuthenticateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streamingRequest_case()) {
    // .sensory.api.v1.video.AuthenticateConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streamingRequest_.config_);
      break;
    }
    // bytes imageContent = 2;
    case kImageContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_imagecontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateRequest::GetClassData() const { return &_class_data_; }

void AuthenticateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AuthenticateRequest *>(to)->MergeFrom(
      static_cast<const AuthenticateRequest &>(from));
}


void AuthenticateRequest::MergeFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.AuthenticateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::video::AuthenticateConfig::MergeFrom(from._internal_config());
      break;
    }
    case kImageContent: {
      _internal_set_imagecontent(from._internal_imagecontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateRequest::CopyFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.AuthenticateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateRequest::IsInitialized() const {
  return true;
}

void AuthenticateRequest::InternalSwap(AuthenticateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(streamingRequest_, other->streamingRequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[4]);
}

// ===================================================================

class ValidateRecognitionRequest::_Internal {
 public:
  static const ::sensory::api::v1::video::ValidateRecognitionConfig& config(const ValidateRecognitionRequest* msg);
};

const ::sensory::api::v1::video::ValidateRecognitionConfig&
ValidateRecognitionRequest::_Internal::config(const ValidateRecognitionRequest* msg) {
  return *msg->streamingRequest_.config_;
}
void ValidateRecognitionRequest::set_allocated_config(::sensory::api::v1::video::ValidateRecognitionConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streamingRequest();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::video::ValidateRecognitionConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streamingRequest_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.video.ValidateRecognitionRequest.config)
}
ValidateRecognitionRequest::ValidateRecognitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.ValidateRecognitionRequest)
}
ValidateRecognitionRequest::ValidateRecognitionRequest(const ValidateRecognitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streamingRequest();
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::video::ValidateRecognitionConfig::MergeFrom(from._internal_config());
      break;
    }
    case kImageContent: {
      _internal_set_imagecontent(from._internal_imagecontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.ValidateRecognitionRequest)
}

inline void ValidateRecognitionRequest::SharedCtor() {
clear_has_streamingRequest();
}

ValidateRecognitionRequest::~ValidateRecognitionRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.ValidateRecognitionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateRecognitionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streamingRequest()) {
    clear_streamingRequest();
  }
}

void ValidateRecognitionRequest::ArenaDtor(void* object) {
  ValidateRecognitionRequest* _this = reinterpret_cast< ValidateRecognitionRequest* >(object);
  (void)_this;
}
void ValidateRecognitionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateRecognitionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateRecognitionRequest::clear_streamingRequest() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.video.ValidateRecognitionRequest)
  switch (streamingRequest_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streamingRequest_.config_;
      }
      break;
    }
    case kImageContent: {
      streamingRequest_.imagecontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMINGREQUEST_NOT_SET;
}


void ValidateRecognitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.ValidateRecognitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streamingRequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateRecognitionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.video.ValidateRecognitionConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes imageContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imagecontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateRecognitionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.ValidateRecognitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.video.ValidateRecognitionConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // bytes imageContent = 2;
  if (_internal_has_imagecontent()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_imagecontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.ValidateRecognitionRequest)
  return target;
}

size_t ValidateRecognitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.ValidateRecognitionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streamingRequest_case()) {
    // .sensory.api.v1.video.ValidateRecognitionConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streamingRequest_.config_);
      break;
    }
    // bytes imageContent = 2;
    case kImageContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_imagecontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateRecognitionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateRecognitionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateRecognitionRequest::GetClassData() const { return &_class_data_; }

void ValidateRecognitionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ValidateRecognitionRequest *>(to)->MergeFrom(
      static_cast<const ValidateRecognitionRequest &>(from));
}


void ValidateRecognitionRequest::MergeFrom(const ValidateRecognitionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.ValidateRecognitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::video::ValidateRecognitionConfig::MergeFrom(from._internal_config());
      break;
    }
    case kImageContent: {
      _internal_set_imagecontent(from._internal_imagecontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateRecognitionRequest::CopyFrom(const ValidateRecognitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.ValidateRecognitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateRecognitionRequest::IsInitialized() const {
  return true;
}

void ValidateRecognitionRequest::InternalSwap(ValidateRecognitionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(streamingRequest_, other->streamingRequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateRecognitionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[5]);
}

// ===================================================================

class CreateEnrollmentResponse::_Internal {
 public:
};

CreateEnrollmentResponse::CreateEnrollmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.CreateEnrollmentResponse)
}
CreateEnrollmentResponse::CreateEnrollmentResponse(const CreateEnrollmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enrollmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enrollmentid().empty()) {
    enrollmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enrollmentid(), 
      GetArenaForAllocation());
  }
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  modelversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelversion().empty()) {
    modelversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelversion(), 
      GetArenaForAllocation());
  }
  ::memcpy(&percentcomplete_, &from.percentcomplete_,
    static_cast<size_t>(reinterpret_cast<char*>(&isalive_) -
    reinterpret_cast<char*>(&percentcomplete_)) + sizeof(isalive_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.CreateEnrollmentResponse)
}

inline void CreateEnrollmentResponse::SharedCtor() {
enrollmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&percentcomplete_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isalive_) -
    reinterpret_cast<char*>(&percentcomplete_)) + sizeof(isalive_));
}

CreateEnrollmentResponse::~CreateEnrollmentResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.CreateEnrollmentResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateEnrollmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  enrollmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateEnrollmentResponse::ArenaDtor(void* object) {
  CreateEnrollmentResponse* _this = reinterpret_cast< CreateEnrollmentResponse* >(object);
  (void)_this;
}
void CreateEnrollmentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEnrollmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateEnrollmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.CreateEnrollmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enrollmentid_.ClearToEmpty();
  modelname_.ClearToEmpty();
  modelversion_.ClearToEmpty();
  ::memset(&percentcomplete_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isalive_) -
      reinterpret_cast<char*>(&percentcomplete_)) + sizeof(isalive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEnrollmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 percentComplete = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          percentcomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isAlive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string enrollmentId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_enrollmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.CreateEnrollmentResponse.enrollmentId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modelName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.CreateEnrollmentResponse.modelName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modelVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_modelversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.CreateEnrollmentResponse.modelVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEnrollmentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.CreateEnrollmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 percentComplete = 1;
  if (this->_internal_percentcomplete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_percentcomplete(), target);
  }

  // bool isAlive = 2;
  if (this->_internal_isalive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isalive(), target);
  }

  // string enrollmentId = 3;
  if (!this->_internal_enrollmentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enrollmentid().data(), static_cast<int>(this->_internal_enrollmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.CreateEnrollmentResponse.enrollmentId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enrollmentid(), target);
  }

  // string modelName = 4;
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.CreateEnrollmentResponse.modelName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_modelname(), target);
  }

  // string modelVersion = 5;
  if (!this->_internal_modelversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelversion().data(), static_cast<int>(this->_internal_modelversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.CreateEnrollmentResponse.modelVersion");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_modelversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.CreateEnrollmentResponse)
  return target;
}

size_t CreateEnrollmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.CreateEnrollmentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string enrollmentId = 3;
  if (!this->_internal_enrollmentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enrollmentid());
  }

  // string modelName = 4;
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // string modelVersion = 5;
  if (!this->_internal_modelversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelversion());
  }

  // int64 percentComplete = 1;
  if (this->_internal_percentcomplete() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_percentcomplete());
  }

  // bool isAlive = 2;
  if (this->_internal_isalive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEnrollmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateEnrollmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEnrollmentResponse::GetClassData() const { return &_class_data_; }

void CreateEnrollmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateEnrollmentResponse *>(to)->MergeFrom(
      static_cast<const CreateEnrollmentResponse &>(from));
}


void CreateEnrollmentResponse::MergeFrom(const CreateEnrollmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.CreateEnrollmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_enrollmentid().empty()) {
    _internal_set_enrollmentid(from._internal_enrollmentid());
  }
  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_modelversion().empty()) {
    _internal_set_modelversion(from._internal_modelversion());
  }
  if (from._internal_percentcomplete() != 0) {
    _internal_set_percentcomplete(from._internal_percentcomplete());
  }
  if (from._internal_isalive() != 0) {
    _internal_set_isalive(from._internal_isalive());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEnrollmentResponse::CopyFrom(const CreateEnrollmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.CreateEnrollmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEnrollmentResponse::IsInitialized() const {
  return true;
}

void CreateEnrollmentResponse::InternalSwap(CreateEnrollmentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enrollmentid_, GetArenaForAllocation(),
      &other->enrollmentid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, GetArenaForAllocation(),
      &other->modelname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelversion_, GetArenaForAllocation(),
      &other->modelversion_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateEnrollmentResponse, isalive_)
      + sizeof(CreateEnrollmentResponse::isalive_)
      - PROTOBUF_FIELD_OFFSET(CreateEnrollmentResponse, percentcomplete_)>(
          reinterpret_cast<char*>(&percentcomplete_),
          reinterpret_cast<char*>(&other->percentcomplete_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEnrollmentResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[6]);
}

// ===================================================================

class AuthenticateResponse::_Internal {
 public:
  static const ::sensory::api::common::TokenResponse& token(const AuthenticateResponse* msg);
};

const ::sensory::api::common::TokenResponse&
AuthenticateResponse::_Internal::token(const AuthenticateResponse* msg) {
  return *msg->token_;
}
void AuthenticateResponse::clear_token() {
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
AuthenticateResponse::AuthenticateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.AuthenticateResponse)
}
AuthenticateResponse::AuthenticateResponse(const AuthenticateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_token()) {
    token_ = new ::sensory::api::common::TokenResponse(*from.token_);
  } else {
    token_ = nullptr;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&isalive_) -
    reinterpret_cast<char*>(&score_)) + sizeof(isalive_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.AuthenticateResponse)
}

inline void AuthenticateResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isalive_) -
    reinterpret_cast<char*>(&token_)) + sizeof(isalive_));
}

AuthenticateResponse::~AuthenticateResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.AuthenticateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete token_;
}

void AuthenticateResponse::ArenaDtor(void* object) {
  AuthenticateResponse* _this = reinterpret_cast< AuthenticateResponse* >(object);
  (void)_this;
}
void AuthenticateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.AuthenticateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isalive_) -
      reinterpret_cast<char*>(&score_)) + sizeof(isalive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool isAlive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensory.api.common.TokenResponse token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.AuthenticateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // float score = 2;
  if (!(this->_internal_score() <= 0 && this->_internal_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  // bool isAlive = 3;
  if (this->_internal_isalive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isalive(), target);
  }

  // .sensory.api.common.TokenResponse token = 4;
  if (this->_internal_has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.AuthenticateResponse)
  return target;
}

size_t AuthenticateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.AuthenticateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensory.api.common.TokenResponse token = 4;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  // float score = 2;
  if (!(this->_internal_score() <= 0 && this->_internal_score() >= 0)) {
    total_size += 1 + 4;
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool isAlive = 3;
  if (this->_internal_isalive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateResponse::GetClassData() const { return &_class_data_; }

void AuthenticateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AuthenticateResponse *>(to)->MergeFrom(
      static_cast<const AuthenticateResponse &>(from));
}


void AuthenticateResponse::MergeFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.AuthenticateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token()) {
    _internal_mutable_token()->::sensory::api::common::TokenResponse::MergeFrom(from._internal_token());
  }
  if (!(from._internal_score() <= 0 && from._internal_score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_isalive() != 0) {
    _internal_set_isalive(from._internal_isalive());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateResponse::CopyFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateResponse::IsInitialized() const {
  return true;
}

void AuthenticateResponse::InternalSwap(AuthenticateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateResponse, isalive_)
      + sizeof(AuthenticateResponse::isalive_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateResponse, token_)>(
          reinterpret_cast<char*>(&token_),
          reinterpret_cast<char*>(&other->token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[7]);
}

// ===================================================================

class LivenessRecognitionResponse::_Internal {
 public:
};

LivenessRecognitionResponse::LivenessRecognitionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.LivenessRecognitionResponse)
}
LivenessRecognitionResponse::LivenessRecognitionResponse(const LivenessRecognitionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&isalive_, &from.isalive_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&isalive_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.LivenessRecognitionResponse)
}

inline void LivenessRecognitionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&isalive_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&isalive_)) + sizeof(score_));
}

LivenessRecognitionResponse::~LivenessRecognitionResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.LivenessRecognitionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LivenessRecognitionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LivenessRecognitionResponse::ArenaDtor(void* object) {
  LivenessRecognitionResponse* _this = reinterpret_cast< LivenessRecognitionResponse* >(object);
  (void)_this;
}
void LivenessRecognitionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LivenessRecognitionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LivenessRecognitionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.LivenessRecognitionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isalive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&isalive_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LivenessRecognitionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isAlive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LivenessRecognitionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.LivenessRecognitionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAlive = 1;
  if (this->_internal_isalive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isalive(), target);
  }

  // float score = 2;
  if (!(this->_internal_score() <= 0 && this->_internal_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.LivenessRecognitionResponse)
  return target;
}

size_t LivenessRecognitionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.LivenessRecognitionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isAlive = 1;
  if (this->_internal_isalive() != 0) {
    total_size += 1 + 1;
  }

  // float score = 2;
  if (!(this->_internal_score() <= 0 && this->_internal_score() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LivenessRecognitionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LivenessRecognitionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LivenessRecognitionResponse::GetClassData() const { return &_class_data_; }

void LivenessRecognitionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LivenessRecognitionResponse *>(to)->MergeFrom(
      static_cast<const LivenessRecognitionResponse &>(from));
}


void LivenessRecognitionResponse::MergeFrom(const LivenessRecognitionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.LivenessRecognitionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isalive() != 0) {
    _internal_set_isalive(from._internal_isalive());
  }
  if (!(from._internal_score() <= 0 && from._internal_score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LivenessRecognitionResponse::CopyFrom(const LivenessRecognitionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.LivenessRecognitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LivenessRecognitionResponse::IsInitialized() const {
  return true;
}

void LivenessRecognitionResponse::InternalSwap(LivenessRecognitionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LivenessRecognitionResponse, score_)
      + sizeof(LivenessRecognitionResponse::score_)
      - PROTOBUF_FIELD_OFFSET(LivenessRecognitionResponse, isalive_)>(
          reinterpret_cast<char*>(&isalive_),
          reinterpret_cast<char*>(&other->isalive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LivenessRecognitionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[8]);
}

// ===================================================================

class CreateEnrollmentConfig::_Internal {
 public:
  static const ::sensory::api::common::CompressionConfiguration& compression(const CreateEnrollmentConfig* msg);
};

const ::sensory::api::common::CompressionConfiguration&
CreateEnrollmentConfig::_Internal::compression(const CreateEnrollmentConfig* msg) {
  return *msg->compression_;
}
void CreateEnrollmentConfig::clear_compression() {
  if (GetArenaForAllocation() == nullptr && compression_ != nullptr) {
    delete compression_;
  }
  compression_ = nullptr;
}
CreateEnrollmentConfig::CreateEnrollmentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.CreateEnrollmentConfig)
}
CreateEnrollmentConfig::CreateEnrollmentConfig(const CreateEnrollmentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_compression()) {
    compression_ = new ::sensory::api::common::CompressionConfiguration(*from.compression_);
  } else {
    compression_ = nullptr;
  }
  ::memcpy(&islivenessenabled_, &from.islivenessenabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&livenessthreshold_) -
    reinterpret_cast<char*>(&islivenessenabled_)) + sizeof(livenessthreshold_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.CreateEnrollmentConfig)
}

inline void CreateEnrollmentConfig::SharedCtor() {
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compression_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&livenessthreshold_) -
    reinterpret_cast<char*>(&compression_)) + sizeof(livenessthreshold_));
}

CreateEnrollmentConfig::~CreateEnrollmentConfig() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.CreateEnrollmentConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateEnrollmentConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete compression_;
}

void CreateEnrollmentConfig::ArenaDtor(void* object) {
  CreateEnrollmentConfig* _this = reinterpret_cast< CreateEnrollmentConfig* >(object);
  (void)_this;
}
void CreateEnrollmentConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEnrollmentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateEnrollmentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.CreateEnrollmentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  modelname_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && compression_ != nullptr) {
    delete compression_;
  }
  compression_ = nullptr;
  ::memset(&islivenessenabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&livenessthreshold_) -
      reinterpret_cast<char*>(&islivenessenabled_)) + sizeof(livenessthreshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEnrollmentConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userId = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.CreateEnrollmentConfig.userId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceId = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.CreateEnrollmentConfig.deviceId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modelName = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.CreateEnrollmentConfig.modelName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4 [(.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.CreateEnrollmentConfig.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isLivenessEnabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          islivenessenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensory.api.v1.video.RecognitionThreshold livenessThreshold = 6 [(.validate.rules) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_livenessthreshold(static_cast<::sensory::api::v1::video::RecognitionThreshold>(val));
        } else goto handle_unusual;
        continue;
      // .sensory.api.common.CompressionConfiguration compression = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_compression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEnrollmentConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.CreateEnrollmentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 1 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.CreateEnrollmentConfig.userId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string deviceId = 2 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.CreateEnrollmentConfig.deviceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // string modelName = 3 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.CreateEnrollmentConfig.modelName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_modelname(), target);
  }

  // string description = 4 [(.validate.rules) = {
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.CreateEnrollmentConfig.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // bool isLivenessEnabled = 5;
  if (this->_internal_islivenessenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_islivenessenabled(), target);
  }

  // .sensory.api.v1.video.RecognitionThreshold livenessThreshold = 6 [(.validate.rules) = {
  if (this->_internal_livenessthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_livenessthreshold(), target);
  }

  // .sensory.api.common.CompressionConfiguration compression = 7;
  if (this->_internal_has_compression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::compression(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.CreateEnrollmentConfig)
  return target;
}

size_t CreateEnrollmentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.CreateEnrollmentConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 1 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string deviceId = 2 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string modelName = 3 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // string description = 4 [(.validate.rules) = {
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .sensory.api.common.CompressionConfiguration compression = 7;
  if (this->_internal_has_compression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compression_);
  }

  // bool isLivenessEnabled = 5;
  if (this->_internal_islivenessenabled() != 0) {
    total_size += 1 + 1;
  }

  // .sensory.api.v1.video.RecognitionThreshold livenessThreshold = 6 [(.validate.rules) = {
  if (this->_internal_livenessthreshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_livenessthreshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEnrollmentConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateEnrollmentConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEnrollmentConfig::GetClassData() const { return &_class_data_; }

void CreateEnrollmentConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateEnrollmentConfig *>(to)->MergeFrom(
      static_cast<const CreateEnrollmentConfig &>(from));
}


void CreateEnrollmentConfig::MergeFrom(const CreateEnrollmentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.CreateEnrollmentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_compression()) {
    _internal_mutable_compression()->::sensory::api::common::CompressionConfiguration::MergeFrom(from._internal_compression());
  }
  if (from._internal_islivenessenabled() != 0) {
    _internal_set_islivenessenabled(from._internal_islivenessenabled());
  }
  if (from._internal_livenessthreshold() != 0) {
    _internal_set_livenessthreshold(from._internal_livenessthreshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEnrollmentConfig::CopyFrom(const CreateEnrollmentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.CreateEnrollmentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEnrollmentConfig::IsInitialized() const {
  return true;
}

void CreateEnrollmentConfig::InternalSwap(CreateEnrollmentConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, GetArenaForAllocation(),
      &other->userid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, GetArenaForAllocation(),
      &other->deviceid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, GetArenaForAllocation(),
      &other->modelname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateEnrollmentConfig, livenessthreshold_)
      + sizeof(CreateEnrollmentConfig::livenessthreshold_)
      - PROTOBUF_FIELD_OFFSET(CreateEnrollmentConfig, compression_)>(
          reinterpret_cast<char*>(&compression_),
          reinterpret_cast<char*>(&other->compression_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEnrollmentConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[9]);
}

// ===================================================================

class AuthenticateConfig::_Internal {
 public:
  static const ::sensory::api::common::CompressionConfiguration& compression(const AuthenticateConfig* msg);
};

const ::sensory::api::common::CompressionConfiguration&
AuthenticateConfig::_Internal::compression(const AuthenticateConfig* msg) {
  return *msg->compression_;
}
void AuthenticateConfig::clear_compression() {
  if (GetArenaForAllocation() == nullptr && compression_ != nullptr) {
    delete compression_;
  }
  compression_ = nullptr;
}
AuthenticateConfig::AuthenticateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.AuthenticateConfig)
}
AuthenticateConfig::AuthenticateConfig(const AuthenticateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enrollmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enrollmentid().empty()) {
    enrollmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enrollmentid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_compression()) {
    compression_ = new ::sensory::api::common::CompressionConfiguration(*from.compression_);
  } else {
    compression_ = nullptr;
  }
  ::memcpy(&livenessthreshold_, &from.livenessthreshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&doincludetoken_) -
    reinterpret_cast<char*>(&livenessthreshold_)) + sizeof(doincludetoken_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.AuthenticateConfig)
}

inline void AuthenticateConfig::SharedCtor() {
enrollmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compression_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&doincludetoken_) -
    reinterpret_cast<char*>(&compression_)) + sizeof(doincludetoken_));
}

AuthenticateConfig::~AuthenticateConfig() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.AuthenticateConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticateConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  enrollmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete compression_;
}

void AuthenticateConfig::ArenaDtor(void* object) {
  AuthenticateConfig* _this = reinterpret_cast< AuthenticateConfig* >(object);
  (void)_this;
}
void AuthenticateConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.AuthenticateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enrollmentid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && compression_ != nullptr) {
    delete compression_;
  }
  compression_ = nullptr;
  ::memset(&livenessthreshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doincludetoken_) -
      reinterpret_cast<char*>(&livenessthreshold_)) + sizeof(doincludetoken_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string enrollmentId = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enrollmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.AuthenticateConfig.enrollmentId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isLivenessEnabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          islivenessenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensory.api.v1.video.RecognitionThreshold livenessThreshold = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_livenessthreshold(static_cast<::sensory::api::v1::video::RecognitionThreshold>(val));
        } else goto handle_unusual;
        continue;
      // .sensory.api.common.CompressionConfiguration compression = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_compression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool doIncludeToken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          doincludetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.AuthenticateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string enrollmentId = 1 [(.validate.rules) = {
  if (!this->_internal_enrollmentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enrollmentid().data(), static_cast<int>(this->_internal_enrollmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.AuthenticateConfig.enrollmentId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enrollmentid(), target);
  }

  // bool isLivenessEnabled = 2;
  if (this->_internal_islivenessenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_islivenessenabled(), target);
  }

  // .sensory.api.v1.video.RecognitionThreshold livenessThreshold = 3 [(.validate.rules) = {
  if (this->_internal_livenessthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_livenessthreshold(), target);
  }

  // .sensory.api.common.CompressionConfiguration compression = 4;
  if (this->_internal_has_compression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::compression(this), target, stream);
  }

  // bool doIncludeToken = 5;
  if (this->_internal_doincludetoken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_doincludetoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.AuthenticateConfig)
  return target;
}

size_t AuthenticateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.AuthenticateConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string enrollmentId = 1 [(.validate.rules) = {
  if (!this->_internal_enrollmentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enrollmentid());
  }

  // .sensory.api.common.CompressionConfiguration compression = 4;
  if (this->_internal_has_compression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compression_);
  }

  // .sensory.api.v1.video.RecognitionThreshold livenessThreshold = 3 [(.validate.rules) = {
  if (this->_internal_livenessthreshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_livenessthreshold());
  }

  // bool isLivenessEnabled = 2;
  if (this->_internal_islivenessenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool doIncludeToken = 5;
  if (this->_internal_doincludetoken() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticateConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateConfig::GetClassData() const { return &_class_data_; }

void AuthenticateConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AuthenticateConfig *>(to)->MergeFrom(
      static_cast<const AuthenticateConfig &>(from));
}


void AuthenticateConfig::MergeFrom(const AuthenticateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.AuthenticateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_enrollmentid().empty()) {
    _internal_set_enrollmentid(from._internal_enrollmentid());
  }
  if (from._internal_has_compression()) {
    _internal_mutable_compression()->::sensory::api::common::CompressionConfiguration::MergeFrom(from._internal_compression());
  }
  if (from._internal_livenessthreshold() != 0) {
    _internal_set_livenessthreshold(from._internal_livenessthreshold());
  }
  if (from._internal_islivenessenabled() != 0) {
    _internal_set_islivenessenabled(from._internal_islivenessenabled());
  }
  if (from._internal_doincludetoken() != 0) {
    _internal_set_doincludetoken(from._internal_doincludetoken());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateConfig::CopyFrom(const AuthenticateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.AuthenticateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateConfig::IsInitialized() const {
  return true;
}

void AuthenticateConfig::InternalSwap(AuthenticateConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enrollmentid_, GetArenaForAllocation(),
      &other->enrollmentid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateConfig, doincludetoken_)
      + sizeof(AuthenticateConfig::doincludetoken_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateConfig, compression_)>(
          reinterpret_cast<char*>(&compression_),
          reinterpret_cast<char*>(&other->compression_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[10]);
}

// ===================================================================

class ValidateRecognitionConfig::_Internal {
 public:
};

ValidateRecognitionConfig::ValidateRecognitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.video.ValidateRecognitionConfig)
}
ValidateRecognitionConfig::ValidateRecognitionConfig(const ValidateRecognitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.video.ValidateRecognitionConfig)
}

inline void ValidateRecognitionConfig::SharedCtor() {
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
threshold_ = 0;
}

ValidateRecognitionConfig::~ValidateRecognitionConfig() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.video.ValidateRecognitionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateRecognitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidateRecognitionConfig::ArenaDtor(void* object) {
  ValidateRecognitionConfig* _this = reinterpret_cast< ValidateRecognitionConfig* >(object);
  (void)_this;
}
void ValidateRecognitionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateRecognitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateRecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.video.ValidateRecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modelname_.ClearToEmpty();
  userid_.ClearToEmpty();
  threshold_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateRecognitionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string modelName = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.ValidateRecognitionConfig.modelName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userId = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.video.ValidateRecognitionConfig.userId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensory.api.v1.video.RecognitionThreshold threshold = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_threshold(static_cast<::sensory::api::v1::video::RecognitionThreshold>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateRecognitionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.video.ValidateRecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelName = 1 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.ValidateRecognitionConfig.modelName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_modelname(), target);
  }

  // string userId = 2 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.video.ValidateRecognitionConfig.userId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_userid(), target);
  }

  // .sensory.api.v1.video.RecognitionThreshold threshold = 3 [(.validate.rules) = {
  if (this->_internal_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.video.ValidateRecognitionConfig)
  return target;
}

size_t ValidateRecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.video.ValidateRecognitionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modelName = 1 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // string userId = 2 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // .sensory.api.v1.video.RecognitionThreshold threshold = 3 [(.validate.rules) = {
  if (this->_internal_threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateRecognitionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateRecognitionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateRecognitionConfig::GetClassData() const { return &_class_data_; }

void ValidateRecognitionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ValidateRecognitionConfig *>(to)->MergeFrom(
      static_cast<const ValidateRecognitionConfig &>(from));
}


void ValidateRecognitionConfig::MergeFrom(const ValidateRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.video.ValidateRecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (from._internal_threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateRecognitionConfig::CopyFrom(const ValidateRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.video.ValidateRecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateRecognitionConfig::IsInitialized() const {
  return true;
}

void ValidateRecognitionConfig::InternalSwap(ValidateRecognitionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, GetArenaForAllocation(),
      &other->modelname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, GetArenaForAllocation(),
      &other->userid_, other->GetArenaForAllocation()
  );
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateRecognitionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fvideo_2fvideo_2eproto_getter, &descriptor_table_v1_2fvideo_2fvideo_2eproto_once,
      file_level_metadata_v1_2fvideo_2fvideo_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace video
}  // namespace v1
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::VideoModel* Arena::CreateMaybeMessage< ::sensory::api::v1::video::VideoModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::VideoModel >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::GetModelsRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::video::GetModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::GetModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::GetModelsResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::video::GetModelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::GetModelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::CreateEnrollmentRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::video::CreateEnrollmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::CreateEnrollmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::AuthenticateRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::video::AuthenticateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::AuthenticateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::ValidateRecognitionRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::video::ValidateRecognitionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::ValidateRecognitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::CreateEnrollmentResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::video::CreateEnrollmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::CreateEnrollmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::AuthenticateResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::video::AuthenticateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::AuthenticateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::LivenessRecognitionResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::video::LivenessRecognitionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::LivenessRecognitionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::CreateEnrollmentConfig* Arena::CreateMaybeMessage< ::sensory::api::v1::video::CreateEnrollmentConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::CreateEnrollmentConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::AuthenticateConfig* Arena::CreateMaybeMessage< ::sensory::api::v1::video::AuthenticateConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::AuthenticateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::video::ValidateRecognitionConfig* Arena::CreateMaybeMessage< ::sensory::api::v1::video::ValidateRecognitionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::video::ValidateRecognitionConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
