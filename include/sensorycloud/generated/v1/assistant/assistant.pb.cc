// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/assistant/assistant.proto

#include "v1/assistant/assistant.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensory {
namespace api {
namespace v1 {
namespace assistant {
constexpr AssistantMessageRequest::AssistantMessageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : postprocessingaction_(nullptr)
  , _oneof_case_{}{}
struct AssistantMessageRequestDefaultTypeInternal {
  constexpr AssistantMessageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssistantMessageRequestDefaultTypeInternal() {}
  union {
    AssistantMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssistantMessageRequestDefaultTypeInternal _AssistantMessageRequest_default_instance_;
constexpr AssistantMessage::AssistantMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AssistantMessageDefaultTypeInternal {
  constexpr AssistantMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssistantMessageDefaultTypeInternal() {}
  union {
    AssistantMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssistantMessageDefaultTypeInternal _AssistantMessage_default_instance_;
constexpr Intent::Intent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , confidence_(0){}
struct IntentDefaultTypeInternal {
  constexpr IntentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntentDefaultTypeInternal() {}
  union {
    Intent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntentDefaultTypeInternal _Intent_default_instance_;
constexpr AssistantMessageResponse::AssistantMessageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intents_()
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , audiocontent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , intent_(nullptr)
  , postprocessingaction_(nullptr)
  , isaudiocomplete_(false){}
struct AssistantMessageResponseDefaultTypeInternal {
  constexpr AssistantMessageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssistantMessageResponseDefaultTypeInternal() {}
  union {
    AssistantMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssistantMessageResponseDefaultTypeInternal _AssistantMessageResponse_default_instance_;
constexpr AssistantMessageConfig::AssistantMessageConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , includeaudioresponse_(false){}
struct AssistantMessageConfigDefaultTypeInternal {
  constexpr AssistantMessageConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssistantMessageConfigDefaultTypeInternal() {}
  union {
    AssistantMessageConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssistantMessageConfigDefaultTypeInternal _AssistantMessageConfig_default_instance_;
constexpr AssistantPostProcessingActionRequest::AssistantPostProcessingActionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(0)
{}
struct AssistantPostProcessingActionRequestDefaultTypeInternal {
  constexpr AssistantPostProcessingActionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssistantPostProcessingActionRequestDefaultTypeInternal() {}
  union {
    AssistantPostProcessingActionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssistantPostProcessingActionRequestDefaultTypeInternal _AssistantPostProcessingActionRequest_default_instance_;
constexpr AssistantPostProcessingActionResponse::AssistantPostProcessingActionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(0)
{}
struct AssistantPostProcessingActionResponseDefaultTypeInternal {
  constexpr AssistantPostProcessingActionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssistantPostProcessingActionResponseDefaultTypeInternal() {}
  union {
    AssistantPostProcessingActionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssistantPostProcessingActionResponseDefaultTypeInternal _AssistantPostProcessingActionResponse_default_instance_;
}  // namespace assistant
}  // namespace v1
}  // namespace api
}  // namespace sensory
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_v1_2fassistant_2fassistant_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_v1_2fassistant_2fassistant_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_v1_2fassistant_2fassistant_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_v1_2fassistant_2fassistant_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageRequest, postprocessingaction_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageRequest, streamingRequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::Intent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::Intent, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::Intent, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageResponse, text_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageResponse, audiocontent_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageResponse, intent_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageResponse, intents_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageResponse, isaudiocomplete_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageResponse, postprocessingaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageConfig, userid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageConfig, deviceid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageConfig, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantMessageConfig, includeaudioresponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantPostProcessingActionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantPostProcessingActionRequest, actionid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantPostProcessingActionRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantPostProcessingActionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantPostProcessingActionResponse, actionid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::assistant::AssistantPostProcessingActionResponse, action_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sensory::api::v1::assistant::AssistantMessageRequest)},
  { 10, -1, -1, sizeof(::sensory::api::v1::assistant::AssistantMessage)},
  { 19, -1, -1, sizeof(::sensory::api::v1::assistant::Intent)},
  { 27, -1, -1, sizeof(::sensory::api::v1::assistant::AssistantMessageResponse)},
  { 39, -1, -1, sizeof(::sensory::api::v1::assistant::AssistantMessageConfig)},
  { 49, -1, -1, sizeof(::sensory::api::v1::assistant::AssistantPostProcessingActionRequest)},
  { 57, -1, -1, sizeof(::sensory::api::v1::assistant::AssistantPostProcessingActionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::assistant::_AssistantMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::assistant::_AssistantMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::assistant::_Intent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::assistant::_AssistantMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::assistant::_AssistantMessageConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::assistant::_AssistantPostProcessingActionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::assistant::_AssistantPostProcessingActionResponse_default_instance_),
};

const char descriptor_table_protodef_v1_2fassistant_2fassistant_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034v1/assistant/assistant.proto\022\030sensory."
  "api.v1.assistant\032\027validate/validate.prot"
  "o\"\223\002\n\027AssistantMessageRequest\022B\n\006config\030"
  "\001 \001(\01320.sensory.api.v1.assistant.Assista"
  "ntMessageConfigH\000\022=\n\007message\030\002 \001(\0132*.sen"
  "sory.api.v1.assistant.AssistantMessageH\000"
  "\022\\\n\024postProcessingAction\030\n \001(\0132>.sensory"
  ".api.v1.assistant.AssistantPostProcessin"
  "gActionRequestB\027\n\020streamingRequest\022\003\370B\001\""
  "V\n\020AssistantMessage\022\032\n\004text\030\001 \001(\tB\n\372B\007r\005"
  "\020\001\030\377\017H\000\022\026\n\014audioContent\030\002 \001(\014H\000B\016\n\007messa"
  "ge\022\003\370B\001\"*\n\006Intent\022\014\n\004name\030\001 \001(\t\022\022\n\nconfi"
  "dence\030\002 \001(\001\"\233\002\n\030AssistantMessageResponse"
  "\022\014\n\004text\030\001 \001(\t\022\024\n\014audioContent\030\002 \001(\014\0220\n\006"
  "intent\030\003 \001(\0132 .sensory.api.v1.assistant."
  "Intent\0221\n\007intents\030\004 \003(\0132 .sensory.api.v1"
  ".assistant.Intent\022\027\n\017isAudioComplete\030\005 \001"
  "(\010\022]\n\024postProcessingAction\030\n \001(\0132\?.senso"
  "ry.api.v1.assistant.AssistantPostProcess"
  "ingActionResponse\"\215\001\n\026AssistantMessageCo"
  "nfig\022\031\n\006userId\030\002 \001(\tB\t\372B\006r\004\020\001\030\177\022\033\n\010devic"
  "eId\030\003 \001(\tB\t\372B\006r\004\020\001\030\177\022\035\n\tmodelName\030\004 \001(\tB"
  "\n\372B\007r\005\020\001\030\377\001\022\034\n\024includeAudioResponse\030\005 \001("
  "\010\"\213\001\n$AssistantPostProcessingActionReque"
  "st\022\020\n\010actionId\030\001 \001(\t\022Q\n\006action\030\002 \001(\01627.s"
  "ensory.api.v1.assistant.AssistantPostPro"
  "cessingActionB\010\372B\005\202\001\002\020\001\"\214\001\n%AssistantPos"
  "tProcessingActionResponse\022\020\n\010actionId\030\001 "
  "\001(\t\022Q\n\006action\030\002 \001(\01627.sensory.api.v1.ass"
  "istant.AssistantPostProcessingActionB\010\372B"
  "\005\202\001\002\020\001*7\n\035AssistantPostProcessingAction\022"
  "\013\n\007NOT_SET\020\000\022\t\n\005FINAL\020\0012\221\001\n\020AssistantSer"
  "vice\022}\n\016ProcessMessage\0221.sensory.api.v1."
  "assistant.AssistantMessageRequest\0322.sens"
  "ory.api.v1.assistant.AssistantMessageRes"
  "ponse\"\000(\0010\001B\200\001\n ai.sensorycloud.api.v1.a"
  "ssistantB\032SensoryApiV1AssistantProtoP\001Z>"
  "gitlab.com/sensory-cloud/server/titan.gi"
  "t/pkg/api/v1/assistantb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_v1_2fassistant_2fassistant_2eproto_deps[1] = {
  &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_v1_2fassistant_2fassistant_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fassistant_2fassistant_2eproto = {
  false, false, 1550, descriptor_table_protodef_v1_2fassistant_2fassistant_2eproto, "v1/assistant/assistant.proto", 
  &descriptor_table_v1_2fassistant_2fassistant_2eproto_once, descriptor_table_v1_2fassistant_2fassistant_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_v1_2fassistant_2fassistant_2eproto::offsets,
  file_level_metadata_v1_2fassistant_2fassistant_2eproto, file_level_enum_descriptors_v1_2fassistant_2fassistant_2eproto, file_level_service_descriptors_v1_2fassistant_2fassistant_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_v1_2fassistant_2fassistant_2eproto_getter() {
  return &descriptor_table_v1_2fassistant_2fassistant_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_v1_2fassistant_2fassistant_2eproto(&descriptor_table_v1_2fassistant_2fassistant_2eproto);
namespace sensory {
namespace api {
namespace v1 {
namespace assistant {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AssistantPostProcessingAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v1_2fassistant_2fassistant_2eproto);
  return file_level_enum_descriptors_v1_2fassistant_2fassistant_2eproto[0];
}
bool AssistantPostProcessingAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AssistantMessageRequest::_Internal {
 public:
  static const ::sensory::api::v1::assistant::AssistantMessageConfig& config(const AssistantMessageRequest* msg);
  static const ::sensory::api::v1::assistant::AssistantMessage& message(const AssistantMessageRequest* msg);
  static const ::sensory::api::v1::assistant::AssistantPostProcessingActionRequest& postprocessingaction(const AssistantMessageRequest* msg);
};

const ::sensory::api::v1::assistant::AssistantMessageConfig&
AssistantMessageRequest::_Internal::config(const AssistantMessageRequest* msg) {
  return *msg->streamingRequest_.config_;
}
const ::sensory::api::v1::assistant::AssistantMessage&
AssistantMessageRequest::_Internal::message(const AssistantMessageRequest* msg) {
  return *msg->streamingRequest_.message_;
}
const ::sensory::api::v1::assistant::AssistantPostProcessingActionRequest&
AssistantMessageRequest::_Internal::postprocessingaction(const AssistantMessageRequest* msg) {
  return *msg->postprocessingaction_;
}
void AssistantMessageRequest::set_allocated_config(::sensory::api::v1::assistant::AssistantMessageConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streamingRequest();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::assistant::AssistantMessageConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streamingRequest_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.assistant.AssistantMessageRequest.config)
}
void AssistantMessageRequest::set_allocated_message(::sensory::api::v1::assistant::AssistantMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streamingRequest();
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::assistant::AssistantMessage>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    set_has_message();
    streamingRequest_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.assistant.AssistantMessageRequest.message)
}
AssistantMessageRequest::AssistantMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.assistant.AssistantMessageRequest)
}
AssistantMessageRequest::AssistantMessageRequest(const AssistantMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_postprocessingaction()) {
    postprocessingaction_ = new ::sensory::api::v1::assistant::AssistantPostProcessingActionRequest(*from.postprocessingaction_);
  } else {
    postprocessingaction_ = nullptr;
  }
  clear_has_streamingRequest();
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::assistant::AssistantMessageConfig::MergeFrom(from._internal_config());
      break;
    }
    case kMessage: {
      _internal_mutable_message()->::sensory::api::v1::assistant::AssistantMessage::MergeFrom(from._internal_message());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.assistant.AssistantMessageRequest)
}

void AssistantMessageRequest::SharedCtor() {
postprocessingaction_ = nullptr;
clear_has_streamingRequest();
}

AssistantMessageRequest::~AssistantMessageRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.assistant.AssistantMessageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssistantMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete postprocessingaction_;
  if (has_streamingRequest()) {
    clear_streamingRequest();
  }
}

void AssistantMessageRequest::ArenaDtor(void* object) {
  AssistantMessageRequest* _this = reinterpret_cast< AssistantMessageRequest* >(object);
  (void)_this;
}
void AssistantMessageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssistantMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssistantMessageRequest::clear_streamingRequest() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.assistant.AssistantMessageRequest)
  switch (streamingRequest_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streamingRequest_.config_;
      }
      break;
    }
    case kMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete streamingRequest_.message_;
      }
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMINGREQUEST_NOT_SET;
}


void AssistantMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.assistant.AssistantMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && postprocessingaction_ != nullptr) {
    delete postprocessingaction_;
  }
  postprocessingaction_ = nullptr;
  clear_streamingRequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssistantMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.assistant.AssistantMessageConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.assistant.AssistantMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.assistant.AssistantPostProcessingActionRequest postProcessingAction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_postprocessingaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssistantMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.assistant.AssistantMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.assistant.AssistantMessageConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .sensory.api.v1.assistant.AssistantMessage message = 2;
  if (_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  // .sensory.api.v1.assistant.AssistantPostProcessingActionRequest postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::postprocessingaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.assistant.AssistantMessageRequest)
  return target;
}

size_t AssistantMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.assistant.AssistantMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensory.api.v1.assistant.AssistantPostProcessingActionRequest postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *postprocessingaction_);
  }

  switch (streamingRequest_case()) {
    // .sensory.api.v1.assistant.AssistantMessageConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streamingRequest_.config_);
      break;
    }
    // .sensory.api.v1.assistant.AssistantMessage message = 2;
    case kMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streamingRequest_.message_);
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssistantMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssistantMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssistantMessageRequest::GetClassData() const { return &_class_data_; }

void AssistantMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssistantMessageRequest *>(to)->MergeFrom(
      static_cast<const AssistantMessageRequest &>(from));
}


void AssistantMessageRequest::MergeFrom(const AssistantMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.assistant.AssistantMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_postprocessingaction()) {
    _internal_mutable_postprocessingaction()->::sensory::api::v1::assistant::AssistantPostProcessingActionRequest::MergeFrom(from._internal_postprocessingaction());
  }
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::assistant::AssistantMessageConfig::MergeFrom(from._internal_config());
      break;
    }
    case kMessage: {
      _internal_mutable_message()->::sensory::api::v1::assistant::AssistantMessage::MergeFrom(from._internal_message());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssistantMessageRequest::CopyFrom(const AssistantMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.assistant.AssistantMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistantMessageRequest::IsInitialized() const {
  return true;
}

void AssistantMessageRequest::InternalSwap(AssistantMessageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(postprocessingaction_, other->postprocessingaction_);
  swap(streamingRequest_, other->streamingRequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssistantMessageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fassistant_2fassistant_2eproto_getter, &descriptor_table_v1_2fassistant_2fassistant_2eproto_once,
      file_level_metadata_v1_2fassistant_2fassistant_2eproto[0]);
}

// ===================================================================

class AssistantMessage::_Internal {
 public:
};

AssistantMessage::AssistantMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.assistant.AssistantMessage)
}
AssistantMessage::AssistantMessage(const AssistantMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kText: {
      _internal_set_text(from._internal_text());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.assistant.AssistantMessage)
}

void AssistantMessage::SharedCtor() {
clear_has_message();
}

AssistantMessage::~AssistantMessage() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.assistant.AssistantMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssistantMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void AssistantMessage::ArenaDtor(void* object) {
  AssistantMessage* _this = reinterpret_cast< AssistantMessage* >(object);
  (void)_this;
}
void AssistantMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssistantMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssistantMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.assistant.AssistantMessage)
  switch (message_case()) {
    case kText: {
      message_.text_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kAudioContent: {
      message_.audiocontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void AssistantMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.assistant.AssistantMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssistantMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.assistant.AssistantMessage.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes audioContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audiocontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssistantMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.assistant.AssistantMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1 [(.validate.rules) = {
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.assistant.AssistantMessage.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // bytes audioContent = 2;
  if (_internal_has_audiocontent()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audiocontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.assistant.AssistantMessage)
  return target;
}

size_t AssistantMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.assistant.AssistantMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // string text = 1 [(.validate.rules) = {
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
      break;
    }
    // bytes audioContent = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audiocontent());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssistantMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssistantMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssistantMessage::GetClassData() const { return &_class_data_; }

void AssistantMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssistantMessage *>(to)->MergeFrom(
      static_cast<const AssistantMessage &>(from));
}


void AssistantMessage::MergeFrom(const AssistantMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.assistant.AssistantMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kText: {
      _internal_set_text(from._internal_text());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssistantMessage::CopyFrom(const AssistantMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.assistant.AssistantMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistantMessage::IsInitialized() const {
  return true;
}

void AssistantMessage::InternalSwap(AssistantMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssistantMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fassistant_2fassistant_2eproto_getter, &descriptor_table_v1_2fassistant_2fassistant_2eproto_once,
      file_level_metadata_v1_2fassistant_2fassistant_2eproto[1]);
}

// ===================================================================

class Intent::_Internal {
 public:
};

Intent::Intent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.assistant.Intent)
}
Intent::Intent(const Intent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.assistant.Intent)
}

void Intent::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
confidence_ = 0;
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.assistant.Intent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Intent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Intent::ArenaDtor(void* object) {
  Intent* _this = reinterpret_cast< Intent* >(object);
  (void)_this;
}
void Intent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Intent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.assistant.Intent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Intent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.assistant.Intent.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Intent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.assistant.Intent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.assistant.Intent.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double confidence = 2;
  if (!(this->_internal_confidence() <= 0 && this->_internal_confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.assistant.Intent)
  return target;
}

size_t Intent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.assistant.Intent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double confidence = 2;
  if (!(this->_internal_confidence() <= 0 && this->_internal_confidence() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Intent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Intent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Intent::GetClassData() const { return &_class_data_; }

void Intent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Intent *>(to)->MergeFrom(
      static_cast<const Intent &>(from));
}


void Intent::MergeFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.assistant.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!(from._internal_confidence() <= 0 && from._internal_confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Intent::CopyFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.assistant.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {
  return true;
}

void Intent::InternalSwap(Intent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Intent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fassistant_2fassistant_2eproto_getter, &descriptor_table_v1_2fassistant_2fassistant_2eproto_once,
      file_level_metadata_v1_2fassistant_2fassistant_2eproto[2]);
}

// ===================================================================

class AssistantMessageResponse::_Internal {
 public:
  static const ::sensory::api::v1::assistant::Intent& intent(const AssistantMessageResponse* msg);
  static const ::sensory::api::v1::assistant::AssistantPostProcessingActionResponse& postprocessingaction(const AssistantMessageResponse* msg);
};

const ::sensory::api::v1::assistant::Intent&
AssistantMessageResponse::_Internal::intent(const AssistantMessageResponse* msg) {
  return *msg->intent_;
}
const ::sensory::api::v1::assistant::AssistantPostProcessingActionResponse&
AssistantMessageResponse::_Internal::postprocessingaction(const AssistantMessageResponse* msg) {
  return *msg->postprocessingaction_;
}
AssistantMessageResponse::AssistantMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  intents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.assistant.AssistantMessageResponse)
}
AssistantMessageResponse::AssistantMessageResponse(const AssistantMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      intents_(from.intents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  audiocontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audiocontent().empty()) {
    audiocontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audiocontent(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_intent()) {
    intent_ = new ::sensory::api::v1::assistant::Intent(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  if (from._internal_has_postprocessingaction()) {
    postprocessingaction_ = new ::sensory::api::v1::assistant::AssistantPostProcessingActionResponse(*from.postprocessingaction_);
  } else {
    postprocessingaction_ = nullptr;
  }
  isaudiocomplete_ = from.isaudiocomplete_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.assistant.AssistantMessageResponse)
}

void AssistantMessageResponse::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
audiocontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&intent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isaudiocomplete_) -
    reinterpret_cast<char*>(&intent_)) + sizeof(isaudiocomplete_));
}

AssistantMessageResponse::~AssistantMessageResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.assistant.AssistantMessageResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssistantMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audiocontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intent_;
  if (this != internal_default_instance()) delete postprocessingaction_;
}

void AssistantMessageResponse::ArenaDtor(void* object) {
  AssistantMessageResponse* _this = reinterpret_cast< AssistantMessageResponse* >(object);
  (void)_this;
}
void AssistantMessageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssistantMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssistantMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.assistant.AssistantMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intents_.Clear();
  text_.ClearToEmpty();
  audiocontent_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && intent_ != nullptr) {
    delete intent_;
  }
  intent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && postprocessingaction_ != nullptr) {
    delete postprocessingaction_;
  }
  postprocessingaction_ = nullptr;
  isaudiocomplete_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssistantMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.assistant.AssistantMessageResponse.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes audioContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audiocontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.assistant.Intent intent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sensory.api.v1.assistant.Intent intents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool isAudioComplete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          isaudiocomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.assistant.AssistantPostProcessingActionResponse postProcessingAction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_postprocessingaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssistantMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.assistant.AssistantMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.assistant.AssistantMessageResponse.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // bytes audioContent = 2;
  if (!this->_internal_audiocontent().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audiocontent(), target);
  }

  // .sensory.api.v1.assistant.Intent intent = 3;
  if (this->_internal_has_intent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::intent(this), target, stream);
  }

  // repeated .sensory.api.v1.assistant.Intent intents = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_intents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_intents(i), target, stream);
  }

  // bool isAudioComplete = 5;
  if (this->_internal_isaudiocomplete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isaudiocomplete(), target);
  }

  // .sensory.api.v1.assistant.AssistantPostProcessingActionResponse postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::postprocessingaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.assistant.AssistantMessageResponse)
  return target;
}

size_t AssistantMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.assistant.AssistantMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensory.api.v1.assistant.Intent intents = 4;
  total_size += 1UL * this->_internal_intents_size();
  for (const auto& msg : this->intents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // bytes audioContent = 2;
  if (!this->_internal_audiocontent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_audiocontent());
  }

  // .sensory.api.v1.assistant.Intent intent = 3;
  if (this->_internal_has_intent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intent_);
  }

  // .sensory.api.v1.assistant.AssistantPostProcessingActionResponse postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *postprocessingaction_);
  }

  // bool isAudioComplete = 5;
  if (this->_internal_isaudiocomplete() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssistantMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssistantMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssistantMessageResponse::GetClassData() const { return &_class_data_; }

void AssistantMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssistantMessageResponse *>(to)->MergeFrom(
      static_cast<const AssistantMessageResponse &>(from));
}


void AssistantMessageResponse::MergeFrom(const AssistantMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.assistant.AssistantMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intents_.MergeFrom(from.intents_);
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_audiocontent().empty()) {
    _internal_set_audiocontent(from._internal_audiocontent());
  }
  if (from._internal_has_intent()) {
    _internal_mutable_intent()->::sensory::api::v1::assistant::Intent::MergeFrom(from._internal_intent());
  }
  if (from._internal_has_postprocessingaction()) {
    _internal_mutable_postprocessingaction()->::sensory::api::v1::assistant::AssistantPostProcessingActionResponse::MergeFrom(from._internal_postprocessingaction());
  }
  if (from._internal_isaudiocomplete() != 0) {
    _internal_set_isaudiocomplete(from._internal_isaudiocomplete());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssistantMessageResponse::CopyFrom(const AssistantMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.assistant.AssistantMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistantMessageResponse::IsInitialized() const {
  return true;
}

void AssistantMessageResponse::InternalSwap(AssistantMessageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  intents_.InternalSwap(&other->intents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &audiocontent_, lhs_arena,
      &other->audiocontent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssistantMessageResponse, isaudiocomplete_)
      + sizeof(AssistantMessageResponse::isaudiocomplete_)
      - PROTOBUF_FIELD_OFFSET(AssistantMessageResponse, intent_)>(
          reinterpret_cast<char*>(&intent_),
          reinterpret_cast<char*>(&other->intent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssistantMessageResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fassistant_2fassistant_2eproto_getter, &descriptor_table_v1_2fassistant_2fassistant_2eproto_once,
      file_level_metadata_v1_2fassistant_2fassistant_2eproto[3]);
}

// ===================================================================

class AssistantMessageConfig::_Internal {
 public:
};

AssistantMessageConfig::AssistantMessageConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.assistant.AssistantMessageConfig)
}
AssistantMessageConfig::AssistantMessageConfig(const AssistantMessageConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  includeaudioresponse_ = from.includeaudioresponse_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.assistant.AssistantMessageConfig)
}

void AssistantMessageConfig::SharedCtor() {
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
includeaudioresponse_ = false;
}

AssistantMessageConfig::~AssistantMessageConfig() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.assistant.AssistantMessageConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssistantMessageConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssistantMessageConfig::ArenaDtor(void* object) {
  AssistantMessageConfig* _this = reinterpret_cast< AssistantMessageConfig* >(object);
  (void)_this;
}
void AssistantMessageConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssistantMessageConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssistantMessageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.assistant.AssistantMessageConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  modelname_.ClearToEmpty();
  includeaudioresponse_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssistantMessageConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userId = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.assistant.AssistantMessageConfig.userId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceId = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.assistant.AssistantMessageConfig.deviceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string modelName = 4 [(.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.assistant.AssistantMessageConfig.modelName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool includeAudioResponse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          includeaudioresponse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssistantMessageConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.assistant.AssistantMessageConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 2 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.assistant.AssistantMessageConfig.userId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_userid(), target);
  }

  // string deviceId = 3 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.assistant.AssistantMessageConfig.deviceId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_deviceid(), target);
  }

  // string modelName = 4 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.assistant.AssistantMessageConfig.modelName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_modelname(), target);
  }

  // bool includeAudioResponse = 5;
  if (this->_internal_includeaudioresponse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_includeaudioresponse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.assistant.AssistantMessageConfig)
  return target;
}

size_t AssistantMessageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.assistant.AssistantMessageConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 2 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string deviceId = 3 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string modelName = 4 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // bool includeAudioResponse = 5;
  if (this->_internal_includeaudioresponse() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssistantMessageConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssistantMessageConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssistantMessageConfig::GetClassData() const { return &_class_data_; }

void AssistantMessageConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssistantMessageConfig *>(to)->MergeFrom(
      static_cast<const AssistantMessageConfig &>(from));
}


void AssistantMessageConfig::MergeFrom(const AssistantMessageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.assistant.AssistantMessageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (from._internal_includeaudioresponse() != 0) {
    _internal_set_includeaudioresponse(from._internal_includeaudioresponse());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssistantMessageConfig::CopyFrom(const AssistantMessageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.assistant.AssistantMessageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistantMessageConfig::IsInitialized() const {
  return true;
}

void AssistantMessageConfig::InternalSwap(AssistantMessageConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, lhs_arena,
      &other->userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, lhs_arena,
      &other->modelname_, rhs_arena
  );
  swap(includeaudioresponse_, other->includeaudioresponse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssistantMessageConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fassistant_2fassistant_2eproto_getter, &descriptor_table_v1_2fassistant_2fassistant_2eproto_once,
      file_level_metadata_v1_2fassistant_2fassistant_2eproto[4]);
}

// ===================================================================

class AssistantPostProcessingActionRequest::_Internal {
 public:
};

AssistantPostProcessingActionRequest::AssistantPostProcessingActionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.assistant.AssistantPostProcessingActionRequest)
}
AssistantPostProcessingActionRequest::AssistantPostProcessingActionRequest(const AssistantPostProcessingActionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actionid().empty()) {
    actionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actionid(), 
      GetArenaForAllocation());
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.assistant.AssistantPostProcessingActionRequest)
}

void AssistantPostProcessingActionRequest::SharedCtor() {
actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_ = 0;
}

AssistantPostProcessingActionRequest::~AssistantPostProcessingActionRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.assistant.AssistantPostProcessingActionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssistantPostProcessingActionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  actionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssistantPostProcessingActionRequest::ArenaDtor(void* object) {
  AssistantPostProcessingActionRequest* _this = reinterpret_cast< AssistantPostProcessingActionRequest* >(object);
  (void)_this;
}
void AssistantPostProcessingActionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssistantPostProcessingActionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssistantPostProcessingActionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.assistant.AssistantPostProcessingActionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionid_.ClearToEmpty();
  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssistantPostProcessingActionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string actionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_actionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.assistant.AssistantPostProcessingActionRequest.actionId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.assistant.AssistantPostProcessingAction action = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::sensory::api::v1::assistant::AssistantPostProcessingAction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssistantPostProcessingActionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.assistant.AssistantPostProcessingActionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string actionId = 1;
  if (!this->_internal_actionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actionid().data(), static_cast<int>(this->_internal_actionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.assistant.AssistantPostProcessingActionRequest.actionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_actionid(), target);
  }

  // .sensory.api.v1.assistant.AssistantPostProcessingAction action = 2 [(.validate.rules) = {
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.assistant.AssistantPostProcessingActionRequest)
  return target;
}

size_t AssistantPostProcessingActionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.assistant.AssistantPostProcessingActionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actionId = 1;
  if (!this->_internal_actionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actionid());
  }

  // .sensory.api.v1.assistant.AssistantPostProcessingAction action = 2 [(.validate.rules) = {
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssistantPostProcessingActionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssistantPostProcessingActionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssistantPostProcessingActionRequest::GetClassData() const { return &_class_data_; }

void AssistantPostProcessingActionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssistantPostProcessingActionRequest *>(to)->MergeFrom(
      static_cast<const AssistantPostProcessingActionRequest &>(from));
}


void AssistantPostProcessingActionRequest::MergeFrom(const AssistantPostProcessingActionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.assistant.AssistantPostProcessingActionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actionid().empty()) {
    _internal_set_actionid(from._internal_actionid());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssistantPostProcessingActionRequest::CopyFrom(const AssistantPostProcessingActionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.assistant.AssistantPostProcessingActionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistantPostProcessingActionRequest::IsInitialized() const {
  return true;
}

void AssistantPostProcessingActionRequest::InternalSwap(AssistantPostProcessingActionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actionid_, lhs_arena,
      &other->actionid_, rhs_arena
  );
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssistantPostProcessingActionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fassistant_2fassistant_2eproto_getter, &descriptor_table_v1_2fassistant_2fassistant_2eproto_once,
      file_level_metadata_v1_2fassistant_2fassistant_2eproto[5]);
}

// ===================================================================

class AssistantPostProcessingActionResponse::_Internal {
 public:
};

AssistantPostProcessingActionResponse::AssistantPostProcessingActionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.assistant.AssistantPostProcessingActionResponse)
}
AssistantPostProcessingActionResponse::AssistantPostProcessingActionResponse(const AssistantPostProcessingActionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actionid().empty()) {
    actionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actionid(), 
      GetArenaForAllocation());
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.assistant.AssistantPostProcessingActionResponse)
}

void AssistantPostProcessingActionResponse::SharedCtor() {
actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_ = 0;
}

AssistantPostProcessingActionResponse::~AssistantPostProcessingActionResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.assistant.AssistantPostProcessingActionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssistantPostProcessingActionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  actionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssistantPostProcessingActionResponse::ArenaDtor(void* object) {
  AssistantPostProcessingActionResponse* _this = reinterpret_cast< AssistantPostProcessingActionResponse* >(object);
  (void)_this;
}
void AssistantPostProcessingActionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssistantPostProcessingActionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssistantPostProcessingActionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.assistant.AssistantPostProcessingActionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionid_.ClearToEmpty();
  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssistantPostProcessingActionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string actionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_actionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.assistant.AssistantPostProcessingActionResponse.actionId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.assistant.AssistantPostProcessingAction action = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::sensory::api::v1::assistant::AssistantPostProcessingAction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssistantPostProcessingActionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.assistant.AssistantPostProcessingActionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string actionId = 1;
  if (!this->_internal_actionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actionid().data(), static_cast<int>(this->_internal_actionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.assistant.AssistantPostProcessingActionResponse.actionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_actionid(), target);
  }

  // .sensory.api.v1.assistant.AssistantPostProcessingAction action = 2 [(.validate.rules) = {
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.assistant.AssistantPostProcessingActionResponse)
  return target;
}

size_t AssistantPostProcessingActionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.assistant.AssistantPostProcessingActionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actionId = 1;
  if (!this->_internal_actionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actionid());
  }

  // .sensory.api.v1.assistant.AssistantPostProcessingAction action = 2 [(.validate.rules) = {
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssistantPostProcessingActionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssistantPostProcessingActionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssistantPostProcessingActionResponse::GetClassData() const { return &_class_data_; }

void AssistantPostProcessingActionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssistantPostProcessingActionResponse *>(to)->MergeFrom(
      static_cast<const AssistantPostProcessingActionResponse &>(from));
}


void AssistantPostProcessingActionResponse::MergeFrom(const AssistantPostProcessingActionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.assistant.AssistantPostProcessingActionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actionid().empty()) {
    _internal_set_actionid(from._internal_actionid());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssistantPostProcessingActionResponse::CopyFrom(const AssistantPostProcessingActionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.assistant.AssistantPostProcessingActionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistantPostProcessingActionResponse::IsInitialized() const {
  return true;
}

void AssistantPostProcessingActionResponse::InternalSwap(AssistantPostProcessingActionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actionid_, lhs_arena,
      &other->actionid_, rhs_arena
  );
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssistantPostProcessingActionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fassistant_2fassistant_2eproto_getter, &descriptor_table_v1_2fassistant_2fassistant_2eproto_once,
      file_level_metadata_v1_2fassistant_2fassistant_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace assistant
}  // namespace v1
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensory::api::v1::assistant::AssistantMessageRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::assistant::AssistantMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::assistant::AssistantMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::assistant::AssistantMessage* Arena::CreateMaybeMessage< ::sensory::api::v1::assistant::AssistantMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::assistant::AssistantMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::assistant::Intent* Arena::CreateMaybeMessage< ::sensory::api::v1::assistant::Intent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::assistant::Intent >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::assistant::AssistantMessageResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::assistant::AssistantMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::assistant::AssistantMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::assistant::AssistantMessageConfig* Arena::CreateMaybeMessage< ::sensory::api::v1::assistant::AssistantMessageConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::assistant::AssistantMessageConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::assistant::AssistantPostProcessingActionRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::assistant::AssistantPostProcessingActionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::assistant::AssistantPostProcessingActionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::assistant::AssistantPostProcessingActionResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::assistant::AssistantPostProcessingActionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::assistant::AssistantPostProcessingActionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
