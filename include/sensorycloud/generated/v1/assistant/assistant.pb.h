// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/assistant/assistant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2fassistant_2fassistant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_v1_2fassistant_2fassistant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_v1_2fassistant_2fassistant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2fassistant_2fassistant_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fassistant_2fassistant_2eproto;
namespace sensory {
namespace api {
namespace v1 {
namespace assistant {
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class TextChatRequest;
struct TextChatRequestDefaultTypeInternal;
extern TextChatRequestDefaultTypeInternal _TextChatRequest_default_instance_;
class TextChatResponse;
struct TextChatResponseDefaultTypeInternal;
extern TextChatResponseDefaultTypeInternal _TextChatResponse_default_instance_;
}  // namespace assistant
}  // namespace v1
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> ::sensory::api::v1::assistant::ChatMessage* Arena::CreateMaybeMessage<::sensory::api::v1::assistant::ChatMessage>(Arena*);
template<> ::sensory::api::v1::assistant::TextChatRequest* Arena::CreateMaybeMessage<::sensory::api::v1::assistant::TextChatRequest>(Arena*);
template<> ::sensory::api::v1::assistant::TextChatResponse* Arena::CreateMaybeMessage<::sensory::api::v1::assistant::TextChatResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sensory {
namespace api {
namespace v1 {
namespace assistant {

enum ChatRole : int {
  SYSTEM = 0,
  USER = 1,
  ASSISTANT = 2,
  ChatRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChatRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChatRole_IsValid(int value);
constexpr ChatRole ChatRole_MIN = SYSTEM;
constexpr ChatRole ChatRole_MAX = ASSISTANT;
constexpr int ChatRole_ARRAYSIZE = ChatRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatRole_descriptor();
template<typename T>
inline const std::string& ChatRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatRole_descriptor(), enum_t_value);
}
inline bool ChatRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatRole>(
    ChatRole_descriptor(), name, value);
}
// ===================================================================

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensory.api.v1.assistant.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit constexpr ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const final {
    return new ChatMessage();
  }

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.assistant.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kRoleFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_MUST_USE_RESULT std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .sensory.api.v1.assistant.ChatRole role = 1;
  void clear_role();
  ::sensory::api::v1::assistant::ChatRole role() const;
  void set_role(::sensory::api::v1::assistant::ChatRole value);
  private:
  ::sensory::api::v1::assistant::ChatRole _internal_role() const;
  void _internal_set_role(::sensory::api::v1::assistant::ChatRole value);
  public:

  // @@protoc_insertion_point(class_scope:sensory.api.v1.assistant.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fassistant_2fassistant_2eproto;
};
// -------------------------------------------------------------------

class TextChatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensory.api.v1.assistant.TextChatRequest) */ {
 public:
  inline TextChatRequest() : TextChatRequest(nullptr) {}
  ~TextChatRequest() override;
  explicit constexpr TextChatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextChatRequest(const TextChatRequest& from);
  TextChatRequest(TextChatRequest&& from) noexcept
    : TextChatRequest() {
    *this = ::std::move(from);
  }

  inline TextChatRequest& operator=(const TextChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatRequest& operator=(TextChatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextChatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextChatRequest* internal_default_instance() {
    return reinterpret_cast<const TextChatRequest*>(
               &_TextChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TextChatRequest& a, TextChatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TextChatRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextChatRequest* New() const final {
    return new TextChatRequest();
  }

  TextChatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextChatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextChatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextChatRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextChatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.assistant.TextChatRequest";
  }
  protected:
  explicit TextChatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kModelNameFieldNumber = 1,
  };
  // repeated .sensory.api.v1.assistant.ChatMessage messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::sensory::api::v1::assistant::ChatMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensory::api::v1::assistant::ChatMessage >*
      mutable_messages();
  private:
  const ::sensory::api::v1::assistant::ChatMessage& _internal_messages(int index) const;
  ::sensory::api::v1::assistant::ChatMessage* _internal_add_messages();
  public:
  const ::sensory::api::v1::assistant::ChatMessage& messages(int index) const;
  ::sensory::api::v1::assistant::ChatMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensory::api::v1::assistant::ChatMessage >&
      messages() const;

  // string modelName = 1;
  void clear_modelname();
  const std::string& modelname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modelname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modelname();
  PROTOBUF_MUST_USE_RESULT std::string* release_modelname();
  void set_allocated_modelname(std::string* modelname);
  private:
  const std::string& _internal_modelname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modelname(const std::string& value);
  std::string* _internal_mutable_modelname();
  public:

  // @@protoc_insertion_point(class_scope:sensory.api.v1.assistant.TextChatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensory::api::v1::assistant::ChatMessage > messages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fassistant_2fassistant_2eproto;
};
// -------------------------------------------------------------------

class TextChatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensory.api.v1.assistant.TextChatResponse) */ {
 public:
  inline TextChatResponse() : TextChatResponse(nullptr) {}
  ~TextChatResponse() override;
  explicit constexpr TextChatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextChatResponse(const TextChatResponse& from);
  TextChatResponse(TextChatResponse&& from) noexcept
    : TextChatResponse() {
    *this = ::std::move(from);
  }

  inline TextChatResponse& operator=(const TextChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatResponse& operator=(TextChatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextChatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextChatResponse* internal_default_instance() {
    return reinterpret_cast<const TextChatResponse*>(
               &_TextChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TextChatResponse& a, TextChatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TextChatResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextChatResponse* New() const final {
    return new TextChatResponse();
  }

  TextChatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextChatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextChatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextChatResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextChatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.assistant.TextChatResponse";
  }
  protected:
  explicit TextChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // .sensory.api.v1.assistant.ChatMessage message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::sensory::api::v1::assistant::ChatMessage& message() const;
  PROTOBUF_MUST_USE_RESULT ::sensory::api::v1::assistant::ChatMessage* release_message();
  ::sensory::api::v1::assistant::ChatMessage* mutable_message();
  void set_allocated_message(::sensory::api::v1::assistant::ChatMessage* message);
  private:
  const ::sensory::api::v1::assistant::ChatMessage& _internal_message() const;
  ::sensory::api::v1::assistant::ChatMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::sensory::api::v1::assistant::ChatMessage* message);
  ::sensory::api::v1::assistant::ChatMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:sensory.api.v1.assistant.TextChatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensory::api::v1::assistant::ChatMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fassistant_2fassistant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessage

// .sensory.api.v1.assistant.ChatRole role = 1;
inline void ChatMessage::clear_role() {
  role_ = 0;
}
inline ::sensory::api::v1::assistant::ChatRole ChatMessage::_internal_role() const {
  return static_cast< ::sensory::api::v1::assistant::ChatRole >(role_);
}
inline ::sensory::api::v1::assistant::ChatRole ChatMessage::role() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.assistant.ChatMessage.role)
  return _internal_role();
}
inline void ChatMessage::_internal_set_role(::sensory::api::v1::assistant::ChatRole value) {
  
  role_ = value;
}
inline void ChatMessage::set_role(::sensory::api::v1::assistant::ChatRole value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:sensory.api.v1.assistant.ChatMessage.role)
}

// string content = 2;
inline void ChatMessage::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.assistant.ChatMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.assistant.ChatMessage.content)
}
inline std::string* ChatMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.assistant.ChatMessage.content)
  return _s;
}
inline const std::string& ChatMessage::_internal_content() const {
  return content_.Get();
}
inline void ChatMessage::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.assistant.ChatMessage.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.assistant.ChatMessage.content)
}

// -------------------------------------------------------------------

// TextChatRequest

// string modelName = 1;
inline void TextChatRequest::clear_modelname() {
  modelname_.ClearToEmpty();
}
inline const std::string& TextChatRequest::modelname() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.assistant.TextChatRequest.modelName)
  return _internal_modelname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextChatRequest::set_modelname(ArgT0&& arg0, ArgT... args) {
 
 modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.assistant.TextChatRequest.modelName)
}
inline std::string* TextChatRequest::mutable_modelname() {
  std::string* _s = _internal_mutable_modelname();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.assistant.TextChatRequest.modelName)
  return _s;
}
inline const std::string& TextChatRequest::_internal_modelname() const {
  return modelname_.Get();
}
inline void TextChatRequest::_internal_set_modelname(const std::string& value) {
  
  modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TextChatRequest::_internal_mutable_modelname() {
  
  return modelname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TextChatRequest::release_modelname() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.assistant.TextChatRequest.modelName)
  return modelname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TextChatRequest::set_allocated_modelname(std::string* modelname) {
  if (modelname != nullptr) {
    
  } else {
    
  }
  modelname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.assistant.TextChatRequest.modelName)
}

// repeated .sensory.api.v1.assistant.ChatMessage messages = 2;
inline int TextChatRequest::_internal_messages_size() const {
  return messages_.size();
}
inline int TextChatRequest::messages_size() const {
  return _internal_messages_size();
}
inline void TextChatRequest::clear_messages() {
  messages_.Clear();
}
inline ::sensory::api::v1::assistant::ChatMessage* TextChatRequest::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.assistant.TextChatRequest.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensory::api::v1::assistant::ChatMessage >*
TextChatRequest::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:sensory.api.v1.assistant.TextChatRequest.messages)
  return &messages_;
}
inline const ::sensory::api::v1::assistant::ChatMessage& TextChatRequest::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::sensory::api::v1::assistant::ChatMessage& TextChatRequest::messages(int index) const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.assistant.TextChatRequest.messages)
  return _internal_messages(index);
}
inline ::sensory::api::v1::assistant::ChatMessage* TextChatRequest::_internal_add_messages() {
  return messages_.Add();
}
inline ::sensory::api::v1::assistant::ChatMessage* TextChatRequest::add_messages() {
  ::sensory::api::v1::assistant::ChatMessage* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:sensory.api.v1.assistant.TextChatRequest.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensory::api::v1::assistant::ChatMessage >&
TextChatRequest::messages() const {
  // @@protoc_insertion_point(field_list:sensory.api.v1.assistant.TextChatRequest.messages)
  return messages_;
}

// -------------------------------------------------------------------

// TextChatResponse

// .sensory.api.v1.assistant.ChatMessage message = 1;
inline bool TextChatResponse::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool TextChatResponse::has_message() const {
  return _internal_has_message();
}
inline void TextChatResponse::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::sensory::api::v1::assistant::ChatMessage& TextChatResponse::_internal_message() const {
  const ::sensory::api::v1::assistant::ChatMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensory::api::v1::assistant::ChatMessage&>(
      ::sensory::api::v1::assistant::_ChatMessage_default_instance_);
}
inline const ::sensory::api::v1::assistant::ChatMessage& TextChatResponse::message() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.assistant.TextChatResponse.message)
  return _internal_message();
}
inline void TextChatResponse::unsafe_arena_set_allocated_message(
    ::sensory::api::v1::assistant::ChatMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensory.api.v1.assistant.TextChatResponse.message)
}
inline ::sensory::api::v1::assistant::ChatMessage* TextChatResponse::release_message() {
  
  ::sensory::api::v1::assistant::ChatMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sensory::api::v1::assistant::ChatMessage* TextChatResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.assistant.TextChatResponse.message)
  
  ::sensory::api::v1::assistant::ChatMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::sensory::api::v1::assistant::ChatMessage* TextChatResponse::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensory::api::v1::assistant::ChatMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::sensory::api::v1::assistant::ChatMessage* TextChatResponse::mutable_message() {
  ::sensory::api::v1::assistant::ChatMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.assistant.TextChatResponse.message)
  return _msg;
}
inline void TextChatResponse::set_allocated_message(::sensory::api::v1::assistant::ChatMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::assistant::ChatMessage>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.assistant.TextChatResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace assistant
}  // namespace v1
}  // namespace api
}  // namespace sensory

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sensory::api::v1::assistant::ChatRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensory::api::v1::assistant::ChatRole>() {
  return ::sensory::api::v1::assistant::ChatRole_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_v1_2fassistant_2fassistant_2eproto
