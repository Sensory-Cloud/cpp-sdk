// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/assistant/assistant.proto

#include "v1/assistant/assistant.pb.h"
#include "v1/assistant/assistant.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sensory {
namespace api {
namespace v1 {
namespace assistant {

static const char* AssistantService_method_names[] = {
  "/sensory.api.v1.assistant.AssistantService/ProcessMessage",
};

std::unique_ptr< AssistantService::Stub> AssistantService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AssistantService::Stub> stub(new AssistantService::Stub(channel, options));
  return stub;
}

AssistantService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProcessMessage_(AssistantService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::sensory::api::v1::assistant::AssistantMessageRequest, ::sensory::api::v1::assistant::AssistantMessageResponse>* AssistantService::Stub::ProcessMessageRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::sensory::api::v1::assistant::AssistantMessageRequest, ::sensory::api::v1::assistant::AssistantMessageResponse>::Create(channel_.get(), rpcmethod_ProcessMessage_, context);
}

void AssistantService::Stub::async::ProcessMessage(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::assistant::AssistantMessageRequest,::sensory::api::v1::assistant::AssistantMessageResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::sensory::api::v1::assistant::AssistantMessageRequest,::sensory::api::v1::assistant::AssistantMessageResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessMessage_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::assistant::AssistantMessageRequest, ::sensory::api::v1::assistant::AssistantMessageResponse>* AssistantService::Stub::AsyncProcessMessageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sensory::api::v1::assistant::AssistantMessageRequest, ::sensory::api::v1::assistant::AssistantMessageResponse>::Create(channel_.get(), cq, rpcmethod_ProcessMessage_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::assistant::AssistantMessageRequest, ::sensory::api::v1::assistant::AssistantMessageResponse>* AssistantService::Stub::PrepareAsyncProcessMessageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sensory::api::v1::assistant::AssistantMessageRequest, ::sensory::api::v1::assistant::AssistantMessageResponse>::Create(channel_.get(), cq, rpcmethod_ProcessMessage_, context, false, nullptr);
}

AssistantService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AssistantService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< AssistantService::Service, ::sensory::api::v1::assistant::AssistantMessageRequest, ::sensory::api::v1::assistant::AssistantMessageResponse>(
          [](AssistantService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::sensory::api::v1::assistant::AssistantMessageResponse,
             ::sensory::api::v1::assistant::AssistantMessageRequest>* stream) {
               return service->ProcessMessage(ctx, stream);
             }, this)));
}

AssistantService::Service::~Service() {
}

::grpc::Status AssistantService::Service::ProcessMessage(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sensory::api::v1::assistant::AssistantMessageResponse, ::sensory::api::v1::assistant::AssistantMessageRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sensory
}  // namespace api
}  // namespace v1
}  // namespace assistant

