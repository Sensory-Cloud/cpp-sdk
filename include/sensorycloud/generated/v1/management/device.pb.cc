// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/management/device.proto

#include "v1/management/device.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensory {
namespace api {
namespace v1 {
namespace management {
constexpr EnrollDeviceRequest::EnrollDeviceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tenantid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , credential_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_(nullptr){}
struct EnrollDeviceRequestDefaultTypeInternal {
  constexpr EnrollDeviceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnrollDeviceRequestDefaultTypeInternal() {}
  union {
    EnrollDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnrollDeviceRequestDefaultTypeInternal _EnrollDeviceRequest_default_instance_;
constexpr RenewDeviceCredentialRequest::RenewDeviceCredentialRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clientid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tenantid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , credential_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RenewDeviceCredentialRequestDefaultTypeInternal {
  constexpr RenewDeviceCredentialRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenewDeviceCredentialRequestDefaultTypeInternal() {}
  union {
    RenewDeviceCredentialRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenewDeviceCredentialRequestDefaultTypeInternal _RenewDeviceCredentialRequest_default_instance_;
constexpr DeviceGetWhoAmIRequest::DeviceGetWhoAmIRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeviceGetWhoAmIRequestDefaultTypeInternal {
  constexpr DeviceGetWhoAmIRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceGetWhoAmIRequestDefaultTypeInternal() {}
  union {
    DeviceGetWhoAmIRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceGetWhoAmIRequestDefaultTypeInternal _DeviceGetWhoAmIRequest_default_instance_;
constexpr DeviceRequest::DeviceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceRequestDefaultTypeInternal {
  constexpr DeviceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceRequestDefaultTypeInternal() {}
  union {
    DeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceRequestDefaultTypeInternal _DeviceRequest_default_instance_;
constexpr GetDevicesRequest::GetDevicesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tenantid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pagination_(nullptr){}
struct GetDevicesRequestDefaultTypeInternal {
  constexpr GetDevicesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDevicesRequestDefaultTypeInternal() {}
  union {
    GetDevicesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDevicesRequestDefaultTypeInternal _GetDevicesRequest_default_instance_;
constexpr UpdateDeviceRequest::UpdateDeviceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateDeviceRequestDefaultTypeInternal {
  constexpr UpdateDeviceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateDeviceRequestDefaultTypeInternal() {}
  union {
    UpdateDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateDeviceRequestDefaultTypeInternal _UpdateDeviceRequest_default_instance_;
constexpr DeviceResponse::DeviceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceResponseDefaultTypeInternal {
  constexpr DeviceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceResponseDefaultTypeInternal() {}
  union {
    DeviceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceResponseDefaultTypeInternal _DeviceResponse_default_instance_;
constexpr GetDeviceResponse::GetDeviceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , usercount_(int64_t{0}){}
struct GetDeviceResponseDefaultTypeInternal {
  constexpr GetDeviceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDeviceResponseDefaultTypeInternal() {}
  union {
    GetDeviceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDeviceResponseDefaultTypeInternal _GetDeviceResponse_default_instance_;
constexpr DeviceListResponse::DeviceListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devices_()
  , pagination_(nullptr){}
struct DeviceListResponseDefaultTypeInternal {
  constexpr DeviceListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceListResponseDefaultTypeInternal() {}
  union {
    DeviceListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceListResponseDefaultTypeInternal _DeviceListResponse_default_instance_;
}  // namespace management
}  // namespace v1
}  // namespace api
}  // namespace sensory
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_v1_2fmanagement_2fdevice_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_v1_2fmanagement_2fdevice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_v1_2fmanagement_2fdevice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_v1_2fmanagement_2fdevice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollDeviceRequest, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollDeviceRequest, deviceid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollDeviceRequest, tenantid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollDeviceRequest, client_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollDeviceRequest, credential_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::RenewDeviceCredentialRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::RenewDeviceCredentialRequest, deviceid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::RenewDeviceCredentialRequest, clientid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::RenewDeviceCredentialRequest, tenantid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::RenewDeviceCredentialRequest, credential_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeviceGetWhoAmIRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeviceRequest, deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetDevicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetDevicesRequest, tenantid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetDevicesRequest, pagination_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetDevicesRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::UpdateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::UpdateDeviceRequest, deviceid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::UpdateDeviceRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeviceResponse, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeviceResponse, deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetDeviceResponse, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetDeviceResponse, deviceid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetDeviceResponse, usercount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeviceListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeviceListResponse, devices_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeviceListResponse, pagination_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sensory::api::v1::management::EnrollDeviceRequest)},
  { 11, -1, -1, sizeof(::sensory::api::v1::management::RenewDeviceCredentialRequest)},
  { 21, -1, -1, sizeof(::sensory::api::v1::management::DeviceGetWhoAmIRequest)},
  { 27, -1, -1, sizeof(::sensory::api::v1::management::DeviceRequest)},
  { 34, -1, -1, sizeof(::sensory::api::v1::management::GetDevicesRequest)},
  { 43, -1, -1, sizeof(::sensory::api::v1::management::UpdateDeviceRequest)},
  { 51, -1, -1, sizeof(::sensory::api::v1::management::DeviceResponse)},
  { 59, -1, -1, sizeof(::sensory::api::v1::management::GetDeviceResponse)},
  { 68, -1, -1, sizeof(::sensory::api::v1::management::DeviceListResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_EnrollDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_RenewDeviceCredentialRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_DeviceGetWhoAmIRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_DeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_GetDevicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_UpdateDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_DeviceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_GetDeviceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_DeviceListResponse_default_instance_),
};

const char descriptor_table_protodef_v1_2fmanagement_2fdevice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032v1/management/device.proto\022\031sensory.ap"
  "i.v1.management\032\023common/common.proto\032\027va"
  "lidate/validate.proto\"\270\001\n\023EnrollDeviceRe"
  "quest\022\027\n\004name\030\001 \001(\tB\t\372B\006r\004\020\001\030\177\022\033\n\010device"
  "Id\030\002 \001(\tB\t\372B\006r\004\020\001\030\177\022\032\n\010tenantId\030\003 \001(\tB\010\372"
  "B\005r\003\260\001\001\022;\n\006client\030\004 \001(\0132!.sensory.api.co"
  "mmon.GenericClientB\010\372B\005\212\001\002\020\001\022\022\n\ncredenti"
  "al\030\005 \001(\t\"\223\001\n\034RenewDeviceCredentialReques"
  "t\022\033\n\010deviceId\030\001 \001(\tB\t\372B\006r\004\020\001\030\177\022\032\n\010client"
  "Id\030\002 \001(\tB\010\372B\005r\003\260\001\001\022\032\n\010tenantId\030\003 \001(\tB\010\372B"
  "\005r\003\260\001\001\022\036\n\ncredential\030\004 \001(\tB\n\372B\007r\005\020\001\030\377\001\"\030"
  "\n\026DeviceGetWhoAmIRequest\",\n\rDeviceReques"
  "t\022\033\n\010deviceId\030\001 \001(\tB\t\372B\006r\004\020\001\030\177\"y\n\021GetDev"
  "icesRequest\022\020\n\010tenantId\030\001 \001(\t\0229\n\npaginat"
  "ion\030\002 \001(\0132%.sensory.api.common.Paginatio"
  "nOptions\022\027\n\006userId\030\003 \001(\tB\007\372B\004r\002\030\177\"K\n\023Upd"
  "ateDeviceRequest\022\033\n\010deviceId\030\001 \001(\tB\t\372B\006r"
  "\004\020\001\030\177\022\027\n\004name\030\002 \001(\tB\t\372B\006r\004\020\001\030\177\"0\n\016Device"
  "Response\022\014\n\004name\030\001 \001(\t\022\020\n\010deviceId\030\002 \001(\t"
  "\"F\n\021GetDeviceResponse\022\014\n\004name\030\001 \001(\t\022\020\n\010d"
  "eviceId\030\002 \001(\t\022\021\n\tuserCount\030\003 \001(\003\"\214\001\n\022Dev"
  "iceListResponse\022:\n\007devices\030\001 \003(\0132).senso"
  "ry.api.v1.management.DeviceResponse\022:\n\np"
  "agination\030\002 \001(\0132&.sensory.api.common.Pag"
  "inationResponse2\220\006\n\rDeviceService\022k\n\014Enr"
  "ollDevice\022..sensory.api.v1.management.En"
  "rollDeviceRequest\032).sensory.api.v1.manag"
  "ement.DeviceResponse\"\000\022}\n\025RenewDeviceCre"
  "dential\0227.sensory.api.v1.management.Rene"
  "wDeviceCredentialRequest\032).sensory.api.v"
  "1.management.DeviceResponse\"\000\022k\n\tGetWhoA"
  "mI\0221.sensory.api.v1.management.DeviceGet"
  "WhoAmIRequest\032).sensory.api.v1.managemen"
  "t.DeviceResponse\"\000\022e\n\tGetDevice\022(.sensor"
  "y.api.v1.management.DeviceRequest\032,.sens"
  "ory.api.v1.management.GetDeviceResponse\""
  "\000\022k\n\nGetDevices\022,.sensory.api.v1.managem"
  "ent.GetDevicesRequest\032-.sensory.api.v1.m"
  "anagement.DeviceListResponse\"\000\022k\n\014Update"
  "Device\022..sensory.api.v1.management.Updat"
  "eDeviceRequest\032).sensory.api.v1.manageme"
  "nt.DeviceResponse\"\000\022e\n\014DeleteDevice\022(.se"
  "nsory.api.v1.management.DeviceRequest\032)."
  "sensory.api.v1.management.DeviceResponse"
  "\"\000B\220\001\n!ai.sensorycloud.api.v1.management"
  "B!SensoryApiV1ManagementDeviceProtoP\001Z\?g"
  "itlab.com/sensory-cloud/server/titan.git"
  "/pkg/api/v1/management\242\002\004SENGb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_v1_2fmanagement_2fdevice_2eproto_deps[2] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_v1_2fmanagement_2fdevice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fmanagement_2fdevice_2eproto = {
  false, false, 1917, descriptor_table_protodef_v1_2fmanagement_2fdevice_2eproto, "v1/management/device.proto", 
  &descriptor_table_v1_2fmanagement_2fdevice_2eproto_once, descriptor_table_v1_2fmanagement_2fdevice_2eproto_deps, 2, 9,
  schemas, file_default_instances, TableStruct_v1_2fmanagement_2fdevice_2eproto::offsets,
  file_level_metadata_v1_2fmanagement_2fdevice_2eproto, file_level_enum_descriptors_v1_2fmanagement_2fdevice_2eproto, file_level_service_descriptors_v1_2fmanagement_2fdevice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_v1_2fmanagement_2fdevice_2eproto_getter() {
  return &descriptor_table_v1_2fmanagement_2fdevice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_v1_2fmanagement_2fdevice_2eproto(&descriptor_table_v1_2fmanagement_2fdevice_2eproto);
namespace sensory {
namespace api {
namespace v1 {
namespace management {

// ===================================================================

class EnrollDeviceRequest::_Internal {
 public:
  static const ::sensory::api::common::GenericClient& client(const EnrollDeviceRequest* msg);
};

const ::sensory::api::common::GenericClient&
EnrollDeviceRequest::_Internal::client(const EnrollDeviceRequest* msg) {
  return *msg->client_;
}
void EnrollDeviceRequest::clear_client() {
  if (GetArenaForAllocation() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
EnrollDeviceRequest::EnrollDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.EnrollDeviceRequest)
}
EnrollDeviceRequest::EnrollDeviceRequest(const EnrollDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  tenantid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tenantid().empty()) {
    tenantid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tenantid(), 
      GetArenaForAllocation());
  }
  credential_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_credential().empty()) {
    credential_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_credential(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_client()) {
    client_ = new ::sensory::api::common::GenericClient(*from.client_);
  } else {
    client_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.EnrollDeviceRequest)
}

void EnrollDeviceRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tenantid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
credential_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
client_ = nullptr;
}

EnrollDeviceRequest::~EnrollDeviceRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.EnrollDeviceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnrollDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tenantid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  credential_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_;
}

void EnrollDeviceRequest::ArenaDtor(void* object) {
  EnrollDeviceRequest* _this = reinterpret_cast< EnrollDeviceRequest* >(object);
  (void)_this;
}
void EnrollDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnrollDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnrollDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.EnrollDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  tenantid_.ClearToEmpty();
  credential_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnrollDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollDeviceRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceId = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollDeviceRequest.deviceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tenantId = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tenantid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollDeviceRequest.tenantId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.common.GenericClient client = 4 [(.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string credential = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_credential();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollDeviceRequest.credential"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.EnrollDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.validate.rules) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollDeviceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string deviceId = 2 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollDeviceRequest.deviceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // string tenantId = 3 [(.validate.rules) = {
  if (!this->_internal_tenantid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenantid().data(), static_cast<int>(this->_internal_tenantid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollDeviceRequest.tenantId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tenantid(), target);
  }

  // .sensory.api.common.GenericClient client = 4 [(.validate.rules) = {
  if (this->_internal_has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client(this), target, stream);
  }

  // string credential = 5;
  if (!this->_internal_credential().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_credential().data(), static_cast<int>(this->_internal_credential().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollDeviceRequest.credential");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_credential(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.EnrollDeviceRequest)
  return target;
}

size_t EnrollDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.EnrollDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.validate.rules) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string deviceId = 2 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string tenantId = 3 [(.validate.rules) = {
  if (!this->_internal_tenantid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenantid());
  }

  // string credential = 5;
  if (!this->_internal_credential().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_credential());
  }

  // .sensory.api.common.GenericClient client = 4 [(.validate.rules) = {
  if (this->_internal_has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnrollDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnrollDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnrollDeviceRequest::GetClassData() const { return &_class_data_; }

void EnrollDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnrollDeviceRequest *>(to)->MergeFrom(
      static_cast<const EnrollDeviceRequest &>(from));
}


void EnrollDeviceRequest::MergeFrom(const EnrollDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.EnrollDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_tenantid().empty()) {
    _internal_set_tenantid(from._internal_tenantid());
  }
  if (!from._internal_credential().empty()) {
    _internal_set_credential(from._internal_credential());
  }
  if (from._internal_has_client()) {
    _internal_mutable_client()->::sensory::api::common::GenericClient::MergeFrom(from._internal_client());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnrollDeviceRequest::CopyFrom(const EnrollDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.EnrollDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollDeviceRequest::IsInitialized() const {
  return true;
}

void EnrollDeviceRequest::InternalSwap(EnrollDeviceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tenantid_, lhs_arena,
      &other->tenantid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &credential_, lhs_arena,
      &other->credential_, rhs_arena
  );
  swap(client_, other->client_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollDeviceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fdevice_2eproto_getter, &descriptor_table_v1_2fmanagement_2fdevice_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fdevice_2eproto[0]);
}

// ===================================================================

class RenewDeviceCredentialRequest::_Internal {
 public:
};

RenewDeviceCredentialRequest::RenewDeviceCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.RenewDeviceCredentialRequest)
}
RenewDeviceCredentialRequest::RenewDeviceCredentialRequest(const RenewDeviceCredentialRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArenaForAllocation());
  }
  tenantid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tenantid().empty()) {
    tenantid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tenantid(), 
      GetArenaForAllocation());
  }
  credential_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_credential().empty()) {
    credential_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_credential(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.RenewDeviceCredentialRequest)
}

void RenewDeviceCredentialRequest::SharedCtor() {
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tenantid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
credential_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RenewDeviceCredentialRequest::~RenewDeviceCredentialRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.RenewDeviceCredentialRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RenewDeviceCredentialRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tenantid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  credential_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RenewDeviceCredentialRequest::ArenaDtor(void* object) {
  RenewDeviceCredentialRequest* _this = reinterpret_cast< RenewDeviceCredentialRequest* >(object);
  (void)_this;
}
void RenewDeviceCredentialRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenewDeviceCredentialRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenewDeviceCredentialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.RenewDeviceCredentialRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmpty();
  clientid_.ClearToEmpty();
  tenantid_.ClearToEmpty();
  credential_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenewDeviceCredentialRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deviceId = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.RenewDeviceCredentialRequest.deviceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientId = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.RenewDeviceCredentialRequest.clientId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tenantId = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tenantid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.RenewDeviceCredentialRequest.tenantId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string credential = 4 [(.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_credential();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.RenewDeviceCredentialRequest.credential"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenewDeviceCredentialRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.RenewDeviceCredentialRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceId = 1 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.RenewDeviceCredentialRequest.deviceId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // string clientId = 2 [(.validate.rules) = {
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.RenewDeviceCredentialRequest.clientId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientid(), target);
  }

  // string tenantId = 3 [(.validate.rules) = {
  if (!this->_internal_tenantid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenantid().data(), static_cast<int>(this->_internal_tenantid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.RenewDeviceCredentialRequest.tenantId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tenantid(), target);
  }

  // string credential = 4 [(.validate.rules) = {
  if (!this->_internal_credential().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_credential().data(), static_cast<int>(this->_internal_credential().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.RenewDeviceCredentialRequest.credential");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_credential(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.RenewDeviceCredentialRequest)
  return target;
}

size_t RenewDeviceCredentialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.RenewDeviceCredentialRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceId = 1 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string clientId = 2 [(.validate.rules) = {
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string tenantId = 3 [(.validate.rules) = {
  if (!this->_internal_tenantid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenantid());
  }

  // string credential = 4 [(.validate.rules) = {
  if (!this->_internal_credential().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_credential());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenewDeviceCredentialRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RenewDeviceCredentialRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenewDeviceCredentialRequest::GetClassData() const { return &_class_data_; }

void RenewDeviceCredentialRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RenewDeviceCredentialRequest *>(to)->MergeFrom(
      static_cast<const RenewDeviceCredentialRequest &>(from));
}


void RenewDeviceCredentialRequest::MergeFrom(const RenewDeviceCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.RenewDeviceCredentialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_clientid().empty()) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_tenantid().empty()) {
    _internal_set_tenantid(from._internal_tenantid());
  }
  if (!from._internal_credential().empty()) {
    _internal_set_credential(from._internal_credential());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenewDeviceCredentialRequest::CopyFrom(const RenewDeviceCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.RenewDeviceCredentialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewDeviceCredentialRequest::IsInitialized() const {
  return true;
}

void RenewDeviceCredentialRequest::InternalSwap(RenewDeviceCredentialRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clientid_, lhs_arena,
      &other->clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tenantid_, lhs_arena,
      &other->tenantid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &credential_, lhs_arena,
      &other->credential_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RenewDeviceCredentialRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fdevice_2eproto_getter, &descriptor_table_v1_2fmanagement_2fdevice_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fdevice_2eproto[1]);
}

// ===================================================================

class DeviceGetWhoAmIRequest::_Internal {
 public:
};

DeviceGetWhoAmIRequest::DeviceGetWhoAmIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.DeviceGetWhoAmIRequest)
}
DeviceGetWhoAmIRequest::DeviceGetWhoAmIRequest(const DeviceGetWhoAmIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.DeviceGetWhoAmIRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceGetWhoAmIRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceGetWhoAmIRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeviceGetWhoAmIRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fdevice_2eproto_getter, &descriptor_table_v1_2fmanagement_2fdevice_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fdevice_2eproto[2]);
}

// ===================================================================

class DeviceRequest::_Internal {
 public:
};

DeviceRequest::DeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.DeviceRequest)
}
DeviceRequest::DeviceRequest(const DeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.DeviceRequest)
}

void DeviceRequest::SharedCtor() {
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceRequest::~DeviceRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.DeviceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceRequest::ArenaDtor(void* object) {
  DeviceRequest* _this = reinterpret_cast< DeviceRequest* >(object);
  (void)_this;
}
void DeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.DeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deviceId = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.DeviceRequest.deviceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.DeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceId = 1 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.DeviceRequest.deviceId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.DeviceRequest)
  return target;
}

size_t DeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.DeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceId = 1 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceRequest::GetClassData() const { return &_class_data_; }

void DeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceRequest *>(to)->MergeFrom(
      static_cast<const DeviceRequest &>(from));
}


void DeviceRequest::MergeFrom(const DeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.DeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceRequest::CopyFrom(const DeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.DeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRequest::IsInitialized() const {
  return true;
}

void DeviceRequest::InternalSwap(DeviceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fdevice_2eproto_getter, &descriptor_table_v1_2fmanagement_2fdevice_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fdevice_2eproto[3]);
}

// ===================================================================

class GetDevicesRequest::_Internal {
 public:
  static const ::sensory::api::common::PaginationOptions& pagination(const GetDevicesRequest* msg);
};

const ::sensory::api::common::PaginationOptions&
GetDevicesRequest::_Internal::pagination(const GetDevicesRequest* msg) {
  return *msg->pagination_;
}
void GetDevicesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
GetDevicesRequest::GetDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.GetDevicesRequest)
}
GetDevicesRequest::GetDevicesRequest(const GetDevicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tenantid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tenantid().empty()) {
    tenantid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tenantid(), 
      GetArenaForAllocation());
  }
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::sensory::api::common::PaginationOptions(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.GetDevicesRequest)
}

void GetDevicesRequest::SharedCtor() {
tenantid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pagination_ = nullptr;
}

GetDevicesRequest::~GetDevicesRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.GetDevicesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDevicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tenantid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void GetDevicesRequest::ArenaDtor(void* object) {
  GetDevicesRequest* _this = reinterpret_cast< GetDevicesRequest* >(object);
  (void)_this;
}
void GetDevicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDevicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDevicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.GetDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tenantid_.ClearToEmpty();
  userid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDevicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tenantId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tenantid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.GetDevicesRequest.tenantId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.common.PaginationOptions pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string userId = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.GetDevicesRequest.userId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDevicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.GetDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tenantId = 1;
  if (!this->_internal_tenantid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenantid().data(), static_cast<int>(this->_internal_tenantid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.GetDevicesRequest.tenantId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tenantid(), target);
  }

  // .sensory.api.common.PaginationOptions pagination = 2;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination(this), target, stream);
  }

  // string userId = 3 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.GetDevicesRequest.userId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.GetDevicesRequest)
  return target;
}

size_t GetDevicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.GetDevicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tenantId = 1;
  if (!this->_internal_tenantid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenantid());
  }

  // string userId = 3 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // .sensory.api.common.PaginationOptions pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDevicesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDevicesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDevicesRequest::GetClassData() const { return &_class_data_; }

void GetDevicesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDevicesRequest *>(to)->MergeFrom(
      static_cast<const GetDevicesRequest &>(from));
}


void GetDevicesRequest::MergeFrom(const GetDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.GetDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tenantid().empty()) {
    _internal_set_tenantid(from._internal_tenantid());
  }
  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::sensory::api::common::PaginationOptions::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDevicesRequest::CopyFrom(const GetDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.GetDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDevicesRequest::IsInitialized() const {
  return true;
}

void GetDevicesRequest::InternalSwap(GetDevicesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tenantid_, lhs_arena,
      &other->tenantid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, lhs_arena,
      &other->userid_, rhs_arena
  );
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDevicesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fdevice_2eproto_getter, &descriptor_table_v1_2fmanagement_2fdevice_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fdevice_2eproto[4]);
}

// ===================================================================

class UpdateDeviceRequest::_Internal {
 public:
};

UpdateDeviceRequest::UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.UpdateDeviceRequest)
}
UpdateDeviceRequest::UpdateDeviceRequest(const UpdateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.UpdateDeviceRequest)
}

void UpdateDeviceRequest::SharedCtor() {
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateDeviceRequest::~UpdateDeviceRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.UpdateDeviceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateDeviceRequest::ArenaDtor(void* object) {
  UpdateDeviceRequest* _this = reinterpret_cast< UpdateDeviceRequest* >(object);
  (void)_this;
}
void UpdateDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.UpdateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deviceId = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.UpdateDeviceRequest.deviceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.UpdateDeviceRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.UpdateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceId = 1 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.UpdateDeviceRequest.deviceId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // string name = 2 [(.validate.rules) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.UpdateDeviceRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.UpdateDeviceRequest)
  return target;
}

size_t UpdateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.UpdateDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceId = 1 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string name = 2 [(.validate.rules) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateDeviceRequest::GetClassData() const { return &_class_data_; }

void UpdateDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateDeviceRequest *>(to)->MergeFrom(
      static_cast<const UpdateDeviceRequest &>(from));
}


void UpdateDeviceRequest::MergeFrom(const UpdateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.UpdateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateDeviceRequest::CopyFrom(const UpdateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.UpdateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceRequest::IsInitialized() const {
  return true;
}

void UpdateDeviceRequest::InternalSwap(UpdateDeviceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDeviceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fdevice_2eproto_getter, &descriptor_table_v1_2fmanagement_2fdevice_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fdevice_2eproto[5]);
}

// ===================================================================

class DeviceResponse::_Internal {
 public:
};

DeviceResponse::DeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.DeviceResponse)
}
DeviceResponse::DeviceResponse(const DeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.DeviceResponse)
}

void DeviceResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceResponse::~DeviceResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.DeviceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceResponse::ArenaDtor(void* object) {
  DeviceResponse* _this = reinterpret_cast< DeviceResponse* >(object);
  (void)_this;
}
void DeviceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.DeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.DeviceResponse.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.DeviceResponse.deviceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.DeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.DeviceResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string deviceId = 2;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.DeviceResponse.deviceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.DeviceResponse)
  return target;
}

size_t DeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.DeviceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string deviceId = 2;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceResponse::GetClassData() const { return &_class_data_; }

void DeviceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceResponse *>(to)->MergeFrom(
      static_cast<const DeviceResponse &>(from));
}


void DeviceResponse::MergeFrom(const DeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.DeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceResponse::CopyFrom(const DeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.DeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceResponse::IsInitialized() const {
  return true;
}

void DeviceResponse::InternalSwap(DeviceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fdevice_2eproto_getter, &descriptor_table_v1_2fmanagement_2fdevice_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fdevice_2eproto[6]);
}

// ===================================================================

class GetDeviceResponse::_Internal {
 public:
};

GetDeviceResponse::GetDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.GetDeviceResponse)
}
GetDeviceResponse::GetDeviceResponse(const GetDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  usercount_ = from.usercount_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.GetDeviceResponse)
}

void GetDeviceResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
usercount_ = int64_t{0};
}

GetDeviceResponse::~GetDeviceResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.GetDeviceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDeviceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDeviceResponse::ArenaDtor(void* object) {
  GetDeviceResponse* _this = reinterpret_cast< GetDeviceResponse* >(object);
  (void)_this;
}
void GetDeviceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.GetDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  usercount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.GetDeviceResponse.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.GetDeviceResponse.deviceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 userCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          usercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.GetDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.GetDeviceResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string deviceId = 2;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.GetDeviceResponse.deviceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // int64 userCount = 3;
  if (this->_internal_usercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_usercount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.GetDeviceResponse)
  return target;
}

size_t GetDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.GetDeviceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string deviceId = 2;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // int64 userCount = 3;
  if (this->_internal_usercount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_usercount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDeviceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceResponse::GetClassData() const { return &_class_data_; }

void GetDeviceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDeviceResponse *>(to)->MergeFrom(
      static_cast<const GetDeviceResponse &>(from));
}


void GetDeviceResponse::MergeFrom(const GetDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.GetDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (from._internal_usercount() != 0) {
    _internal_set_usercount(from._internal_usercount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceResponse::CopyFrom(const GetDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.GetDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceResponse::IsInitialized() const {
  return true;
}

void GetDeviceResponse::InternalSwap(GetDeviceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
  swap(usercount_, other->usercount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fdevice_2eproto_getter, &descriptor_table_v1_2fmanagement_2fdevice_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fdevice_2eproto[7]);
}

// ===================================================================

class DeviceListResponse::_Internal {
 public:
  static const ::sensory::api::common::PaginationResponse& pagination(const DeviceListResponse* msg);
};

const ::sensory::api::common::PaginationResponse&
DeviceListResponse::_Internal::pagination(const DeviceListResponse* msg) {
  return *msg->pagination_;
}
void DeviceListResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
DeviceListResponse::DeviceListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  devices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.DeviceListResponse)
}
DeviceListResponse::DeviceListResponse(const DeviceListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    pagination_ = new ::sensory::api::common::PaginationResponse(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.DeviceListResponse)
}

void DeviceListResponse::SharedCtor() {
pagination_ = nullptr;
}

DeviceListResponse::~DeviceListResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.DeviceListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pagination_;
}

void DeviceListResponse::ArenaDtor(void* object) {
  DeviceListResponse* _this = reinterpret_cast< DeviceListResponse* >(object);
  (void)_this;
}
void DeviceListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.DeviceListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensory.api.v1.management.DeviceResponse devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.common.PaginationResponse pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.DeviceListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensory.api.v1.management.DeviceResponse devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  // .sensory.api.common.PaginationResponse pagination = 2;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.DeviceListResponse)
  return target;
}

size_t DeviceListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.DeviceListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensory.api.v1.management.DeviceResponse devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sensory.api.common.PaginationResponse pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceListResponse::GetClassData() const { return &_class_data_; }

void DeviceListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceListResponse *>(to)->MergeFrom(
      static_cast<const DeviceListResponse &>(from));
}


void DeviceListResponse::MergeFrom(const DeviceListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.DeviceListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::sensory::api::common::PaginationResponse::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceListResponse::CopyFrom(const DeviceListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.DeviceListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceListResponse::IsInitialized() const {
  return true;
}

void DeviceListResponse::InternalSwap(DeviceListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fdevice_2eproto_getter, &descriptor_table_v1_2fmanagement_2fdevice_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fdevice_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace management
}  // namespace v1
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::EnrollDeviceRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::management::EnrollDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::EnrollDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::RenewDeviceCredentialRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::management::RenewDeviceCredentialRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::RenewDeviceCredentialRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::DeviceGetWhoAmIRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::management::DeviceGetWhoAmIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::DeviceGetWhoAmIRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::DeviceRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::management::DeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::DeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::GetDevicesRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::management::GetDevicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::GetDevicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::UpdateDeviceRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::management::UpdateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::UpdateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::DeviceResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::management::DeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::DeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::GetDeviceResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::management::GetDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::GetDeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::DeviceListResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::management::DeviceListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::DeviceListResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
