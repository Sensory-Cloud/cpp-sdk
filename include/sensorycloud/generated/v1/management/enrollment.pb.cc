// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/management/enrollment.proto

#include "v1/management/enrollment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensory {
namespace api {
namespace v1 {
namespace management {
constexpr GetEnrollmentsRequest::GetEnrollmentsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetEnrollmentsRequestDefaultTypeInternal {
  constexpr GetEnrollmentsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEnrollmentsRequestDefaultTypeInternal() {}
  union {
    GetEnrollmentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEnrollmentsRequestDefaultTypeInternal _GetEnrollmentsRequest_default_instance_;
constexpr GetEnrollmentsResponse::GetEnrollmentsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enrollments_()
  , isrequestortrusted_(false){}
struct GetEnrollmentsResponseDefaultTypeInternal {
  constexpr GetEnrollmentsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEnrollmentsResponseDefaultTypeInternal() {}
  union {
    GetEnrollmentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEnrollmentsResponseDefaultTypeInternal _GetEnrollmentsResponse_default_instance_;
constexpr EnrollmentResponse::EnrollmentResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , devicename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , createdat_(nullptr)
  , updatedat_(nullptr)
  , compression_(nullptr)
  , modeltype_(0)

  , didenrollwithliveness_(false){}
struct EnrollmentResponseDefaultTypeInternal {
  constexpr EnrollmentResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnrollmentResponseDefaultTypeInternal() {}
  union {
    EnrollmentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnrollmentResponseDefaultTypeInternal _EnrollmentResponse_default_instance_;
constexpr GetEnrollmentGroupsResponse::GetEnrollmentGroupsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enrollmentgroups_(){}
struct GetEnrollmentGroupsResponseDefaultTypeInternal {
  constexpr GetEnrollmentGroupsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEnrollmentGroupsResponseDefaultTypeInternal() {}
  union {
    GetEnrollmentGroupsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEnrollmentGroupsResponseDefaultTypeInternal _GetEnrollmentGroupsResponse_default_instance_;
constexpr EnrollmentGroupResponse::EnrollmentGroupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enrollments_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , createdat_(nullptr)
  , updatedat_(nullptr)
  , modeltype_(0)
{}
struct EnrollmentGroupResponseDefaultTypeInternal {
  constexpr EnrollmentGroupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnrollmentGroupResponseDefaultTypeInternal() {}
  union {
    EnrollmentGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnrollmentGroupResponseDefaultTypeInternal _EnrollmentGroupResponse_default_instance_;
constexpr CreateEnrollmentGroupRequest::CreateEnrollmentGroupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enrollmentids_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateEnrollmentGroupRequestDefaultTypeInternal {
  constexpr CreateEnrollmentGroupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateEnrollmentGroupRequestDefaultTypeInternal() {}
  union {
    CreateEnrollmentGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateEnrollmentGroupRequestDefaultTypeInternal _CreateEnrollmentGroupRequest_default_instance_;
constexpr AppendEnrollmentGroupRequest::AppendEnrollmentGroupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enrollmentids_()
  , groupid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AppendEnrollmentGroupRequestDefaultTypeInternal {
  constexpr AppendEnrollmentGroupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendEnrollmentGroupRequestDefaultTypeInternal() {}
  union {
    AppendEnrollmentGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendEnrollmentGroupRequestDefaultTypeInternal _AppendEnrollmentGroupRequest_default_instance_;
constexpr DeleteEnrollmentRequest::DeleteEnrollmentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteEnrollmentRequestDefaultTypeInternal {
  constexpr DeleteEnrollmentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteEnrollmentRequestDefaultTypeInternal() {}
  union {
    DeleteEnrollmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteEnrollmentRequestDefaultTypeInternal _DeleteEnrollmentRequest_default_instance_;
constexpr DeleteEnrollmentGroupRequest::DeleteEnrollmentGroupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteEnrollmentGroupRequestDefaultTypeInternal {
  constexpr DeleteEnrollmentGroupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteEnrollmentGroupRequestDefaultTypeInternal() {}
  union {
    DeleteEnrollmentGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteEnrollmentGroupRequestDefaultTypeInternal _DeleteEnrollmentGroupRequest_default_instance_;
}  // namespace management
}  // namespace v1
}  // namespace api
}  // namespace sensory
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_v1_2fmanagement_2fenrollment_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_v1_2fmanagement_2fenrollment_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_v1_2fmanagement_2fenrollment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_v1_2fmanagement_2fenrollment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetEnrollmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetEnrollmentsRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetEnrollmentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetEnrollmentsResponse, enrollments_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetEnrollmentsResponse, isrequestortrusted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, id_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, createdat_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, updatedat_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, description_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, modeltype_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, modelversion_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, deviceid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, userid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, compression_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, devicename_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentResponse, didenrollwithliveness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetEnrollmentGroupsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::GetEnrollmentGroupsResponse, enrollmentgroups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentGroupResponse, id_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentGroupResponse, createdat_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentGroupResponse, updatedat_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentGroupResponse, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentGroupResponse, description_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentGroupResponse, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentGroupResponse, modeltype_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentGroupResponse, modelversion_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentGroupResponse, userid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::EnrollmentGroupResponse, enrollments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::CreateEnrollmentGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::CreateEnrollmentGroupRequest, id_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::CreateEnrollmentGroupRequest, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::CreateEnrollmentGroupRequest, description_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::CreateEnrollmentGroupRequest, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::CreateEnrollmentGroupRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::CreateEnrollmentGroupRequest, enrollmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::AppendEnrollmentGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::AppendEnrollmentGroupRequest, groupid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::AppendEnrollmentGroupRequest, enrollmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeleteEnrollmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeleteEnrollmentRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeleteEnrollmentGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::management::DeleteEnrollmentGroupRequest, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensory::api::v1::management::GetEnrollmentsRequest)},
  { 6, -1, sizeof(::sensory::api::v1::management::GetEnrollmentsResponse)},
  { 13, -1, sizeof(::sensory::api::v1::management::EnrollmentResponse)},
  { 30, -1, sizeof(::sensory::api::v1::management::GetEnrollmentGroupsResponse)},
  { 36, -1, sizeof(::sensory::api::v1::management::EnrollmentGroupResponse)},
  { 51, -1, sizeof(::sensory::api::v1::management::CreateEnrollmentGroupRequest)},
  { 62, -1, sizeof(::sensory::api::v1::management::AppendEnrollmentGroupRequest)},
  { 69, -1, sizeof(::sensory::api::v1::management::DeleteEnrollmentRequest)},
  { 75, -1, sizeof(::sensory::api::v1::management::DeleteEnrollmentGroupRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_GetEnrollmentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_GetEnrollmentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_EnrollmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_GetEnrollmentGroupsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_EnrollmentGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_CreateEnrollmentGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_AppendEnrollmentGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_DeleteEnrollmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::management::_DeleteEnrollmentGroupRequest_default_instance_),
};

const char descriptor_table_protodef_v1_2fmanagement_2fenrollment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036v1/management/enrollment.proto\022\031sensor"
  "y.api.v1.management\032\037google/protobuf/tim"
  "estamp.proto\032\027validate/validate.proto\032\023c"
  "ommon/common.proto\"2\n\025GetEnrollmentsRequ"
  "est\022\031\n\006userId\030\001 \001(\tB\t\372B\006r\004\020\001\030\177\"x\n\026GetEnr"
  "ollmentsResponse\022B\n\013enrollments\030\001 \003(\0132-."
  "sensory.api.v1.management.EnrollmentResp"
  "onse\022\032\n\022isRequestorTrusted\030\002 \001(\010\"\206\003\n\022Enr"
  "ollmentResponse\022\n\n\002id\030\001 \001(\t\022-\n\tcreatedAt"
  "\030\002 \001(\0132\032.google.protobuf.Timestamp\022-\n\tup"
  "datedAt\030\003 \001(\0132\032.google.protobuf.Timestam"
  "p\022\023\n\013description\030\004 \001(\t\022\021\n\tmodelName\030\005 \001("
  "\t\0220\n\tmodelType\030\006 \001(\0162\035.sensory.api.commo"
  "n.ModelType\022\024\n\014modelVersion\030\007 \001(\t\022\020\n\010dev"
  "iceId\030\010 \001(\t\022\016\n\006userId\030\t \001(\t\022A\n\013compressi"
  "on\030\n \001(\0132,.sensory.api.common.Compressio"
  "nConfiguration\022\022\n\ndeviceName\030\013 \001(\t\022\035\n\025di"
  "dEnrollWithLiveness\030\014 \001(\010\"k\n\033GetEnrollme"
  "ntGroupsResponse\022L\n\020enrollmentGroups\030\001 \003"
  "(\01322.sensory.api.v1.management.Enrollmen"
  "tGroupResponse\"\325\002\n\027EnrollmentGroupRespon"
  "se\022\n\n\002id\030\001 \001(\t\022-\n\tcreatedAt\030\002 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022-\n\tupdatedAt\030\003 \001(\013"
  "2\032.google.protobuf.Timestamp\022\014\n\004name\030\004 \001"
  "(\t\022\023\n\013description\030\005 \001(\t\022\021\n\tmodelName\030\006 \001"
  "(\t\0220\n\tmodelType\030\007 \001(\0162\035.sensory.api.comm"
  "on.ModelType\022\024\n\014modelVersion\030\010 \001(\t\022\016\n\006us"
  "erId\030\t \001(\t\022B\n\013enrollments\030\n \003(\0132-.sensor"
  "y.api.v1.management.EnrollmentResponse\"\277"
  "\001\n\034CreateEnrollmentGroupRequest\022\025\n\002id\030\001 "
  "\001(\tB\t\372B\006r\004\020\001\030\177\022\030\n\004name\030\002 \001(\tB\n\372B\007r\005\020\001\030\377\001"
  "\022\035\n\013description\030\003 \001(\tB\010\372B\005r\003\030\377\007\022\035\n\tmodel"
  "Name\030\004 \001(\tB\n\372B\007r\005\020\001\030\377\001\022\031\n\006userId\030\005 \001(\tB\t"
  "\372B\006r\004\020\001\030\177\022\025\n\renrollmentIds\030\006 \003(\t\"Q\n\034Appe"
  "ndEnrollmentGroupRequest\022\032\n\007groupId\030\001 \001("
  "\tB\t\372B\006r\004\020\001\030\177\022\025\n\renrollmentIds\030\002 \003(\t\"/\n\027D"
  "eleteEnrollmentRequest\022\024\n\002id\030\001 \001(\tB\010\372B\005r"
  "\003\260\001\001\"5\n\034DeleteEnrollmentGroupRequest\022\025\n\002"
  "id\030\001 \001(\tB\t\372B\006r\004\020\001\030\1772\244\006\n\021EnrollmentServic"
  "e\022w\n\016GetEnrollments\0220.sensory.api.v1.man"
  "agement.GetEnrollmentsRequest\0321.sensory."
  "api.v1.management.GetEnrollmentsResponse"
  "\"\000\022\201\001\n\023GetEnrollmentGroups\0220.sensory.api"
  ".v1.management.GetEnrollmentsRequest\0326.s"
  "ensory.api.v1.management.GetEnrollmentGr"
  "oupsResponse\"\000\022\206\001\n\025CreateEnrollmentGroup"
  "\0227.sensory.api.v1.management.CreateEnrol"
  "lmentGroupRequest\0322.sensory.api.v1.manag"
  "ement.EnrollmentGroupResponse\"\000\022\206\001\n\025Appe"
  "ndEnrollmentGroup\0227.sensory.api.v1.manag"
  "ement.AppendEnrollmentGroupRequest\0322.sen"
  "sory.api.v1.management.EnrollmentGroupRe"
  "sponse\"\000\022w\n\020DeleteEnrollment\0222.sensory.a"
  "pi.v1.management.DeleteEnrollmentRequest"
  "\032-.sensory.api.v1.management.EnrollmentR"
  "esponse\"\000\022\206\001\n\025DeleteEnrollmentGroup\0227.se"
  "nsory.api.v1.management.DeleteEnrollment"
  "GroupRequest\0322.sensory.api.v1.management"
  ".EnrollmentGroupResponse\"\000B\210\001\n\034io.sensor"
  "y.api.v1.managementB%SensoryApiV1Managem"
  "entEnrollmentProtoP\001Z\?gitlab.com/sensory"
  "-cloud/server/titan.git/pkg/api/v1/manag"
  "ementb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_v1_2fmanagement_2fenrollment_2eproto_deps[3] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_v1_2fmanagement_2fenrollment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fmanagement_2fenrollment_2eproto = {
  false, false, 2493, descriptor_table_protodef_v1_2fmanagement_2fenrollment_2eproto, "v1/management/enrollment.proto", 
  &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_once, descriptor_table_v1_2fmanagement_2fenrollment_2eproto_deps, 3, 9,
  schemas, file_default_instances, TableStruct_v1_2fmanagement_2fenrollment_2eproto::offsets,
  file_level_metadata_v1_2fmanagement_2fenrollment_2eproto, file_level_enum_descriptors_v1_2fmanagement_2fenrollment_2eproto, file_level_service_descriptors_v1_2fmanagement_2fenrollment_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_v1_2fmanagement_2fenrollment_2eproto_getter() {
  return &descriptor_table_v1_2fmanagement_2fenrollment_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_v1_2fmanagement_2fenrollment_2eproto(&descriptor_table_v1_2fmanagement_2fenrollment_2eproto);
namespace sensory {
namespace api {
namespace v1 {
namespace management {

// ===================================================================

class GetEnrollmentsRequest::_Internal {
 public:
};

GetEnrollmentsRequest::GetEnrollmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.GetEnrollmentsRequest)
}
GetEnrollmentsRequest::GetEnrollmentsRequest(const GetEnrollmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.GetEnrollmentsRequest)
}

inline void GetEnrollmentsRequest::SharedCtor() {
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetEnrollmentsRequest::~GetEnrollmentsRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.GetEnrollmentsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetEnrollmentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEnrollmentsRequest::ArenaDtor(void* object) {
  GetEnrollmentsRequest* _this = reinterpret_cast< GetEnrollmentsRequest* >(object);
  (void)_this;
}
void GetEnrollmentsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEnrollmentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEnrollmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.GetEnrollmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEnrollmentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userId = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.GetEnrollmentsRequest.userId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEnrollmentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.GetEnrollmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 1 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.GetEnrollmentsRequest.userId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.GetEnrollmentsRequest)
  return target;
}

size_t GetEnrollmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.GetEnrollmentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 1 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEnrollmentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetEnrollmentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEnrollmentsRequest::GetClassData() const { return &_class_data_; }

void GetEnrollmentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetEnrollmentsRequest *>(to)->MergeFrom(
      static_cast<const GetEnrollmentsRequest &>(from));
}


void GetEnrollmentsRequest::MergeFrom(const GetEnrollmentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.GetEnrollmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEnrollmentsRequest::CopyFrom(const GetEnrollmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.GetEnrollmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEnrollmentsRequest::IsInitialized() const {
  return true;
}

void GetEnrollmentsRequest::InternalSwap(GetEnrollmentsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, GetArenaForAllocation(),
      &other->userid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEnrollmentsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_getter, &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fenrollment_2eproto[0]);
}

// ===================================================================

class GetEnrollmentsResponse::_Internal {
 public:
};

GetEnrollmentsResponse::GetEnrollmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  enrollments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.GetEnrollmentsResponse)
}
GetEnrollmentsResponse::GetEnrollmentsResponse(const GetEnrollmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      enrollments_(from.enrollments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isrequestortrusted_ = from.isrequestortrusted_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.GetEnrollmentsResponse)
}

inline void GetEnrollmentsResponse::SharedCtor() {
isrequestortrusted_ = false;
}

GetEnrollmentsResponse::~GetEnrollmentsResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.GetEnrollmentsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetEnrollmentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetEnrollmentsResponse::ArenaDtor(void* object) {
  GetEnrollmentsResponse* _this = reinterpret_cast< GetEnrollmentsResponse* >(object);
  (void)_this;
}
void GetEnrollmentsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEnrollmentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEnrollmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.GetEnrollmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enrollments_.Clear();
  isrequestortrusted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEnrollmentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensory.api.v1.management.EnrollmentResponse enrollments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enrollments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool isRequestorTrusted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isrequestortrusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEnrollmentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.GetEnrollmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensory.api.v1.management.EnrollmentResponse enrollments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enrollments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_enrollments(i), target, stream);
  }

  // bool isRequestorTrusted = 2;
  if (this->_internal_isrequestortrusted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isrequestortrusted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.GetEnrollmentsResponse)
  return target;
}

size_t GetEnrollmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.GetEnrollmentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensory.api.v1.management.EnrollmentResponse enrollments = 1;
  total_size += 1UL * this->_internal_enrollments_size();
  for (const auto& msg : this->enrollments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool isRequestorTrusted = 2;
  if (this->_internal_isrequestortrusted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEnrollmentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetEnrollmentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEnrollmentsResponse::GetClassData() const { return &_class_data_; }

void GetEnrollmentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetEnrollmentsResponse *>(to)->MergeFrom(
      static_cast<const GetEnrollmentsResponse &>(from));
}


void GetEnrollmentsResponse::MergeFrom(const GetEnrollmentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.GetEnrollmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enrollments_.MergeFrom(from.enrollments_);
  if (from._internal_isrequestortrusted() != 0) {
    _internal_set_isrequestortrusted(from._internal_isrequestortrusted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEnrollmentsResponse::CopyFrom(const GetEnrollmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.GetEnrollmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEnrollmentsResponse::IsInitialized() const {
  return true;
}

void GetEnrollmentsResponse::InternalSwap(GetEnrollmentsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  enrollments_.InternalSwap(&other->enrollments_);
  swap(isrequestortrusted_, other->isrequestortrusted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEnrollmentsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_getter, &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fenrollment_2eproto[1]);
}

// ===================================================================

class EnrollmentResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& createdat(const EnrollmentResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updatedat(const EnrollmentResponse* msg);
  static const ::sensory::api::common::CompressionConfiguration& compression(const EnrollmentResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
EnrollmentResponse::_Internal::createdat(const EnrollmentResponse* msg) {
  return *msg->createdat_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
EnrollmentResponse::_Internal::updatedat(const EnrollmentResponse* msg) {
  return *msg->updatedat_;
}
const ::sensory::api::common::CompressionConfiguration&
EnrollmentResponse::_Internal::compression(const EnrollmentResponse* msg) {
  return *msg->compression_;
}
void EnrollmentResponse::clear_createdat() {
  if (GetArenaForAllocation() == nullptr && createdat_ != nullptr) {
    delete createdat_;
  }
  createdat_ = nullptr;
}
void EnrollmentResponse::clear_updatedat() {
  if (GetArenaForAllocation() == nullptr && updatedat_ != nullptr) {
    delete updatedat_;
  }
  updatedat_ = nullptr;
}
void EnrollmentResponse::clear_compression() {
  if (GetArenaForAllocation() == nullptr && compression_ != nullptr) {
    delete compression_;
  }
  compression_ = nullptr;
}
EnrollmentResponse::EnrollmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.EnrollmentResponse)
}
EnrollmentResponse::EnrollmentResponse(const EnrollmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  modelversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelversion().empty()) {
    modelversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelversion(), 
      GetArenaForAllocation());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devicename().empty()) {
    devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devicename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_createdat()) {
    createdat_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.createdat_);
  } else {
    createdat_ = nullptr;
  }
  if (from._internal_has_updatedat()) {
    updatedat_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updatedat_);
  } else {
    updatedat_ = nullptr;
  }
  if (from._internal_has_compression()) {
    compression_ = new ::sensory::api::common::CompressionConfiguration(*from.compression_);
  } else {
    compression_ = nullptr;
  }
  ::memcpy(&modeltype_, &from.modeltype_,
    static_cast<size_t>(reinterpret_cast<char*>(&didenrollwithliveness_) -
    reinterpret_cast<char*>(&modeltype_)) + sizeof(didenrollwithliveness_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.EnrollmentResponse)
}

inline void EnrollmentResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&createdat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&didenrollwithliveness_) -
    reinterpret_cast<char*>(&createdat_)) + sizeof(didenrollwithliveness_));
}

EnrollmentResponse::~EnrollmentResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.EnrollmentResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnrollmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete createdat_;
  if (this != internal_default_instance()) delete updatedat_;
  if (this != internal_default_instance()) delete compression_;
}

void EnrollmentResponse::ArenaDtor(void* object) {
  EnrollmentResponse* _this = reinterpret_cast< EnrollmentResponse* >(object);
  (void)_this;
}
void EnrollmentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnrollmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnrollmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.EnrollmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  description_.ClearToEmpty();
  modelname_.ClearToEmpty();
  modelversion_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  userid_.ClearToEmpty();
  devicename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && createdat_ != nullptr) {
    delete createdat_;
  }
  createdat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && updatedat_ != nullptr) {
    delete updatedat_;
  }
  updatedat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && compression_ != nullptr) {
    delete compression_;
  }
  compression_ = nullptr;
  ::memset(&modeltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&didenrollwithliveness_) -
      reinterpret_cast<char*>(&modeltype_)) + sizeof(didenrollwithliveness_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnrollmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp createdAt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_createdat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updatedAt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatedat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentResponse.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modelName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentResponse.modelName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensory.api.common.ModelType modelType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_modeltype(static_cast<::sensory::api::common::ModelType>(val));
        } else goto handle_unusual;
        continue;
      // string modelVersion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_modelversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentResponse.modelVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentResponse.deviceId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentResponse.userId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensory.api.common.CompressionConfiguration compression = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_compression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_devicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentResponse.deviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool didEnrollWithLiveness = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          didenrollwithliveness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollmentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.EnrollmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp createdAt = 2;
  if (this->_internal_has_createdat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::createdat(this), target, stream);
  }

  // .google.protobuf.Timestamp updatedAt = 3;
  if (this->_internal_has_updatedat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updatedat(this), target, stream);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentResponse.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string modelName = 5;
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentResponse.modelName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_modelname(), target);
  }

  // .sensory.api.common.ModelType modelType = 6;
  if (this->_internal_modeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_modeltype(), target);
  }

  // string modelVersion = 7;
  if (!this->_internal_modelversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelversion().data(), static_cast<int>(this->_internal_modelversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentResponse.modelVersion");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_modelversion(), target);
  }

  // string deviceId = 8;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentResponse.deviceId");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_deviceid(), target);
  }

  // string userId = 9;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentResponse.userId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_userid(), target);
  }

  // .sensory.api.common.CompressionConfiguration compression = 10;
  if (this->_internal_has_compression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::compression(this), target, stream);
  }

  // string deviceName = 11;
  if (!this->_internal_devicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicename().data(), static_cast<int>(this->_internal_devicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentResponse.deviceName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_devicename(), target);
  }

  // bool didEnrollWithLiveness = 12;
  if (this->_internal_didenrollwithliveness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_didenrollwithliveness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.EnrollmentResponse)
  return target;
}

size_t EnrollmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.EnrollmentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string modelName = 5;
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // string modelVersion = 7;
  if (!this->_internal_modelversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelversion());
  }

  // string deviceId = 8;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string userId = 9;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string deviceName = 11;
  if (!this->_internal_devicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicename());
  }

  // .google.protobuf.Timestamp createdAt = 2;
  if (this->_internal_has_createdat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *createdat_);
  }

  // .google.protobuf.Timestamp updatedAt = 3;
  if (this->_internal_has_updatedat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updatedat_);
  }

  // .sensory.api.common.CompressionConfiguration compression = 10;
  if (this->_internal_has_compression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compression_);
  }

  // .sensory.api.common.ModelType modelType = 6;
  if (this->_internal_modeltype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_modeltype());
  }

  // bool didEnrollWithLiveness = 12;
  if (this->_internal_didenrollwithliveness() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnrollmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnrollmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnrollmentResponse::GetClassData() const { return &_class_data_; }

void EnrollmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EnrollmentResponse *>(to)->MergeFrom(
      static_cast<const EnrollmentResponse &>(from));
}


void EnrollmentResponse::MergeFrom(const EnrollmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.EnrollmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_modelversion().empty()) {
    _internal_set_modelversion(from._internal_modelversion());
  }
  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (!from._internal_devicename().empty()) {
    _internal_set_devicename(from._internal_devicename());
  }
  if (from._internal_has_createdat()) {
    _internal_mutable_createdat()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_createdat());
  }
  if (from._internal_has_updatedat()) {
    _internal_mutable_updatedat()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updatedat());
  }
  if (from._internal_has_compression()) {
    _internal_mutable_compression()->::sensory::api::common::CompressionConfiguration::MergeFrom(from._internal_compression());
  }
  if (from._internal_modeltype() != 0) {
    _internal_set_modeltype(from._internal_modeltype());
  }
  if (from._internal_didenrollwithliveness() != 0) {
    _internal_set_didenrollwithliveness(from._internal_didenrollwithliveness());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnrollmentResponse::CopyFrom(const EnrollmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.EnrollmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollmentResponse::IsInitialized() const {
  return true;
}

void EnrollmentResponse::InternalSwap(EnrollmentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, GetArenaForAllocation(),
      &other->modelname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelversion_, GetArenaForAllocation(),
      &other->modelversion_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, GetArenaForAllocation(),
      &other->deviceid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, GetArenaForAllocation(),
      &other->userid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devicename_, GetArenaForAllocation(),
      &other->devicename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnrollmentResponse, didenrollwithliveness_)
      + sizeof(EnrollmentResponse::didenrollwithliveness_)
      - PROTOBUF_FIELD_OFFSET(EnrollmentResponse, createdat_)>(
          reinterpret_cast<char*>(&createdat_),
          reinterpret_cast<char*>(&other->createdat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollmentResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_getter, &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fenrollment_2eproto[2]);
}

// ===================================================================

class GetEnrollmentGroupsResponse::_Internal {
 public:
};

GetEnrollmentGroupsResponse::GetEnrollmentGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  enrollmentgroups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.GetEnrollmentGroupsResponse)
}
GetEnrollmentGroupsResponse::GetEnrollmentGroupsResponse(const GetEnrollmentGroupsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      enrollmentgroups_(from.enrollmentgroups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.GetEnrollmentGroupsResponse)
}

inline void GetEnrollmentGroupsResponse::SharedCtor() {
}

GetEnrollmentGroupsResponse::~GetEnrollmentGroupsResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.GetEnrollmentGroupsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetEnrollmentGroupsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetEnrollmentGroupsResponse::ArenaDtor(void* object) {
  GetEnrollmentGroupsResponse* _this = reinterpret_cast< GetEnrollmentGroupsResponse* >(object);
  (void)_this;
}
void GetEnrollmentGroupsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEnrollmentGroupsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEnrollmentGroupsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.GetEnrollmentGroupsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enrollmentgroups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEnrollmentGroupsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensory.api.v1.management.EnrollmentGroupResponse enrollmentGroups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enrollmentgroups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEnrollmentGroupsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.GetEnrollmentGroupsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensory.api.v1.management.EnrollmentGroupResponse enrollmentGroups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enrollmentgroups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_enrollmentgroups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.GetEnrollmentGroupsResponse)
  return target;
}

size_t GetEnrollmentGroupsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.GetEnrollmentGroupsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensory.api.v1.management.EnrollmentGroupResponse enrollmentGroups = 1;
  total_size += 1UL * this->_internal_enrollmentgroups_size();
  for (const auto& msg : this->enrollmentgroups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEnrollmentGroupsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetEnrollmentGroupsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEnrollmentGroupsResponse::GetClassData() const { return &_class_data_; }

void GetEnrollmentGroupsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetEnrollmentGroupsResponse *>(to)->MergeFrom(
      static_cast<const GetEnrollmentGroupsResponse &>(from));
}


void GetEnrollmentGroupsResponse::MergeFrom(const GetEnrollmentGroupsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.GetEnrollmentGroupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enrollmentgroups_.MergeFrom(from.enrollmentgroups_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEnrollmentGroupsResponse::CopyFrom(const GetEnrollmentGroupsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.GetEnrollmentGroupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEnrollmentGroupsResponse::IsInitialized() const {
  return true;
}

void GetEnrollmentGroupsResponse::InternalSwap(GetEnrollmentGroupsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  enrollmentgroups_.InternalSwap(&other->enrollmentgroups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEnrollmentGroupsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_getter, &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fenrollment_2eproto[3]);
}

// ===================================================================

class EnrollmentGroupResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& createdat(const EnrollmentGroupResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updatedat(const EnrollmentGroupResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
EnrollmentGroupResponse::_Internal::createdat(const EnrollmentGroupResponse* msg) {
  return *msg->createdat_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
EnrollmentGroupResponse::_Internal::updatedat(const EnrollmentGroupResponse* msg) {
  return *msg->updatedat_;
}
void EnrollmentGroupResponse::clear_createdat() {
  if (GetArenaForAllocation() == nullptr && createdat_ != nullptr) {
    delete createdat_;
  }
  createdat_ = nullptr;
}
void EnrollmentGroupResponse::clear_updatedat() {
  if (GetArenaForAllocation() == nullptr && updatedat_ != nullptr) {
    delete updatedat_;
  }
  updatedat_ = nullptr;
}
EnrollmentGroupResponse::EnrollmentGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  enrollments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.EnrollmentGroupResponse)
}
EnrollmentGroupResponse::EnrollmentGroupResponse(const EnrollmentGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      enrollments_(from.enrollments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  modelversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelversion().empty()) {
    modelversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelversion(), 
      GetArenaForAllocation());
  }
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_createdat()) {
    createdat_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.createdat_);
  } else {
    createdat_ = nullptr;
  }
  if (from._internal_has_updatedat()) {
    updatedat_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updatedat_);
  } else {
    updatedat_ = nullptr;
  }
  modeltype_ = from.modeltype_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.EnrollmentGroupResponse)
}

inline void EnrollmentGroupResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&createdat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&modeltype_) -
    reinterpret_cast<char*>(&createdat_)) + sizeof(modeltype_));
}

EnrollmentGroupResponse::~EnrollmentGroupResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.EnrollmentGroupResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnrollmentGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete createdat_;
  if (this != internal_default_instance()) delete updatedat_;
}

void EnrollmentGroupResponse::ArenaDtor(void* object) {
  EnrollmentGroupResponse* _this = reinterpret_cast< EnrollmentGroupResponse* >(object);
  (void)_this;
}
void EnrollmentGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnrollmentGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnrollmentGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.EnrollmentGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enrollments_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  modelname_.ClearToEmpty();
  modelversion_.ClearToEmpty();
  userid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && createdat_ != nullptr) {
    delete createdat_;
  }
  createdat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && updatedat_ != nullptr) {
    delete updatedat_;
  }
  updatedat_ = nullptr;
  modeltype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnrollmentGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentGroupResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp createdAt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_createdat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updatedAt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatedat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentGroupResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentGroupResponse.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modelName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentGroupResponse.modelName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensory.api.common.ModelType modelType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_modeltype(static_cast<::sensory::api::common::ModelType>(val));
        } else goto handle_unusual;
        continue;
      // string modelVersion = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_modelversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentGroupResponse.modelVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.EnrollmentGroupResponse.userId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sensory.api.v1.management.EnrollmentResponse enrollments = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enrollments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollmentGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.EnrollmentGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentGroupResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp createdAt = 2;
  if (this->_internal_has_createdat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::createdat(this), target, stream);
  }

  // .google.protobuf.Timestamp updatedAt = 3;
  if (this->_internal_has_updatedat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updatedat(this), target, stream);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentGroupResponse.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentGroupResponse.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // string modelName = 6;
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentGroupResponse.modelName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_modelname(), target);
  }

  // .sensory.api.common.ModelType modelType = 7;
  if (this->_internal_modeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_modeltype(), target);
  }

  // string modelVersion = 8;
  if (!this->_internal_modelversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelversion().data(), static_cast<int>(this->_internal_modelversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentGroupResponse.modelVersion");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_modelversion(), target);
  }

  // string userId = 9;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.EnrollmentGroupResponse.userId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_userid(), target);
  }

  // repeated .sensory.api.v1.management.EnrollmentResponse enrollments = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enrollments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_enrollments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.EnrollmentGroupResponse)
  return target;
}

size_t EnrollmentGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.EnrollmentGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensory.api.v1.management.EnrollmentResponse enrollments = 10;
  total_size += 1UL * this->_internal_enrollments_size();
  for (const auto& msg : this->enrollments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string modelName = 6;
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // string modelVersion = 8;
  if (!this->_internal_modelversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelversion());
  }

  // string userId = 9;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // .google.protobuf.Timestamp createdAt = 2;
  if (this->_internal_has_createdat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *createdat_);
  }

  // .google.protobuf.Timestamp updatedAt = 3;
  if (this->_internal_has_updatedat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updatedat_);
  }

  // .sensory.api.common.ModelType modelType = 7;
  if (this->_internal_modeltype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_modeltype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnrollmentGroupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnrollmentGroupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnrollmentGroupResponse::GetClassData() const { return &_class_data_; }

void EnrollmentGroupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EnrollmentGroupResponse *>(to)->MergeFrom(
      static_cast<const EnrollmentGroupResponse &>(from));
}


void EnrollmentGroupResponse::MergeFrom(const EnrollmentGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.EnrollmentGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enrollments_.MergeFrom(from.enrollments_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_modelversion().empty()) {
    _internal_set_modelversion(from._internal_modelversion());
  }
  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (from._internal_has_createdat()) {
    _internal_mutable_createdat()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_createdat());
  }
  if (from._internal_has_updatedat()) {
    _internal_mutable_updatedat()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updatedat());
  }
  if (from._internal_modeltype() != 0) {
    _internal_set_modeltype(from._internal_modeltype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnrollmentGroupResponse::CopyFrom(const EnrollmentGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.EnrollmentGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollmentGroupResponse::IsInitialized() const {
  return true;
}

void EnrollmentGroupResponse::InternalSwap(EnrollmentGroupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  enrollments_.InternalSwap(&other->enrollments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, GetArenaForAllocation(),
      &other->modelname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelversion_, GetArenaForAllocation(),
      &other->modelversion_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, GetArenaForAllocation(),
      &other->userid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnrollmentGroupResponse, modeltype_)
      + sizeof(EnrollmentGroupResponse::modeltype_)
      - PROTOBUF_FIELD_OFFSET(EnrollmentGroupResponse, createdat_)>(
          reinterpret_cast<char*>(&createdat_),
          reinterpret_cast<char*>(&other->createdat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollmentGroupResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_getter, &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fenrollment_2eproto[4]);
}

// ===================================================================

class CreateEnrollmentGroupRequest::_Internal {
 public:
};

CreateEnrollmentGroupRequest::CreateEnrollmentGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  enrollmentids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.CreateEnrollmentGroupRequest)
}
CreateEnrollmentGroupRequest::CreateEnrollmentGroupRequest(const CreateEnrollmentGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      enrollmentids_(from.enrollmentids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.CreateEnrollmentGroupRequest)
}

inline void CreateEnrollmentGroupRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateEnrollmentGroupRequest::~CreateEnrollmentGroupRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.CreateEnrollmentGroupRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateEnrollmentGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateEnrollmentGroupRequest::ArenaDtor(void* object) {
  CreateEnrollmentGroupRequest* _this = reinterpret_cast< CreateEnrollmentGroupRequest* >(object);
  (void)_this;
}
void CreateEnrollmentGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEnrollmentGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateEnrollmentGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.CreateEnrollmentGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enrollmentids_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  modelname_.ClearToEmpty();
  userid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEnrollmentGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.CreateEnrollmentGroupRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.CreateEnrollmentGroupRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.CreateEnrollmentGroupRequest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modelName = 4 [(.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.CreateEnrollmentGroupRequest.modelName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userId = 5 [(.validate.rules) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.CreateEnrollmentGroupRequest.userId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string enrollmentIds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_enrollmentids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.CreateEnrollmentGroupRequest.enrollmentIds"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEnrollmentGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.CreateEnrollmentGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.validate.rules) = {
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.CreateEnrollmentGroupRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [(.validate.rules) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.CreateEnrollmentGroupRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3 [(.validate.rules) = {
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.CreateEnrollmentGroupRequest.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string modelName = 4 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.CreateEnrollmentGroupRequest.modelName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_modelname(), target);
  }

  // string userId = 5 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.CreateEnrollmentGroupRequest.userId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_userid(), target);
  }

  // repeated string enrollmentIds = 6;
  for (int i = 0, n = this->_internal_enrollmentids_size(); i < n; i++) {
    const auto& s = this->_internal_enrollmentids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.CreateEnrollmentGroupRequest.enrollmentIds");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.CreateEnrollmentGroupRequest)
  return target;
}

size_t CreateEnrollmentGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.CreateEnrollmentGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string enrollmentIds = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(enrollmentids_.size());
  for (int i = 0, n = enrollmentids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      enrollmentids_.Get(i));
  }

  // string id = 1 [(.validate.rules) = {
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [(.validate.rules) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3 [(.validate.rules) = {
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string modelName = 4 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // string userId = 5 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEnrollmentGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateEnrollmentGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEnrollmentGroupRequest::GetClassData() const { return &_class_data_; }

void CreateEnrollmentGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateEnrollmentGroupRequest *>(to)->MergeFrom(
      static_cast<const CreateEnrollmentGroupRequest &>(from));
}


void CreateEnrollmentGroupRequest::MergeFrom(const CreateEnrollmentGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.CreateEnrollmentGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enrollmentids_.MergeFrom(from.enrollmentids_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEnrollmentGroupRequest::CopyFrom(const CreateEnrollmentGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.CreateEnrollmentGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEnrollmentGroupRequest::IsInitialized() const {
  return true;
}

void CreateEnrollmentGroupRequest::InternalSwap(CreateEnrollmentGroupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  enrollmentids_.InternalSwap(&other->enrollmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, GetArenaForAllocation(),
      &other->modelname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, GetArenaForAllocation(),
      &other->userid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEnrollmentGroupRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_getter, &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fenrollment_2eproto[5]);
}

// ===================================================================

class AppendEnrollmentGroupRequest::_Internal {
 public:
};

AppendEnrollmentGroupRequest::AppendEnrollmentGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  enrollmentids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.AppendEnrollmentGroupRequest)
}
AppendEnrollmentGroupRequest::AppendEnrollmentGroupRequest(const AppendEnrollmentGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      enrollmentids_(from.enrollmentids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_groupid().empty()) {
    groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_groupid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.AppendEnrollmentGroupRequest)
}

inline void AppendEnrollmentGroupRequest::SharedCtor() {
groupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppendEnrollmentGroupRequest::~AppendEnrollmentGroupRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.AppendEnrollmentGroupRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendEnrollmentGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  groupid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppendEnrollmentGroupRequest::ArenaDtor(void* object) {
  AppendEnrollmentGroupRequest* _this = reinterpret_cast< AppendEnrollmentGroupRequest* >(object);
  (void)_this;
}
void AppendEnrollmentGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEnrollmentGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEnrollmentGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.AppendEnrollmentGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enrollmentids_.Clear();
  groupid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEnrollmentGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string groupId = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_groupid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.AppendEnrollmentGroupRequest.groupId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string enrollmentIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_enrollmentids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.AppendEnrollmentGroupRequest.enrollmentIds"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEnrollmentGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.AppendEnrollmentGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string groupId = 1 [(.validate.rules) = {
  if (!this->_internal_groupid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupid().data(), static_cast<int>(this->_internal_groupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.AppendEnrollmentGroupRequest.groupId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_groupid(), target);
  }

  // repeated string enrollmentIds = 2;
  for (int i = 0, n = this->_internal_enrollmentids_size(); i < n; i++) {
    const auto& s = this->_internal_enrollmentids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.AppendEnrollmentGroupRequest.enrollmentIds");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.AppendEnrollmentGroupRequest)
  return target;
}

size_t AppendEnrollmentGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.AppendEnrollmentGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string enrollmentIds = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(enrollmentids_.size());
  for (int i = 0, n = enrollmentids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      enrollmentids_.Get(i));
  }

  // string groupId = 1 [(.validate.rules) = {
  if (!this->_internal_groupid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEnrollmentGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEnrollmentGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEnrollmentGroupRequest::GetClassData() const { return &_class_data_; }

void AppendEnrollmentGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppendEnrollmentGroupRequest *>(to)->MergeFrom(
      static_cast<const AppendEnrollmentGroupRequest &>(from));
}


void AppendEnrollmentGroupRequest::MergeFrom(const AppendEnrollmentGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.AppendEnrollmentGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enrollmentids_.MergeFrom(from.enrollmentids_);
  if (!from._internal_groupid().empty()) {
    _internal_set_groupid(from._internal_groupid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEnrollmentGroupRequest::CopyFrom(const AppendEnrollmentGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.AppendEnrollmentGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEnrollmentGroupRequest::IsInitialized() const {
  return true;
}

void AppendEnrollmentGroupRequest::InternalSwap(AppendEnrollmentGroupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  enrollmentids_.InternalSwap(&other->enrollmentids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &groupid_, GetArenaForAllocation(),
      &other->groupid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEnrollmentGroupRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_getter, &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fenrollment_2eproto[6]);
}

// ===================================================================

class DeleteEnrollmentRequest::_Internal {
 public:
};

DeleteEnrollmentRequest::DeleteEnrollmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.DeleteEnrollmentRequest)
}
DeleteEnrollmentRequest::DeleteEnrollmentRequest(const DeleteEnrollmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.DeleteEnrollmentRequest)
}

inline void DeleteEnrollmentRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteEnrollmentRequest::~DeleteEnrollmentRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.DeleteEnrollmentRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteEnrollmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteEnrollmentRequest::ArenaDtor(void* object) {
  DeleteEnrollmentRequest* _this = reinterpret_cast< DeleteEnrollmentRequest* >(object);
  (void)_this;
}
void DeleteEnrollmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteEnrollmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteEnrollmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.DeleteEnrollmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteEnrollmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.DeleteEnrollmentRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteEnrollmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.DeleteEnrollmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.validate.rules) = {
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.DeleteEnrollmentRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.DeleteEnrollmentRequest)
  return target;
}

size_t DeleteEnrollmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.DeleteEnrollmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.validate.rules) = {
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteEnrollmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteEnrollmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteEnrollmentRequest::GetClassData() const { return &_class_data_; }

void DeleteEnrollmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteEnrollmentRequest *>(to)->MergeFrom(
      static_cast<const DeleteEnrollmentRequest &>(from));
}


void DeleteEnrollmentRequest::MergeFrom(const DeleteEnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.DeleteEnrollmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteEnrollmentRequest::CopyFrom(const DeleteEnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.DeleteEnrollmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEnrollmentRequest::IsInitialized() const {
  return true;
}

void DeleteEnrollmentRequest::InternalSwap(DeleteEnrollmentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEnrollmentRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_getter, &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fenrollment_2eproto[7]);
}

// ===================================================================

class DeleteEnrollmentGroupRequest::_Internal {
 public:
};

DeleteEnrollmentGroupRequest::DeleteEnrollmentGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.management.DeleteEnrollmentGroupRequest)
}
DeleteEnrollmentGroupRequest::DeleteEnrollmentGroupRequest(const DeleteEnrollmentGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.management.DeleteEnrollmentGroupRequest)
}

inline void DeleteEnrollmentGroupRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteEnrollmentGroupRequest::~DeleteEnrollmentGroupRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.management.DeleteEnrollmentGroupRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteEnrollmentGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteEnrollmentGroupRequest::ArenaDtor(void* object) {
  DeleteEnrollmentGroupRequest* _this = reinterpret_cast< DeleteEnrollmentGroupRequest* >(object);
  (void)_this;
}
void DeleteEnrollmentGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteEnrollmentGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteEnrollmentGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.management.DeleteEnrollmentGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteEnrollmentGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.management.DeleteEnrollmentGroupRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteEnrollmentGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.management.DeleteEnrollmentGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.validate.rules) = {
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.management.DeleteEnrollmentGroupRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.management.DeleteEnrollmentGroupRequest)
  return target;
}

size_t DeleteEnrollmentGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.management.DeleteEnrollmentGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.validate.rules) = {
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteEnrollmentGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteEnrollmentGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteEnrollmentGroupRequest::GetClassData() const { return &_class_data_; }

void DeleteEnrollmentGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteEnrollmentGroupRequest *>(to)->MergeFrom(
      static_cast<const DeleteEnrollmentGroupRequest &>(from));
}


void DeleteEnrollmentGroupRequest::MergeFrom(const DeleteEnrollmentGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.management.DeleteEnrollmentGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteEnrollmentGroupRequest::CopyFrom(const DeleteEnrollmentGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.management.DeleteEnrollmentGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEnrollmentGroupRequest::IsInitialized() const {
  return true;
}

void DeleteEnrollmentGroupRequest::InternalSwap(DeleteEnrollmentGroupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEnrollmentGroupRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_getter, &descriptor_table_v1_2fmanagement_2fenrollment_2eproto_once,
      file_level_metadata_v1_2fmanagement_2fenrollment_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace management
}  // namespace v1
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::GetEnrollmentsRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::management::GetEnrollmentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::GetEnrollmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::GetEnrollmentsResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::management::GetEnrollmentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::GetEnrollmentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::EnrollmentResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::management::EnrollmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::EnrollmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::GetEnrollmentGroupsResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::management::GetEnrollmentGroupsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::GetEnrollmentGroupsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::EnrollmentGroupResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::management::EnrollmentGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::EnrollmentGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::CreateEnrollmentGroupRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::management::CreateEnrollmentGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::CreateEnrollmentGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::AppendEnrollmentGroupRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::management::AppendEnrollmentGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::AppendEnrollmentGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::DeleteEnrollmentRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::management::DeleteEnrollmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::DeleteEnrollmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::management::DeleteEnrollmentGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::management::DeleteEnrollmentGroupRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
