// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/management/device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2fmanagement_2fdevice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_v1_2fmanagement_2fdevice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/common.pb.h"
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_v1_2fmanagement_2fdevice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2fmanagement_2fdevice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fmanagement_2fdevice_2eproto;
namespace sensory {
namespace api {
namespace v1 {
namespace management {
class DeviceGetWhoAmIRequest;
struct DeviceGetWhoAmIRequestDefaultTypeInternal;
extern DeviceGetWhoAmIRequestDefaultTypeInternal _DeviceGetWhoAmIRequest_default_instance_;
class DeviceListResponse;
struct DeviceListResponseDefaultTypeInternal;
extern DeviceListResponseDefaultTypeInternal _DeviceListResponse_default_instance_;
class DeviceRequest;
struct DeviceRequestDefaultTypeInternal;
extern DeviceRequestDefaultTypeInternal _DeviceRequest_default_instance_;
class DeviceResponse;
struct DeviceResponseDefaultTypeInternal;
extern DeviceResponseDefaultTypeInternal _DeviceResponse_default_instance_;
class EnrollDeviceRequest;
struct EnrollDeviceRequestDefaultTypeInternal;
extern EnrollDeviceRequestDefaultTypeInternal _EnrollDeviceRequest_default_instance_;
class GetDeviceResponse;
struct GetDeviceResponseDefaultTypeInternal;
extern GetDeviceResponseDefaultTypeInternal _GetDeviceResponse_default_instance_;
class GetDevicesRequest;
struct GetDevicesRequestDefaultTypeInternal;
extern GetDevicesRequestDefaultTypeInternal _GetDevicesRequest_default_instance_;
class RenewDeviceCredentialRequest;
struct RenewDeviceCredentialRequestDefaultTypeInternal;
extern RenewDeviceCredentialRequestDefaultTypeInternal _RenewDeviceCredentialRequest_default_instance_;
class UpdateDeviceRequest;
struct UpdateDeviceRequestDefaultTypeInternal;
extern UpdateDeviceRequestDefaultTypeInternal _UpdateDeviceRequest_default_instance_;
}  // namespace management
}  // namespace v1
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> ::sensory::api::v1::management::DeviceGetWhoAmIRequest* Arena::CreateMaybeMessage<::sensory::api::v1::management::DeviceGetWhoAmIRequest>(Arena*);
template<> ::sensory::api::v1::management::DeviceListResponse* Arena::CreateMaybeMessage<::sensory::api::v1::management::DeviceListResponse>(Arena*);
template<> ::sensory::api::v1::management::DeviceRequest* Arena::CreateMaybeMessage<::sensory::api::v1::management::DeviceRequest>(Arena*);
template<> ::sensory::api::v1::management::DeviceResponse* Arena::CreateMaybeMessage<::sensory::api::v1::management::DeviceResponse>(Arena*);
template<> ::sensory::api::v1::management::EnrollDeviceRequest* Arena::CreateMaybeMessage<::sensory::api::v1::management::EnrollDeviceRequest>(Arena*);
template<> ::sensory::api::v1::management::GetDeviceResponse* Arena::CreateMaybeMessage<::sensory::api::v1::management::GetDeviceResponse>(Arena*);
template<> ::sensory::api::v1::management::GetDevicesRequest* Arena::CreateMaybeMessage<::sensory::api::v1::management::GetDevicesRequest>(Arena*);
template<> ::sensory::api::v1::management::RenewDeviceCredentialRequest* Arena::CreateMaybeMessage<::sensory::api::v1::management::RenewDeviceCredentialRequest>(Arena*);
template<> ::sensory::api::v1::management::UpdateDeviceRequest* Arena::CreateMaybeMessage<::sensory::api::v1::management::UpdateDeviceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sensory {
namespace api {
namespace v1 {
namespace management {

// ===================================================================

class EnrollDeviceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensory.api.v1.management.EnrollDeviceRequest) */ {
 public:
  inline EnrollDeviceRequest() : EnrollDeviceRequest(nullptr) {}
  ~EnrollDeviceRequest() override;
  explicit constexpr EnrollDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnrollDeviceRequest(const EnrollDeviceRequest& from);
  EnrollDeviceRequest(EnrollDeviceRequest&& from) noexcept
    : EnrollDeviceRequest() {
    *this = ::std::move(from);
  }

  inline EnrollDeviceRequest& operator=(const EnrollDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollDeviceRequest& operator=(EnrollDeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnrollDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnrollDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const EnrollDeviceRequest*>(
               &_EnrollDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnrollDeviceRequest& a, EnrollDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnrollDeviceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnrollDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnrollDeviceRequest* New() const final {
    return new EnrollDeviceRequest();
  }

  EnrollDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollDeviceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnrollDeviceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnrollDeviceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.management.EnrollDeviceRequest";
  }
  protected:
  explicit EnrollDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kTenantIdFieldNumber = 3,
    kCredentialFieldNumber = 5,
    kClientFieldNumber = 4,
  };
  // string name = 1 [(.validate.rules) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string deviceId = 2 [(.validate.rules) = {
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_MUST_USE_RESULT std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string tenantId = 3 [(.validate.rules) = {
  void clear_tenantid();
  const std::string& tenantid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tenantid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tenantid();
  PROTOBUF_MUST_USE_RESULT std::string* release_tenantid();
  void set_allocated_tenantid(std::string* tenantid);
  private:
  const std::string& _internal_tenantid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tenantid(const std::string& value);
  std::string* _internal_mutable_tenantid();
  public:

  // string credential = 5;
  void clear_credential();
  const std::string& credential() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_credential(ArgT0&& arg0, ArgT... args);
  std::string* mutable_credential();
  PROTOBUF_MUST_USE_RESULT std::string* release_credential();
  void set_allocated_credential(std::string* credential);
  private:
  const std::string& _internal_credential() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_credential(const std::string& value);
  std::string* _internal_mutable_credential();
  public:

  // .sensory.api.common.GenericClient client = 4 [(.validate.rules) = {
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::sensory::api::common::GenericClient& client() const;
  PROTOBUF_MUST_USE_RESULT ::sensory::api::common::GenericClient* release_client();
  ::sensory::api::common::GenericClient* mutable_client();
  void set_allocated_client(::sensory::api::common::GenericClient* client);
  private:
  const ::sensory::api::common::GenericClient& _internal_client() const;
  ::sensory::api::common::GenericClient* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::sensory::api::common::GenericClient* client);
  ::sensory::api::common::GenericClient* unsafe_arena_release_client();

  // @@protoc_insertion_point(class_scope:sensory.api.v1.management.EnrollDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tenantid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credential_;
  ::sensory::api::common::GenericClient* client_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fmanagement_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class RenewDeviceCredentialRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensory.api.v1.management.RenewDeviceCredentialRequest) */ {
 public:
  inline RenewDeviceCredentialRequest() : RenewDeviceCredentialRequest(nullptr) {}
  ~RenewDeviceCredentialRequest() override;
  explicit constexpr RenewDeviceCredentialRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenewDeviceCredentialRequest(const RenewDeviceCredentialRequest& from);
  RenewDeviceCredentialRequest(RenewDeviceCredentialRequest&& from) noexcept
    : RenewDeviceCredentialRequest() {
    *this = ::std::move(from);
  }

  inline RenewDeviceCredentialRequest& operator=(const RenewDeviceCredentialRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenewDeviceCredentialRequest& operator=(RenewDeviceCredentialRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenewDeviceCredentialRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenewDeviceCredentialRequest* internal_default_instance() {
    return reinterpret_cast<const RenewDeviceCredentialRequest*>(
               &_RenewDeviceCredentialRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RenewDeviceCredentialRequest& a, RenewDeviceCredentialRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RenewDeviceCredentialRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenewDeviceCredentialRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenewDeviceCredentialRequest* New() const final {
    return new RenewDeviceCredentialRequest();
  }

  RenewDeviceCredentialRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenewDeviceCredentialRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenewDeviceCredentialRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RenewDeviceCredentialRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenewDeviceCredentialRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.management.RenewDeviceCredentialRequest";
  }
  protected:
  explicit RenewDeviceCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kTenantIdFieldNumber = 3,
    kCredentialFieldNumber = 4,
  };
  // string deviceId = 1 [(.validate.rules) = {
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_MUST_USE_RESULT std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string clientId = 2 [(.validate.rules) = {
  void clear_clientid();
  const std::string& clientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientid();
  PROTOBUF_MUST_USE_RESULT std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string tenantId = 3 [(.validate.rules) = {
  void clear_tenantid();
  const std::string& tenantid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tenantid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tenantid();
  PROTOBUF_MUST_USE_RESULT std::string* release_tenantid();
  void set_allocated_tenantid(std::string* tenantid);
  private:
  const std::string& _internal_tenantid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tenantid(const std::string& value);
  std::string* _internal_mutable_tenantid();
  public:

  // string credential = 4 [(.validate.rules) = {
  void clear_credential();
  const std::string& credential() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_credential(ArgT0&& arg0, ArgT... args);
  std::string* mutable_credential();
  PROTOBUF_MUST_USE_RESULT std::string* release_credential();
  void set_allocated_credential(std::string* credential);
  private:
  const std::string& _internal_credential() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_credential(const std::string& value);
  std::string* _internal_mutable_credential();
  public:

  // @@protoc_insertion_point(class_scope:sensory.api.v1.management.RenewDeviceCredentialRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tenantid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credential_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fmanagement_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceGetWhoAmIRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:sensory.api.v1.management.DeviceGetWhoAmIRequest) */ {
 public:
  inline DeviceGetWhoAmIRequest() : DeviceGetWhoAmIRequest(nullptr) {}
  explicit constexpr DeviceGetWhoAmIRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceGetWhoAmIRequest(const DeviceGetWhoAmIRequest& from);
  DeviceGetWhoAmIRequest(DeviceGetWhoAmIRequest&& from) noexcept
    : DeviceGetWhoAmIRequest() {
    *this = ::std::move(from);
  }

  inline DeviceGetWhoAmIRequest& operator=(const DeviceGetWhoAmIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceGetWhoAmIRequest& operator=(DeviceGetWhoAmIRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceGetWhoAmIRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceGetWhoAmIRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceGetWhoAmIRequest*>(
               &_DeviceGetWhoAmIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceGetWhoAmIRequest& a, DeviceGetWhoAmIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceGetWhoAmIRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceGetWhoAmIRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceGetWhoAmIRequest* New() const final {
    return new DeviceGetWhoAmIRequest();
  }

  DeviceGetWhoAmIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceGetWhoAmIRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeviceGetWhoAmIRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeviceGetWhoAmIRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.management.DeviceGetWhoAmIRequest";
  }
  protected:
  explicit DeviceGetWhoAmIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sensory.api.v1.management.DeviceGetWhoAmIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fmanagement_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensory.api.v1.management.DeviceRequest) */ {
 public:
  inline DeviceRequest() : DeviceRequest(nullptr) {}
  ~DeviceRequest() override;
  explicit constexpr DeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceRequest(const DeviceRequest& from);
  DeviceRequest(DeviceRequest&& from) noexcept
    : DeviceRequest() {
    *this = ::std::move(from);
  }

  inline DeviceRequest& operator=(const DeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRequest& operator=(DeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceRequest*>(
               &_DeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceRequest& a, DeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceRequest* New() const final {
    return new DeviceRequest();
  }

  DeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.management.DeviceRequest";
  }
  protected:
  explicit DeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // string deviceId = 1 [(.validate.rules) = {
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_MUST_USE_RESULT std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // @@protoc_insertion_point(class_scope:sensory.api.v1.management.DeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fmanagement_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDevicesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensory.api.v1.management.GetDevicesRequest) */ {
 public:
  inline GetDevicesRequest() : GetDevicesRequest(nullptr) {}
  ~GetDevicesRequest() override;
  explicit constexpr GetDevicesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDevicesRequest(const GetDevicesRequest& from);
  GetDevicesRequest(GetDevicesRequest&& from) noexcept
    : GetDevicesRequest() {
    *this = ::std::move(from);
  }

  inline GetDevicesRequest& operator=(const GetDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDevicesRequest& operator=(GetDevicesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDevicesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDevicesRequest* internal_default_instance() {
    return reinterpret_cast<const GetDevicesRequest*>(
               &_GetDevicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetDevicesRequest& a, GetDevicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDevicesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDevicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDevicesRequest* New() const final {
    return new GetDevicesRequest();
  }

  GetDevicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDevicesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDevicesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDevicesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDevicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.management.GetDevicesRequest";
  }
  protected:
  explicit GetDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTenantIdFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kPaginationFieldNumber = 2,
  };
  // string tenantId = 1;
  void clear_tenantid();
  const std::string& tenantid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tenantid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tenantid();
  PROTOBUF_MUST_USE_RESULT std::string* release_tenantid();
  void set_allocated_tenantid(std::string* tenantid);
  private:
  const std::string& _internal_tenantid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tenantid(const std::string& value);
  std::string* _internal_mutable_tenantid();
  public:

  // string userId = 3 [(.validate.rules) = {
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_MUST_USE_RESULT std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // .sensory.api.common.PaginationOptions pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sensory::api::common::PaginationOptions& pagination() const;
  PROTOBUF_MUST_USE_RESULT ::sensory::api::common::PaginationOptions* release_pagination();
  ::sensory::api::common::PaginationOptions* mutable_pagination();
  void set_allocated_pagination(::sensory::api::common::PaginationOptions* pagination);
  private:
  const ::sensory::api::common::PaginationOptions& _internal_pagination() const;
  ::sensory::api::common::PaginationOptions* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sensory::api::common::PaginationOptions* pagination);
  ::sensory::api::common::PaginationOptions* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:sensory.api.v1.management.GetDevicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tenantid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::sensory::api::common::PaginationOptions* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fmanagement_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeviceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensory.api.v1.management.UpdateDeviceRequest) */ {
 public:
  inline UpdateDeviceRequest() : UpdateDeviceRequest(nullptr) {}
  ~UpdateDeviceRequest() override;
  explicit constexpr UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDeviceRequest(const UpdateDeviceRequest& from);
  UpdateDeviceRequest(UpdateDeviceRequest&& from) noexcept
    : UpdateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDeviceRequest& operator=(const UpdateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeviceRequest& operator=(UpdateDeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDeviceRequest*>(
               &_UpdateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateDeviceRequest& a, UpdateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeviceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeviceRequest* New() const final {
    return new UpdateDeviceRequest();
  }

  UpdateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeviceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDeviceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateDeviceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.management.UpdateDeviceRequest";
  }
  protected:
  explicit UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string deviceId = 1 [(.validate.rules) = {
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_MUST_USE_RESULT std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string name = 2 [(.validate.rules) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:sensory.api.v1.management.UpdateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fmanagement_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensory.api.v1.management.DeviceResponse) */ {
 public:
  inline DeviceResponse() : DeviceResponse(nullptr) {}
  ~DeviceResponse() override;
  explicit constexpr DeviceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceResponse(const DeviceResponse& from);
  DeviceResponse(DeviceResponse&& from) noexcept
    : DeviceResponse() {
    *this = ::std::move(from);
  }

  inline DeviceResponse& operator=(const DeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceResponse& operator=(DeviceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceResponse*>(
               &_DeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeviceResponse& a, DeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceResponse* New() const final {
    return new DeviceResponse();
  }

  DeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.management.DeviceResponse";
  }
  protected:
  explicit DeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string deviceId = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_MUST_USE_RESULT std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // @@protoc_insertion_point(class_scope:sensory.api.v1.management.DeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fmanagement_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensory.api.v1.management.GetDeviceResponse) */ {
 public:
  inline GetDeviceResponse() : GetDeviceResponse(nullptr) {}
  ~GetDeviceResponse() override;
  explicit constexpr GetDeviceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceResponse(const GetDeviceResponse& from);
  GetDeviceResponse(GetDeviceResponse&& from) noexcept
    : GetDeviceResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceResponse& operator=(const GetDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceResponse& operator=(GetDeviceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceResponse*>(
               &_GetDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetDeviceResponse& a, GetDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceResponse* New() const final {
    return new GetDeviceResponse();
  }

  GetDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDeviceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDeviceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.management.GetDeviceResponse";
  }
  protected:
  explicit GetDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kUserCountFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string deviceId = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_MUST_USE_RESULT std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // int64 userCount = 3;
  void clear_usercount();
  ::PROTOBUF_NAMESPACE_ID::int64 usercount() const;
  void set_usercount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_usercount() const;
  void _internal_set_usercount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:sensory.api.v1.management.GetDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::int64 usercount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fmanagement_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensory.api.v1.management.DeviceListResponse) */ {
 public:
  inline DeviceListResponse() : DeviceListResponse(nullptr) {}
  ~DeviceListResponse() override;
  explicit constexpr DeviceListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceListResponse(const DeviceListResponse& from);
  DeviceListResponse(DeviceListResponse&& from) noexcept
    : DeviceListResponse() {
    *this = ::std::move(from);
  }

  inline DeviceListResponse& operator=(const DeviceListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceListResponse& operator=(DeviceListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceListResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceListResponse*>(
               &_DeviceListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeviceListResponse& a, DeviceListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceListResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceListResponse* New() const final {
    return new DeviceListResponse();
  }

  DeviceListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensory.api.v1.management.DeviceListResponse";
  }
  protected:
  explicit DeviceListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .sensory.api.v1.management.DeviceResponse devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::sensory::api::v1::management::DeviceResponse* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensory::api::v1::management::DeviceResponse >*
      mutable_devices();
  private:
  const ::sensory::api::v1::management::DeviceResponse& _internal_devices(int index) const;
  ::sensory::api::v1::management::DeviceResponse* _internal_add_devices();
  public:
  const ::sensory::api::v1::management::DeviceResponse& devices(int index) const;
  ::sensory::api::v1::management::DeviceResponse* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensory::api::v1::management::DeviceResponse >&
      devices() const;

  // .sensory.api.common.PaginationResponse pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sensory::api::common::PaginationResponse& pagination() const;
  PROTOBUF_MUST_USE_RESULT ::sensory::api::common::PaginationResponse* release_pagination();
  ::sensory::api::common::PaginationResponse* mutable_pagination();
  void set_allocated_pagination(::sensory::api::common::PaginationResponse* pagination);
  private:
  const ::sensory::api::common::PaginationResponse& _internal_pagination() const;
  ::sensory::api::common::PaginationResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sensory::api::common::PaginationResponse* pagination);
  ::sensory::api::common::PaginationResponse* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:sensory.api.v1.management.DeviceListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensory::api::v1::management::DeviceResponse > devices_;
  ::sensory::api::common::PaginationResponse* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fmanagement_2fdevice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnrollDeviceRequest

// string name = 1 [(.validate.rules) = {
inline void EnrollDeviceRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& EnrollDeviceRequest::name() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.EnrollDeviceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnrollDeviceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.EnrollDeviceRequest.name)
}
inline std::string* EnrollDeviceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.EnrollDeviceRequest.name)
  return _s;
}
inline const std::string& EnrollDeviceRequest::_internal_name() const {
  return name_.Get();
}
inline void EnrollDeviceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnrollDeviceRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnrollDeviceRequest::release_name() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.EnrollDeviceRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnrollDeviceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.EnrollDeviceRequest.name)
}

// string deviceId = 2 [(.validate.rules) = {
inline void EnrollDeviceRequest::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& EnrollDeviceRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.EnrollDeviceRequest.deviceId)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnrollDeviceRequest::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.EnrollDeviceRequest.deviceId)
}
inline std::string* EnrollDeviceRequest::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.EnrollDeviceRequest.deviceId)
  return _s;
}
inline const std::string& EnrollDeviceRequest::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void EnrollDeviceRequest::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnrollDeviceRequest::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnrollDeviceRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.EnrollDeviceRequest.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnrollDeviceRequest::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.EnrollDeviceRequest.deviceId)
}

// string tenantId = 3 [(.validate.rules) = {
inline void EnrollDeviceRequest::clear_tenantid() {
  tenantid_.ClearToEmpty();
}
inline const std::string& EnrollDeviceRequest::tenantid() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.EnrollDeviceRequest.tenantId)
  return _internal_tenantid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnrollDeviceRequest::set_tenantid(ArgT0&& arg0, ArgT... args) {
 
 tenantid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.EnrollDeviceRequest.tenantId)
}
inline std::string* EnrollDeviceRequest::mutable_tenantid() {
  std::string* _s = _internal_mutable_tenantid();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.EnrollDeviceRequest.tenantId)
  return _s;
}
inline const std::string& EnrollDeviceRequest::_internal_tenantid() const {
  return tenantid_.Get();
}
inline void EnrollDeviceRequest::_internal_set_tenantid(const std::string& value) {
  
  tenantid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnrollDeviceRequest::_internal_mutable_tenantid() {
  
  return tenantid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnrollDeviceRequest::release_tenantid() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.EnrollDeviceRequest.tenantId)
  return tenantid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnrollDeviceRequest::set_allocated_tenantid(std::string* tenantid) {
  if (tenantid != nullptr) {
    
  } else {
    
  }
  tenantid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tenantid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.EnrollDeviceRequest.tenantId)
}

// .sensory.api.common.GenericClient client = 4 [(.validate.rules) = {
inline bool EnrollDeviceRequest::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool EnrollDeviceRequest::has_client() const {
  return _internal_has_client();
}
inline const ::sensory::api::common::GenericClient& EnrollDeviceRequest::_internal_client() const {
  const ::sensory::api::common::GenericClient* p = client_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensory::api::common::GenericClient&>(
      ::sensory::api::common::_GenericClient_default_instance_);
}
inline const ::sensory::api::common::GenericClient& EnrollDeviceRequest::client() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.EnrollDeviceRequest.client)
  return _internal_client();
}
inline void EnrollDeviceRequest::unsafe_arena_set_allocated_client(
    ::sensory::api::common::GenericClient* client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensory.api.v1.management.EnrollDeviceRequest.client)
}
inline ::sensory::api::common::GenericClient* EnrollDeviceRequest::release_client() {
  
  ::sensory::api::common::GenericClient* temp = client_;
  client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sensory::api::common::GenericClient* EnrollDeviceRequest::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.EnrollDeviceRequest.client)
  
  ::sensory::api::common::GenericClient* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::sensory::api::common::GenericClient* EnrollDeviceRequest::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensory::api::common::GenericClient>(GetArenaForAllocation());
    client_ = p;
  }
  return client_;
}
inline ::sensory::api::common::GenericClient* EnrollDeviceRequest::mutable_client() {
  ::sensory::api::common::GenericClient* _msg = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.EnrollDeviceRequest.client)
  return _msg;
}
inline void EnrollDeviceRequest::set_allocated_client(::sensory::api::common::GenericClient* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client));
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.EnrollDeviceRequest.client)
}

// string credential = 5;
inline void EnrollDeviceRequest::clear_credential() {
  credential_.ClearToEmpty();
}
inline const std::string& EnrollDeviceRequest::credential() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.EnrollDeviceRequest.credential)
  return _internal_credential();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnrollDeviceRequest::set_credential(ArgT0&& arg0, ArgT... args) {
 
 credential_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.EnrollDeviceRequest.credential)
}
inline std::string* EnrollDeviceRequest::mutable_credential() {
  std::string* _s = _internal_mutable_credential();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.EnrollDeviceRequest.credential)
  return _s;
}
inline const std::string& EnrollDeviceRequest::_internal_credential() const {
  return credential_.Get();
}
inline void EnrollDeviceRequest::_internal_set_credential(const std::string& value) {
  
  credential_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnrollDeviceRequest::_internal_mutable_credential() {
  
  return credential_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnrollDeviceRequest::release_credential() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.EnrollDeviceRequest.credential)
  return credential_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnrollDeviceRequest::set_allocated_credential(std::string* credential) {
  if (credential != nullptr) {
    
  } else {
    
  }
  credential_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credential,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.EnrollDeviceRequest.credential)
}

// -------------------------------------------------------------------

// RenewDeviceCredentialRequest

// string deviceId = 1 [(.validate.rules) = {
inline void RenewDeviceCredentialRequest::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& RenewDeviceCredentialRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.RenewDeviceCredentialRequest.deviceId)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenewDeviceCredentialRequest::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.RenewDeviceCredentialRequest.deviceId)
}
inline std::string* RenewDeviceCredentialRequest::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.RenewDeviceCredentialRequest.deviceId)
  return _s;
}
inline const std::string& RenewDeviceCredentialRequest::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void RenewDeviceCredentialRequest::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RenewDeviceCredentialRequest::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RenewDeviceCredentialRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.RenewDeviceCredentialRequest.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RenewDeviceCredentialRequest::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.RenewDeviceCredentialRequest.deviceId)
}

// string clientId = 2 [(.validate.rules) = {
inline void RenewDeviceCredentialRequest::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& RenewDeviceCredentialRequest::clientid() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.RenewDeviceCredentialRequest.clientId)
  return _internal_clientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenewDeviceCredentialRequest::set_clientid(ArgT0&& arg0, ArgT... args) {
 
 clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.RenewDeviceCredentialRequest.clientId)
}
inline std::string* RenewDeviceCredentialRequest::mutable_clientid() {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.RenewDeviceCredentialRequest.clientId)
  return _s;
}
inline const std::string& RenewDeviceCredentialRequest::_internal_clientid() const {
  return clientid_.Get();
}
inline void RenewDeviceCredentialRequest::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RenewDeviceCredentialRequest::_internal_mutable_clientid() {
  
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RenewDeviceCredentialRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.RenewDeviceCredentialRequest.clientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RenewDeviceCredentialRequest::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.RenewDeviceCredentialRequest.clientId)
}

// string tenantId = 3 [(.validate.rules) = {
inline void RenewDeviceCredentialRequest::clear_tenantid() {
  tenantid_.ClearToEmpty();
}
inline const std::string& RenewDeviceCredentialRequest::tenantid() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.RenewDeviceCredentialRequest.tenantId)
  return _internal_tenantid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenewDeviceCredentialRequest::set_tenantid(ArgT0&& arg0, ArgT... args) {
 
 tenantid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.RenewDeviceCredentialRequest.tenantId)
}
inline std::string* RenewDeviceCredentialRequest::mutable_tenantid() {
  std::string* _s = _internal_mutable_tenantid();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.RenewDeviceCredentialRequest.tenantId)
  return _s;
}
inline const std::string& RenewDeviceCredentialRequest::_internal_tenantid() const {
  return tenantid_.Get();
}
inline void RenewDeviceCredentialRequest::_internal_set_tenantid(const std::string& value) {
  
  tenantid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RenewDeviceCredentialRequest::_internal_mutable_tenantid() {
  
  return tenantid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RenewDeviceCredentialRequest::release_tenantid() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.RenewDeviceCredentialRequest.tenantId)
  return tenantid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RenewDeviceCredentialRequest::set_allocated_tenantid(std::string* tenantid) {
  if (tenantid != nullptr) {
    
  } else {
    
  }
  tenantid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tenantid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.RenewDeviceCredentialRequest.tenantId)
}

// string credential = 4 [(.validate.rules) = {
inline void RenewDeviceCredentialRequest::clear_credential() {
  credential_.ClearToEmpty();
}
inline const std::string& RenewDeviceCredentialRequest::credential() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.RenewDeviceCredentialRequest.credential)
  return _internal_credential();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenewDeviceCredentialRequest::set_credential(ArgT0&& arg0, ArgT... args) {
 
 credential_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.RenewDeviceCredentialRequest.credential)
}
inline std::string* RenewDeviceCredentialRequest::mutable_credential() {
  std::string* _s = _internal_mutable_credential();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.RenewDeviceCredentialRequest.credential)
  return _s;
}
inline const std::string& RenewDeviceCredentialRequest::_internal_credential() const {
  return credential_.Get();
}
inline void RenewDeviceCredentialRequest::_internal_set_credential(const std::string& value) {
  
  credential_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RenewDeviceCredentialRequest::_internal_mutable_credential() {
  
  return credential_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RenewDeviceCredentialRequest::release_credential() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.RenewDeviceCredentialRequest.credential)
  return credential_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RenewDeviceCredentialRequest::set_allocated_credential(std::string* credential) {
  if (credential != nullptr) {
    
  } else {
    
  }
  credential_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credential,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.RenewDeviceCredentialRequest.credential)
}

// -------------------------------------------------------------------

// DeviceGetWhoAmIRequest

// -------------------------------------------------------------------

// DeviceRequest

// string deviceId = 1 [(.validate.rules) = {
inline void DeviceRequest::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& DeviceRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.DeviceRequest.deviceId)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceRequest::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.DeviceRequest.deviceId)
}
inline std::string* DeviceRequest::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.DeviceRequest.deviceId)
  return _s;
}
inline const std::string& DeviceRequest::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void DeviceRequest::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceRequest::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.DeviceRequest.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceRequest::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.DeviceRequest.deviceId)
}

// -------------------------------------------------------------------

// GetDevicesRequest

// string tenantId = 1;
inline void GetDevicesRequest::clear_tenantid() {
  tenantid_.ClearToEmpty();
}
inline const std::string& GetDevicesRequest::tenantid() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.GetDevicesRequest.tenantId)
  return _internal_tenantid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDevicesRequest::set_tenantid(ArgT0&& arg0, ArgT... args) {
 
 tenantid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.GetDevicesRequest.tenantId)
}
inline std::string* GetDevicesRequest::mutable_tenantid() {
  std::string* _s = _internal_mutable_tenantid();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.GetDevicesRequest.tenantId)
  return _s;
}
inline const std::string& GetDevicesRequest::_internal_tenantid() const {
  return tenantid_.Get();
}
inline void GetDevicesRequest::_internal_set_tenantid(const std::string& value) {
  
  tenantid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDevicesRequest::_internal_mutable_tenantid() {
  
  return tenantid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDevicesRequest::release_tenantid() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.GetDevicesRequest.tenantId)
  return tenantid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDevicesRequest::set_allocated_tenantid(std::string* tenantid) {
  if (tenantid != nullptr) {
    
  } else {
    
  }
  tenantid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tenantid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.GetDevicesRequest.tenantId)
}

// .sensory.api.common.PaginationOptions pagination = 2;
inline bool GetDevicesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool GetDevicesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sensory::api::common::PaginationOptions& GetDevicesRequest::_internal_pagination() const {
  const ::sensory::api::common::PaginationOptions* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensory::api::common::PaginationOptions&>(
      ::sensory::api::common::_PaginationOptions_default_instance_);
}
inline const ::sensory::api::common::PaginationOptions& GetDevicesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.GetDevicesRequest.pagination)
  return _internal_pagination();
}
inline void GetDevicesRequest::unsafe_arena_set_allocated_pagination(
    ::sensory::api::common::PaginationOptions* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensory.api.v1.management.GetDevicesRequest.pagination)
}
inline ::sensory::api::common::PaginationOptions* GetDevicesRequest::release_pagination() {
  
  ::sensory::api::common::PaginationOptions* temp = pagination_;
  pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sensory::api::common::PaginationOptions* GetDevicesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.GetDevicesRequest.pagination)
  
  ::sensory::api::common::PaginationOptions* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::sensory::api::common::PaginationOptions* GetDevicesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensory::api::common::PaginationOptions>(GetArenaForAllocation());
    pagination_ = p;
  }
  return pagination_;
}
inline ::sensory::api::common::PaginationOptions* GetDevicesRequest::mutable_pagination() {
  ::sensory::api::common::PaginationOptions* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.GetDevicesRequest.pagination)
  return _msg;
}
inline void GetDevicesRequest::set_allocated_pagination(::sensory::api::common::PaginationOptions* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.GetDevicesRequest.pagination)
}

// string userId = 3 [(.validate.rules) = {
inline void GetDevicesRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& GetDevicesRequest::userid() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.GetDevicesRequest.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDevicesRequest::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.GetDevicesRequest.userId)
}
inline std::string* GetDevicesRequest::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.GetDevicesRequest.userId)
  return _s;
}
inline const std::string& GetDevicesRequest::_internal_userid() const {
  return userid_.Get();
}
inline void GetDevicesRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDevicesRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDevicesRequest::release_userid() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.GetDevicesRequest.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDevicesRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.GetDevicesRequest.userId)
}

// -------------------------------------------------------------------

// UpdateDeviceRequest

// string deviceId = 1 [(.validate.rules) = {
inline void UpdateDeviceRequest::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& UpdateDeviceRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.UpdateDeviceRequest.deviceId)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateDeviceRequest::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.UpdateDeviceRequest.deviceId)
}
inline std::string* UpdateDeviceRequest::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.UpdateDeviceRequest.deviceId)
  return _s;
}
inline const std::string& UpdateDeviceRequest::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void UpdateDeviceRequest::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateDeviceRequest::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateDeviceRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.UpdateDeviceRequest.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateDeviceRequest::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.UpdateDeviceRequest.deviceId)
}

// string name = 2 [(.validate.rules) = {
inline void UpdateDeviceRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdateDeviceRequest::name() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.UpdateDeviceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateDeviceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.UpdateDeviceRequest.name)
}
inline std::string* UpdateDeviceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.UpdateDeviceRequest.name)
  return _s;
}
inline const std::string& UpdateDeviceRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateDeviceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateDeviceRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateDeviceRequest::release_name() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.UpdateDeviceRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateDeviceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.UpdateDeviceRequest.name)
}

// -------------------------------------------------------------------

// DeviceResponse

// string name = 1;
inline void DeviceResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeviceResponse::name() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.DeviceResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.DeviceResponse.name)
}
inline std::string* DeviceResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.DeviceResponse.name)
  return _s;
}
inline const std::string& DeviceResponse::_internal_name() const {
  return name_.Get();
}
inline void DeviceResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceResponse::release_name() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.DeviceResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.DeviceResponse.name)
}

// string deviceId = 2;
inline void DeviceResponse::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& DeviceResponse::deviceid() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.DeviceResponse.deviceId)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceResponse::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.DeviceResponse.deviceId)
}
inline std::string* DeviceResponse::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.DeviceResponse.deviceId)
  return _s;
}
inline const std::string& DeviceResponse::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void DeviceResponse::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceResponse::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceResponse::release_deviceid() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.DeviceResponse.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceResponse::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.DeviceResponse.deviceId)
}

// -------------------------------------------------------------------

// GetDeviceResponse

// string name = 1;
inline void GetDeviceResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetDeviceResponse::name() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.GetDeviceResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDeviceResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.GetDeviceResponse.name)
}
inline std::string* GetDeviceResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.GetDeviceResponse.name)
  return _s;
}
inline const std::string& GetDeviceResponse::_internal_name() const {
  return name_.Get();
}
inline void GetDeviceResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDeviceResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDeviceResponse::release_name() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.GetDeviceResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDeviceResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.GetDeviceResponse.name)
}

// string deviceId = 2;
inline void GetDeviceResponse::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& GetDeviceResponse::deviceid() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.GetDeviceResponse.deviceId)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDeviceResponse::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.GetDeviceResponse.deviceId)
}
inline std::string* GetDeviceResponse::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.GetDeviceResponse.deviceId)
  return _s;
}
inline const std::string& GetDeviceResponse::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void GetDeviceResponse::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDeviceResponse::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDeviceResponse::release_deviceid() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.GetDeviceResponse.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDeviceResponse::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.GetDeviceResponse.deviceId)
}

// int64 userCount = 3;
inline void GetDeviceResponse::clear_usercount() {
  usercount_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDeviceResponse::_internal_usercount() const {
  return usercount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDeviceResponse::usercount() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.GetDeviceResponse.userCount)
  return _internal_usercount();
}
inline void GetDeviceResponse::_internal_set_usercount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  usercount_ = value;
}
inline void GetDeviceResponse::set_usercount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_usercount(value);
  // @@protoc_insertion_point(field_set:sensory.api.v1.management.GetDeviceResponse.userCount)
}

// -------------------------------------------------------------------

// DeviceListResponse

// repeated .sensory.api.v1.management.DeviceResponse devices = 1;
inline int DeviceListResponse::_internal_devices_size() const {
  return devices_.size();
}
inline int DeviceListResponse::devices_size() const {
  return _internal_devices_size();
}
inline void DeviceListResponse::clear_devices() {
  devices_.Clear();
}
inline ::sensory::api::v1::management::DeviceResponse* DeviceListResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.DeviceListResponse.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensory::api::v1::management::DeviceResponse >*
DeviceListResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:sensory.api.v1.management.DeviceListResponse.devices)
  return &devices_;
}
inline const ::sensory::api::v1::management::DeviceResponse& DeviceListResponse::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::sensory::api::v1::management::DeviceResponse& DeviceListResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.DeviceListResponse.devices)
  return _internal_devices(index);
}
inline ::sensory::api::v1::management::DeviceResponse* DeviceListResponse::_internal_add_devices() {
  return devices_.Add();
}
inline ::sensory::api::v1::management::DeviceResponse* DeviceListResponse::add_devices() {
  ::sensory::api::v1::management::DeviceResponse* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:sensory.api.v1.management.DeviceListResponse.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensory::api::v1::management::DeviceResponse >&
DeviceListResponse::devices() const {
  // @@protoc_insertion_point(field_list:sensory.api.v1.management.DeviceListResponse.devices)
  return devices_;
}

// .sensory.api.common.PaginationResponse pagination = 2;
inline bool DeviceListResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool DeviceListResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::sensory::api::common::PaginationResponse& DeviceListResponse::_internal_pagination() const {
  const ::sensory::api::common::PaginationResponse* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensory::api::common::PaginationResponse&>(
      ::sensory::api::common::_PaginationResponse_default_instance_);
}
inline const ::sensory::api::common::PaginationResponse& DeviceListResponse::pagination() const {
  // @@protoc_insertion_point(field_get:sensory.api.v1.management.DeviceListResponse.pagination)
  return _internal_pagination();
}
inline void DeviceListResponse::unsafe_arena_set_allocated_pagination(
    ::sensory::api::common::PaginationResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensory.api.v1.management.DeviceListResponse.pagination)
}
inline ::sensory::api::common::PaginationResponse* DeviceListResponse::release_pagination() {
  
  ::sensory::api::common::PaginationResponse* temp = pagination_;
  pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sensory::api::common::PaginationResponse* DeviceListResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sensory.api.v1.management.DeviceListResponse.pagination)
  
  ::sensory::api::common::PaginationResponse* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::sensory::api::common::PaginationResponse* DeviceListResponse::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensory::api::common::PaginationResponse>(GetArenaForAllocation());
    pagination_ = p;
  }
  return pagination_;
}
inline ::sensory::api::common::PaginationResponse* DeviceListResponse::mutable_pagination() {
  ::sensory::api::common::PaginationResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sensory.api.v1.management.DeviceListResponse.pagination)
  return _msg;
}
inline void DeviceListResponse::set_allocated_pagination(::sensory::api::common::PaginationResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.management.DeviceListResponse.pagination)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace management
}  // namespace v1
}  // namespace api
}  // namespace sensory

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_v1_2fmanagement_2fdevice_2eproto
