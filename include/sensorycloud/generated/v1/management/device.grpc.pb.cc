// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/management/device.proto

#include "v1/management/device.pb.h"
#include "v1/management/device.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sensory {
namespace api {
namespace v1 {
namespace management {

static const char* DeviceService_method_names[] = {
  "/sensory.api.v1.management.DeviceService/EnrollDevice",
  "/sensory.api.v1.management.DeviceService/RenewDeviceCredential",
  "/sensory.api.v1.management.DeviceService/GetWhoAmI",
  "/sensory.api.v1.management.DeviceService/GetDevice",
  "/sensory.api.v1.management.DeviceService/GetDevices",
  "/sensory.api.v1.management.DeviceService/UpdateDevice",
  "/sensory.api.v1.management.DeviceService/DeleteDevice",
};

std::unique_ptr< DeviceService::Stub> DeviceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceService::Stub> stub(new DeviceService::Stub(channel, options));
  return stub;
}

DeviceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_EnrollDevice_(DeviceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenewDeviceCredential_(DeviceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWhoAmI_(DeviceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevice_(DeviceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevices_(DeviceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDevice_(DeviceService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDevice_(DeviceService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceService::Stub::EnrollDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::EnrollDeviceRequest& request, ::sensory::api::v1::management::DeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::EnrollDeviceRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnrollDevice_, context, request, response);
}

void DeviceService::Stub::async::EnrollDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::EnrollDeviceRequest* request, ::sensory::api::v1::management::DeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::EnrollDeviceRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnrollDevice_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::EnrollDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::EnrollDeviceRequest* request, ::sensory::api::v1::management::DeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnrollDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceResponse>* DeviceService::Stub::PrepareAsyncEnrollDeviceRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::EnrollDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::DeviceResponse, ::sensory::api::v1::management::EnrollDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnrollDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceResponse>* DeviceService::Stub::AsyncEnrollDeviceRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::EnrollDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnrollDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::RenewDeviceCredential(::grpc::ClientContext* context, const ::sensory::api::v1::management::RenewDeviceCredentialRequest& request, ::sensory::api::v1::management::DeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::RenewDeviceCredentialRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RenewDeviceCredential_, context, request, response);
}

void DeviceService::Stub::async::RenewDeviceCredential(::grpc::ClientContext* context, const ::sensory::api::v1::management::RenewDeviceCredentialRequest* request, ::sensory::api::v1::management::DeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::RenewDeviceCredentialRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewDeviceCredential_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::RenewDeviceCredential(::grpc::ClientContext* context, const ::sensory::api::v1::management::RenewDeviceCredentialRequest* request, ::sensory::api::v1::management::DeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewDeviceCredential_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceResponse>* DeviceService::Stub::PrepareAsyncRenewDeviceCredentialRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::RenewDeviceCredentialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::DeviceResponse, ::sensory::api::v1::management::RenewDeviceCredentialRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RenewDeviceCredential_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceResponse>* DeviceService::Stub::AsyncRenewDeviceCredentialRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::RenewDeviceCredentialRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenewDeviceCredentialRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceGetWhoAmIRequest& request, ::sensory::api::v1::management::DeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::DeviceGetWhoAmIRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWhoAmI_, context, request, response);
}

void DeviceService::Stub::async::GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceGetWhoAmIRequest* request, ::sensory::api::v1::management::DeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::DeviceGetWhoAmIRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWhoAmI_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceGetWhoAmIRequest* request, ::sensory::api::v1::management::DeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWhoAmI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceResponse>* DeviceService::Stub::PrepareAsyncGetWhoAmIRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceGetWhoAmIRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::DeviceResponse, ::sensory::api::v1::management::DeviceGetWhoAmIRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWhoAmI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceResponse>* DeviceService::Stub::AsyncGetWhoAmIRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceGetWhoAmIRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWhoAmIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::GetDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceRequest& request, ::sensory::api::v1::management::GetDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::DeviceRequest, ::sensory::api::v1::management::GetDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDevice_, context, request, response);
}

void DeviceService::Stub::async::GetDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceRequest* request, ::sensory::api::v1::management::GetDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::DeviceRequest, ::sensory::api::v1::management::GetDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::GetDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceRequest* request, ::sensory::api::v1::management::GetDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetDeviceResponse>* DeviceService::Stub::PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::GetDeviceResponse, ::sensory::api::v1::management::DeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetDeviceResponse>* DeviceService::Stub::AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::GetDevices(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetDevicesRequest& request, ::sensory::api::v1::management::DeviceListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::GetDevicesRequest, ::sensory::api::v1::management::DeviceListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDevices_, context, request, response);
}

void DeviceService::Stub::async::GetDevices(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetDevicesRequest* request, ::sensory::api::v1::management::DeviceListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::GetDevicesRequest, ::sensory::api::v1::management::DeviceListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevices_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::GetDevices(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetDevicesRequest* request, ::sensory::api::v1::management::DeviceListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceListResponse>* DeviceService::Stub::PrepareAsyncGetDevicesRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::DeviceListResponse, ::sensory::api::v1::management::GetDevicesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDevices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceListResponse>* DeviceService::Stub::AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDevicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::UpdateDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::UpdateDeviceRequest& request, ::sensory::api::v1::management::DeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::UpdateDeviceRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDevice_, context, request, response);
}

void DeviceService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::UpdateDeviceRequest* request, ::sensory::api::v1::management::DeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::UpdateDeviceRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::UpdateDeviceRequest* request, ::sensory::api::v1::management::DeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceResponse>* DeviceService::Stub::PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::DeviceResponse, ::sensory::api::v1::management::UpdateDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceResponse>* DeviceService::Stub::AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::DeleteDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceRequest& request, ::sensory::api::v1::management::DeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::DeviceRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDevice_, context, request, response);
}

void DeviceService::Stub::async::DeleteDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceRequest* request, ::sensory::api::v1::management::DeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::DeviceRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDevice_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::DeleteDevice(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceRequest* request, ::sensory::api::v1::management::DeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceResponse>* DeviceService::Stub::PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::DeviceResponse, ::sensory::api::v1::management::DeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::DeviceResponse>* DeviceService::Stub::AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

DeviceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::sensory::api::v1::management::EnrollDeviceRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::EnrollDeviceRequest* req,
             ::sensory::api::v1::management::DeviceResponse* resp) {
               return service->EnrollDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::sensory::api::v1::management::RenewDeviceCredentialRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::RenewDeviceCredentialRequest* req,
             ::sensory::api::v1::management::DeviceResponse* resp) {
               return service->RenewDeviceCredential(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::sensory::api::v1::management::DeviceGetWhoAmIRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::DeviceGetWhoAmIRequest* req,
             ::sensory::api::v1::management::DeviceResponse* resp) {
               return service->GetWhoAmI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::sensory::api::v1::management::DeviceRequest, ::sensory::api::v1::management::GetDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::DeviceRequest* req,
             ::sensory::api::v1::management::GetDeviceResponse* resp) {
               return service->GetDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::sensory::api::v1::management::GetDevicesRequest, ::sensory::api::v1::management::DeviceListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::GetDevicesRequest* req,
             ::sensory::api::v1::management::DeviceListResponse* resp) {
               return service->GetDevices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::sensory::api::v1::management::UpdateDeviceRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::UpdateDeviceRequest* req,
             ::sensory::api::v1::management::DeviceResponse* resp) {
               return service->UpdateDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::sensory::api::v1::management::DeviceRequest, ::sensory::api::v1::management::DeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::DeviceRequest* req,
             ::sensory::api::v1::management::DeviceResponse* resp) {
               return service->DeleteDevice(ctx, req, resp);
             }, this)));
}

DeviceService::Service::~Service() {
}

::grpc::Status DeviceService::Service::EnrollDevice(::grpc::ServerContext* context, const ::sensory::api::v1::management::EnrollDeviceRequest* request, ::sensory::api::v1::management::DeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::RenewDeviceCredential(::grpc::ServerContext* context, const ::sensory::api::v1::management::RenewDeviceCredentialRequest* request, ::sensory::api::v1::management::DeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetWhoAmI(::grpc::ServerContext* context, const ::sensory::api::v1::management::DeviceGetWhoAmIRequest* request, ::sensory::api::v1::management::DeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetDevice(::grpc::ServerContext* context, const ::sensory::api::v1::management::DeviceRequest* request, ::sensory::api::v1::management::GetDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetDevices(::grpc::ServerContext* context, const ::sensory::api::v1::management::GetDevicesRequest* request, ::sensory::api::v1::management::DeviceListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::UpdateDevice(::grpc::ServerContext* context, const ::sensory::api::v1::management::UpdateDeviceRequest* request, ::sensory::api::v1::management::DeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::DeleteDevice(::grpc::ServerContext* context, const ::sensory::api::v1::management::DeviceRequest* request, ::sensory::api::v1::management::DeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sensory
}  // namespace api
}  // namespace v1
}  // namespace management

