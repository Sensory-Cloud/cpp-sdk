// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/management/enrollment.proto
// Original file comments:
// sensory.api.management
#ifndef GRPC_v1_2fmanagement_2fenrollment_2eproto__INCLUDED
#define GRPC_v1_2fmanagement_2fenrollment_2eproto__INCLUDED

#include "v1/management/enrollment.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sensory {
namespace api {
namespace v1 {
namespace management {

// Service to manage Enrollments in the database
class EnrollmentService final {
 public:
  static constexpr char const* service_full_name() {
    return "sensory.api.v1.management.EnrollmentService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get enrollments from the database that match the specified criteria
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::sensory::api::v1::management::GetEnrollmentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentsResponse>> AsyncGetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentsResponse>>(AsyncGetEnrollmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentsResponse>> PrepareAsyncGetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentsResponse>>(PrepareAsyncGetEnrollmentsRaw(context, request, cq));
    }
    // Get all enrollment groups that match the specified criteria
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>> AsyncGetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>>(AsyncGetEnrollmentGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>> PrepareAsyncGetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>>(PrepareAsyncGetEnrollmentGroupsRaw(context, request, cq));
    }
    // Creates a new enrollment group without any associated enrollments
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status CreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>> AsyncCreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>>(AsyncCreateEnrollmentGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>> PrepareAsyncCreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>>(PrepareAsyncCreateEnrollmentGroupRaw(context, request, cq));
    }
    // Appends an enrollment to an enrollment group
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status AppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>> AsyncAppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>>(AsyncAppendEnrollmentGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>> PrepareAsyncAppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>>(PrepareAsyncAppendEnrollmentGroupRaw(context, request, cq));
    }
    // Deletes an enrollment from the database
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    // A user may not delete their last enrollment, as this would lead to a situation where a user could
    // lock themselves out of the system forever.
    virtual ::grpc::Status DeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::sensory::api::v1::management::EnrollmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentResponse>> AsyncDeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentResponse>>(AsyncDeleteEnrollmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentResponse>> PrepareAsyncDeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentResponse>>(PrepareAsyncDeleteEnrollmentRaw(context, request, cq));
    }
    // Deletes an enrollment group from the database
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status DeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>> AsyncDeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>>(AsyncDeleteEnrollmentGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>> PrepareAsyncDeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>>(PrepareAsyncDeleteEnrollmentGroupRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get enrollments from the database that match the specified criteria
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void GetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get all enrollment groups that match the specified criteria
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void GetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a new enrollment group without any associated enrollments
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void CreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Appends an enrollment to an enrollment group
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void AppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes an enrollment from the database
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      // A user may not delete their last enrollment, as this would lead to a situation where a user could
      // lock themselves out of the system forever.
      virtual void DeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest* request, ::sensory::api::v1::management::EnrollmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest* request, ::sensory::api::v1::management::EnrollmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes an enrollment group from the database
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void DeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentsResponse>* AsyncGetEnrollmentsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentsResponse>* PrepareAsyncGetEnrollmentsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>* AsyncGetEnrollmentGroupsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>* PrepareAsyncGetEnrollmentGroupsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>* AsyncCreateEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>* PrepareAsyncCreateEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>* AsyncAppendEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>* PrepareAsyncAppendEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentResponse>* AsyncDeleteEnrollmentRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentResponse>* PrepareAsyncDeleteEnrollmentRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>* AsyncDeleteEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::management::EnrollmentGroupResponse>* PrepareAsyncDeleteEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::sensory::api::v1::management::GetEnrollmentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentsResponse>> AsyncGetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentsResponse>>(AsyncGetEnrollmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentsResponse>> PrepareAsyncGetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentsResponse>>(PrepareAsyncGetEnrollmentsRaw(context, request, cq));
    }
    ::grpc::Status GetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>> AsyncGetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>>(AsyncGetEnrollmentGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>> PrepareAsyncGetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>>(PrepareAsyncGetEnrollmentGroupsRaw(context, request, cq));
    }
    ::grpc::Status CreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>> AsyncCreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>>(AsyncCreateEnrollmentGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>> PrepareAsyncCreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>>(PrepareAsyncCreateEnrollmentGroupRaw(context, request, cq));
    }
    ::grpc::Status AppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>> AsyncAppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>>(AsyncAppendEnrollmentGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>> PrepareAsyncAppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>>(PrepareAsyncAppendEnrollmentGroupRaw(context, request, cq));
    }
    ::grpc::Status DeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::sensory::api::v1::management::EnrollmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentResponse>> AsyncDeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentResponse>>(AsyncDeleteEnrollmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentResponse>> PrepareAsyncDeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentResponse>>(PrepareAsyncDeleteEnrollmentRaw(context, request, cq));
    }
    ::grpc::Status DeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>> AsyncDeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>>(AsyncDeleteEnrollmentGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>> PrepareAsyncDeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>>(PrepareAsyncDeleteEnrollmentGroupRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, std::function<void(::grpc::Status)>) override;
      void AppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest* request, ::sensory::api::v1::management::EnrollmentResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest* request, ::sensory::api::v1::management::EnrollmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentsResponse>* AsyncGetEnrollmentsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentsResponse>* PrepareAsyncGetEnrollmentsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>* AsyncGetEnrollmentGroupsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>* PrepareAsyncGetEnrollmentGroupsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* AsyncCreateEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* PrepareAsyncCreateEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* AsyncAppendEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* PrepareAsyncAppendEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentResponse>* AsyncDeleteEnrollmentRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentResponse>* PrepareAsyncDeleteEnrollmentRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* AsyncDeleteEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* PrepareAsyncDeleteEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetEnrollments_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEnrollmentGroups_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateEnrollmentGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_AppendEnrollmentGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteEnrollment_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteEnrollmentGroup_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get enrollments from the database that match the specified criteria
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetEnrollments(::grpc::ServerContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentsResponse* response);
    // Get all enrollment groups that match the specified criteria
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetEnrollmentGroups(::grpc::ServerContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response);
    // Creates a new enrollment group without any associated enrollments
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status CreateEnrollmentGroup(::grpc::ServerContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response);
    // Appends an enrollment to an enrollment group
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status AppendEnrollmentGroup(::grpc::ServerContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response);
    // Deletes an enrollment from the database
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    // A user may not delete their last enrollment, as this would lead to a situation where a user could
    // lock themselves out of the system forever.
    virtual ::grpc::Status DeleteEnrollment(::grpc::ServerContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest* request, ::sensory::api::v1::management::EnrollmentResponse* response);
    // Deletes an enrollment group from the database
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status DeleteEnrollmentGroup(::grpc::ServerContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEnrollments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEnrollments() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetEnrollments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnrollments(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnrollments(::grpc::ServerContext* context, ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::management::GetEnrollmentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEnrollmentGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEnrollmentGroups() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetEnrollmentGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnrollmentGroups(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnrollmentGroups(::grpc::ServerContext* context, ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateEnrollmentGroup() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEnrollmentGroup(::grpc::ServerContext* context, ::sensory::api::v1::management::CreateEnrollmentGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::management::EnrollmentGroupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AppendEnrollmentGroup() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AppendEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEnrollmentGroup(::grpc::ServerContext* context, ::sensory::api::v1::management::AppendEnrollmentGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::management::EnrollmentGroupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteEnrollment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteEnrollment() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteEnrollment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnrollment(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentRequest* /*request*/, ::sensory::api::v1::management::EnrollmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEnrollment(::grpc::ServerContext* context, ::sensory::api::v1::management::DeleteEnrollmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::management::EnrollmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteEnrollmentGroup() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEnrollmentGroup(::grpc::ServerContext* context, ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::management::EnrollmentGroupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetEnrollments<WithAsyncMethod_GetEnrollmentGroups<WithAsyncMethod_CreateEnrollmentGroup<WithAsyncMethod_AppendEnrollmentGroup<WithAsyncMethod_DeleteEnrollment<WithAsyncMethod_DeleteEnrollmentGroup<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetEnrollments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEnrollments() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentsResponse* response) { return this->GetEnrollments(context, request, response); }));}
    void SetMessageAllocatorFor_GetEnrollments(
        ::grpc::MessageAllocator< ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEnrollments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnrollments(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEnrollments(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEnrollmentGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEnrollmentGroups() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentGroupsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response) { return this->GetEnrollmentGroups(context, request, response); }));}
    void SetMessageAllocatorFor_GetEnrollmentGroups(
        ::grpc::MessageAllocator< ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentGroupsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentGroupsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEnrollmentGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnrollmentGroups(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEnrollmentGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateEnrollmentGroup() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::CreateEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) { return this->CreateEnrollmentGroup(context, request, response); }));}
    void SetMessageAllocatorFor_CreateEnrollmentGroup(
        ::grpc::MessageAllocator< ::sensory::api::v1::management::CreateEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::CreateEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateEnrollmentGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AppendEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AppendEnrollmentGroup() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::AppendEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) { return this->AppendEnrollmentGroup(context, request, response); }));}
    void SetMessageAllocatorFor_AppendEnrollmentGroup(
        ::grpc::MessageAllocator< ::sensory::api::v1::management::AppendEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::AppendEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AppendEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppendEnrollmentGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteEnrollment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteEnrollment() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::DeleteEnrollmentRequest, ::sensory::api::v1::management::EnrollmentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest* request, ::sensory::api::v1::management::EnrollmentResponse* response) { return this->DeleteEnrollment(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteEnrollment(
        ::grpc::MessageAllocator< ::sensory::api::v1::management::DeleteEnrollmentRequest, ::sensory::api::v1::management::EnrollmentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::DeleteEnrollmentRequest, ::sensory::api::v1::management::EnrollmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteEnrollment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnrollment(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentRequest* /*request*/, ::sensory::api::v1::management::EnrollmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteEnrollment(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentRequest* /*request*/, ::sensory::api::v1::management::EnrollmentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteEnrollmentGroup() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::DeleteEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) { return this->DeleteEnrollmentGroup(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteEnrollmentGroup(
        ::grpc::MessageAllocator< ::sensory::api::v1::management::DeleteEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::management::DeleteEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteEnrollmentGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetEnrollments<WithCallbackMethod_GetEnrollmentGroups<WithCallbackMethod_CreateEnrollmentGroup<WithCallbackMethod_AppendEnrollmentGroup<WithCallbackMethod_DeleteEnrollment<WithCallbackMethod_DeleteEnrollmentGroup<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetEnrollments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEnrollments() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetEnrollments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnrollments(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEnrollmentGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEnrollmentGroups() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetEnrollmentGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnrollmentGroups(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateEnrollmentGroup() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AppendEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AppendEnrollmentGroup() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AppendEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteEnrollment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteEnrollment() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteEnrollment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnrollment(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentRequest* /*request*/, ::sensory::api::v1::management::EnrollmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteEnrollmentGroup() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEnrollments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEnrollments() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetEnrollments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnrollments(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnrollments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEnrollmentGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEnrollmentGroups() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetEnrollmentGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnrollmentGroups(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnrollmentGroups(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateEnrollmentGroup() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEnrollmentGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppendEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AppendEnrollmentGroup() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AppendEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEnrollmentGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteEnrollment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteEnrollment() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteEnrollment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnrollment(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentRequest* /*request*/, ::sensory::api::v1::management::EnrollmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEnrollment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteEnrollmentGroup() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEnrollmentGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEnrollments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEnrollments() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEnrollments(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEnrollments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnrollments(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEnrollments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEnrollmentGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEnrollmentGroups() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEnrollmentGroups(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEnrollmentGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnrollmentGroups(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEnrollmentGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateEnrollmentGroup() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateEnrollmentGroup(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateEnrollmentGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AppendEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AppendEnrollmentGroup() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AppendEnrollmentGroup(context, request, response); }));
    }
    ~WithRawCallbackMethod_AppendEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppendEnrollmentGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteEnrollment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteEnrollment() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteEnrollment(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteEnrollment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnrollment(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentRequest* /*request*/, ::sensory::api::v1::management::EnrollmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteEnrollment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteEnrollmentGroup() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteEnrollmentGroup(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteEnrollmentGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEnrollments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEnrollments() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentsResponse>* streamer) {
                       return this->StreamedGetEnrollments(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEnrollments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEnrollments(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEnrollments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::management::GetEnrollmentsRequest,::sensory::api::v1::management::GetEnrollmentsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEnrollmentGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEnrollmentGroups() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentGroupsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentGroupsResponse>* streamer) {
                       return this->StreamedGetEnrollmentGroups(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEnrollmentGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEnrollmentGroups(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::GetEnrollmentsRequest* /*request*/, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEnrollmentGroups(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::management::GetEnrollmentsRequest,::sensory::api::v1::management::GetEnrollmentGroupsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateEnrollmentGroup() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::management::CreateEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::management::CreateEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>* streamer) {
                       return this->StreamedCreateEnrollmentGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateEnrollmentGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::management::CreateEnrollmentGroupRequest,::sensory::api::v1::management::EnrollmentGroupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppendEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AppendEnrollmentGroup() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::management::AppendEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::management::AppendEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>* streamer) {
                       return this->StreamedAppendEnrollmentGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AppendEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppendEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendEnrollmentGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::management::AppendEnrollmentGroupRequest,::sensory::api::v1::management::EnrollmentGroupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteEnrollment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteEnrollment() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::management::DeleteEnrollmentRequest, ::sensory::api::v1::management::EnrollmentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::management::DeleteEnrollmentRequest, ::sensory::api::v1::management::EnrollmentResponse>* streamer) {
                       return this->StreamedDeleteEnrollment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteEnrollment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteEnrollment(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentRequest* /*request*/, ::sensory::api::v1::management::EnrollmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteEnrollment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::management::DeleteEnrollmentRequest,::sensory::api::v1::management::EnrollmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteEnrollmentGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteEnrollmentGroup() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::management::DeleteEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::management::DeleteEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse>* streamer) {
                       return this->StreamedDeleteEnrollmentGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteEnrollmentGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteEnrollmentGroup(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* /*request*/, ::sensory::api::v1::management::EnrollmentGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteEnrollmentGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::management::DeleteEnrollmentGroupRequest,::sensory::api::v1::management::EnrollmentGroupResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetEnrollments<WithStreamedUnaryMethod_GetEnrollmentGroups<WithStreamedUnaryMethod_CreateEnrollmentGroup<WithStreamedUnaryMethod_AppendEnrollmentGroup<WithStreamedUnaryMethod_DeleteEnrollment<WithStreamedUnaryMethod_DeleteEnrollmentGroup<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetEnrollments<WithStreamedUnaryMethod_GetEnrollmentGroups<WithStreamedUnaryMethod_CreateEnrollmentGroup<WithStreamedUnaryMethod_AppendEnrollmentGroup<WithStreamedUnaryMethod_DeleteEnrollment<WithStreamedUnaryMethod_DeleteEnrollmentGroup<Service > > > > > > StreamedService;
};

}  // namespace management
}  // namespace v1
}  // namespace api
}  // namespace sensory


#endif  // GRPC_v1_2fmanagement_2fenrollment_2eproto__INCLUDED
