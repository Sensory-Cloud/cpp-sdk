// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/event/event.proto
// Original file comments:
// sensory.api.event
#ifndef GRPC_v1_2fevent_2fevent_2eproto__INCLUDED
#define GRPC_v1_2fevent_2fevent_2eproto__INCLUDED

#include "v1/event/event.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sensory {
namespace api {
namespace v1 {
namespace event {

// Service to publish events to the cloud
class EventService final {
 public:
  static constexpr char const* service_full_name() {
    return "sensory.api.v1.event.EventService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Publishes a list of usage event to the cloud
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status PublishUsageEvents(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest& request, ::sensory::api::v1::event::PublishUsageEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::PublishUsageEventsResponse>> AsyncPublishUsageEvents(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::PublishUsageEventsResponse>>(AsyncPublishUsageEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::PublishUsageEventsResponse>> PrepareAsyncPublishUsageEvents(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::PublishUsageEventsResponse>>(PrepareAsyncPublishUsageEventsRaw(context, request, cq));
    }
    // Obtains a list of events given the filter criteria
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetUsageEventList(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::sensory::api::v1::event::UsageEventListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventListResponse>> AsyncGetUsageEventList(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventListResponse>>(AsyncGetUsageEventListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventListResponse>> PrepareAsyncGetUsageEventList(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventListResponse>>(PrepareAsyncGetUsageEventListRaw(context, request, cq));
    }
    // Obtains a summary of events given the filter critieria
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetUsageEventSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::sensory::api::v1::event::UsageEventSummary* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>> AsyncGetUsageEventSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>>(AsyncGetUsageEventSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>> PrepareAsyncGetUsageEventSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>>(PrepareAsyncGetUsageEventSummaryRaw(context, request, cq));
    }
    // Obtains a usage summary of events across all specified tenants
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetGlobalUsageSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest& request, ::sensory::api::v1::event::UsageEventSummary* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>> AsyncGetGlobalUsageSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>>(AsyncGetGlobalUsageSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>> PrepareAsyncGetGlobalUsageSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>>(PrepareAsyncGetGlobalUsageSummaryRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Publishes a list of usage event to the cloud
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void PublishUsageEvents(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest* request, ::sensory::api::v1::event::PublishUsageEventsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PublishUsageEvents(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest* request, ::sensory::api::v1::event::PublishUsageEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Obtains a list of events given the filter criteria
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void GetUsageEventList(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUsageEventList(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Obtains a summary of events given the filter critieria
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void GetUsageEventSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventSummary* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUsageEventSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventSummary* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Obtains a usage summary of events across all specified tenants
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void GetGlobalUsageSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest* request, ::sensory::api::v1::event::UsageEventSummary* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGlobalUsageSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest* request, ::sensory::api::v1::event::UsageEventSummary* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::PublishUsageEventsResponse>* AsyncPublishUsageEventsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::PublishUsageEventsResponse>* PrepareAsyncPublishUsageEventsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventListResponse>* AsyncGetUsageEventListRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventListResponse>* PrepareAsyncGetUsageEventListRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>* AsyncGetUsageEventSummaryRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>* PrepareAsyncGetUsageEventSummaryRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>* AsyncGetGlobalUsageSummaryRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::event::UsageEventSummary>* PrepareAsyncGetGlobalUsageSummaryRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PublishUsageEvents(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest& request, ::sensory::api::v1::event::PublishUsageEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::PublishUsageEventsResponse>> AsyncPublishUsageEvents(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::PublishUsageEventsResponse>>(AsyncPublishUsageEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::PublishUsageEventsResponse>> PrepareAsyncPublishUsageEvents(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::PublishUsageEventsResponse>>(PrepareAsyncPublishUsageEventsRaw(context, request, cq));
    }
    ::grpc::Status GetUsageEventList(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::sensory::api::v1::event::UsageEventListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventListResponse>> AsyncGetUsageEventList(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventListResponse>>(AsyncGetUsageEventListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventListResponse>> PrepareAsyncGetUsageEventList(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventListResponse>>(PrepareAsyncGetUsageEventListRaw(context, request, cq));
    }
    ::grpc::Status GetUsageEventSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::sensory::api::v1::event::UsageEventSummary* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>> AsyncGetUsageEventSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>>(AsyncGetUsageEventSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>> PrepareAsyncGetUsageEventSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>>(PrepareAsyncGetUsageEventSummaryRaw(context, request, cq));
    }
    ::grpc::Status GetGlobalUsageSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest& request, ::sensory::api::v1::event::UsageEventSummary* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>> AsyncGetGlobalUsageSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>>(AsyncGetGlobalUsageSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>> PrepareAsyncGetGlobalUsageSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>>(PrepareAsyncGetGlobalUsageSummaryRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PublishUsageEvents(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest* request, ::sensory::api::v1::event::PublishUsageEventsResponse* response, std::function<void(::grpc::Status)>) override;
      void PublishUsageEvents(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest* request, ::sensory::api::v1::event::PublishUsageEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUsageEventList(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUsageEventList(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUsageEventSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventSummary* response, std::function<void(::grpc::Status)>) override;
      void GetUsageEventSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventSummary* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetGlobalUsageSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest* request, ::sensory::api::v1::event::UsageEventSummary* response, std::function<void(::grpc::Status)>) override;
      void GetGlobalUsageSummary(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest* request, ::sensory::api::v1::event::UsageEventSummary* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::PublishUsageEventsResponse>* AsyncPublishUsageEventsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::PublishUsageEventsResponse>* PrepareAsyncPublishUsageEventsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventListResponse>* AsyncGetUsageEventListRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventListResponse>* PrepareAsyncGetUsageEventListRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>* AsyncGetUsageEventSummaryRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>* PrepareAsyncGetUsageEventSummaryRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::UsageEventListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>* AsyncGetGlobalUsageSummaryRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::event::UsageEventSummary>* PrepareAsyncGetGlobalUsageSummaryRaw(::grpc::ClientContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PublishUsageEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUsageEventList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUsageEventSummary_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGlobalUsageSummary_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Publishes a list of usage event to the cloud
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status PublishUsageEvents(::grpc::ServerContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest* request, ::sensory::api::v1::event::PublishUsageEventsResponse* response);
    // Obtains a list of events given the filter criteria
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetUsageEventList(::grpc::ServerContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventListResponse* response);
    // Obtains a summary of events given the filter critieria
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetUsageEventSummary(::grpc::ServerContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventSummary* response);
    // Obtains a usage summary of events across all specified tenants
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetGlobalUsageSummary(::grpc::ServerContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest* request, ::sensory::api::v1::event::UsageEventSummary* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PublishUsageEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PublishUsageEvents() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PublishUsageEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishUsageEvents(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::PublishUsageEventsRequest* /*request*/, ::sensory::api::v1::event::PublishUsageEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishUsageEvents(::grpc::ServerContext* context, ::sensory::api::v1::event::PublishUsageEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::event::PublishUsageEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUsageEventList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUsageEventList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetUsageEventList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsageEventList(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsageEventList(::grpc::ServerContext* context, ::sensory::api::v1::event::UsageEventListRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::event::UsageEventListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUsageEventSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUsageEventSummary() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetUsageEventSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsageEventSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsageEventSummary(::grpc::ServerContext* context, ::sensory::api::v1::event::UsageEventListRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::event::UsageEventSummary>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGlobalUsageSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGlobalUsageSummary() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetGlobalUsageSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGlobalUsageSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::GlobalEventSummaryRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGlobalUsageSummary(::grpc::ServerContext* context, ::sensory::api::v1::event::GlobalEventSummaryRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::event::UsageEventSummary>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PublishUsageEvents<WithAsyncMethod_GetUsageEventList<WithAsyncMethod_GetUsageEventSummary<WithAsyncMethod_GetGlobalUsageSummary<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PublishUsageEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PublishUsageEvents() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::event::PublishUsageEventsRequest, ::sensory::api::v1::event::PublishUsageEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::event::PublishUsageEventsRequest* request, ::sensory::api::v1::event::PublishUsageEventsResponse* response) { return this->PublishUsageEvents(context, request, response); }));}
    void SetMessageAllocatorFor_PublishUsageEvents(
        ::grpc::MessageAllocator< ::sensory::api::v1::event::PublishUsageEventsRequest, ::sensory::api::v1::event::PublishUsageEventsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::event::PublishUsageEventsRequest, ::sensory::api::v1::event::PublishUsageEventsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PublishUsageEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishUsageEvents(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::PublishUsageEventsRequest* /*request*/, ::sensory::api::v1::event::PublishUsageEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishUsageEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::event::PublishUsageEventsRequest* /*request*/, ::sensory::api::v1::event::PublishUsageEventsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUsageEventList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUsageEventList() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::event::UsageEventListRequest, ::sensory::api::v1::event::UsageEventListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventListResponse* response) { return this->GetUsageEventList(context, request, response); }));}
    void SetMessageAllocatorFor_GetUsageEventList(
        ::grpc::MessageAllocator< ::sensory::api::v1::event::UsageEventListRequest, ::sensory::api::v1::event::UsageEventListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::event::UsageEventListRequest, ::sensory::api::v1::event::UsageEventListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUsageEventList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsageEventList(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUsageEventList(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUsageEventSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUsageEventSummary() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::event::UsageEventListRequest, ::sensory::api::v1::event::UsageEventSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::event::UsageEventListRequest* request, ::sensory::api::v1::event::UsageEventSummary* response) { return this->GetUsageEventSummary(context, request, response); }));}
    void SetMessageAllocatorFor_GetUsageEventSummary(
        ::grpc::MessageAllocator< ::sensory::api::v1::event::UsageEventListRequest, ::sensory::api::v1::event::UsageEventSummary>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::event::UsageEventListRequest, ::sensory::api::v1::event::UsageEventSummary>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUsageEventSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsageEventSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUsageEventSummary(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetGlobalUsageSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetGlobalUsageSummary() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::event::GlobalEventSummaryRequest, ::sensory::api::v1::event::UsageEventSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::event::GlobalEventSummaryRequest* request, ::sensory::api::v1::event::UsageEventSummary* response) { return this->GetGlobalUsageSummary(context, request, response); }));}
    void SetMessageAllocatorFor_GetGlobalUsageSummary(
        ::grpc::MessageAllocator< ::sensory::api::v1::event::GlobalEventSummaryRequest, ::sensory::api::v1::event::UsageEventSummary>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::event::GlobalEventSummaryRequest, ::sensory::api::v1::event::UsageEventSummary>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetGlobalUsageSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGlobalUsageSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::GlobalEventSummaryRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGlobalUsageSummary(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::event::GlobalEventSummaryRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PublishUsageEvents<WithCallbackMethod_GetUsageEventList<WithCallbackMethod_GetUsageEventSummary<WithCallbackMethod_GetGlobalUsageSummary<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PublishUsageEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PublishUsageEvents() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PublishUsageEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishUsageEvents(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::PublishUsageEventsRequest* /*request*/, ::sensory::api::v1::event::PublishUsageEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUsageEventList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUsageEventList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetUsageEventList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsageEventList(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUsageEventSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUsageEventSummary() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetUsageEventSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsageEventSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGlobalUsageSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGlobalUsageSummary() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetGlobalUsageSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGlobalUsageSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::GlobalEventSummaryRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PublishUsageEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PublishUsageEvents() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PublishUsageEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishUsageEvents(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::PublishUsageEventsRequest* /*request*/, ::sensory::api::v1::event::PublishUsageEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishUsageEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUsageEventList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUsageEventList() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetUsageEventList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsageEventList(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsageEventList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUsageEventSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUsageEventSummary() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetUsageEventSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsageEventSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsageEventSummary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGlobalUsageSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGlobalUsageSummary() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetGlobalUsageSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGlobalUsageSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::GlobalEventSummaryRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGlobalUsageSummary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PublishUsageEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PublishUsageEvents() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PublishUsageEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_PublishUsageEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishUsageEvents(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::PublishUsageEventsRequest* /*request*/, ::sensory::api::v1::event::PublishUsageEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishUsageEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUsageEventList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUsageEventList() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUsageEventList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUsageEventList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsageEventList(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUsageEventList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUsageEventSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUsageEventSummary() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUsageEventSummary(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUsageEventSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsageEventSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUsageEventSummary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetGlobalUsageSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetGlobalUsageSummary() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGlobalUsageSummary(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetGlobalUsageSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGlobalUsageSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::GlobalEventSummaryRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGlobalUsageSummary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PublishUsageEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PublishUsageEvents() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::event::PublishUsageEventsRequest, ::sensory::api::v1::event::PublishUsageEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::event::PublishUsageEventsRequest, ::sensory::api::v1::event::PublishUsageEventsResponse>* streamer) {
                       return this->StreamedPublishUsageEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PublishUsageEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PublishUsageEvents(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::PublishUsageEventsRequest* /*request*/, ::sensory::api::v1::event::PublishUsageEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublishUsageEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::event::PublishUsageEventsRequest,::sensory::api::v1::event::PublishUsageEventsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUsageEventList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUsageEventList() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::event::UsageEventListRequest, ::sensory::api::v1::event::UsageEventListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::event::UsageEventListRequest, ::sensory::api::v1::event::UsageEventListResponse>* streamer) {
                       return this->StreamedGetUsageEventList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUsageEventList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUsageEventList(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUsageEventList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::event::UsageEventListRequest,::sensory::api::v1::event::UsageEventListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUsageEventSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUsageEventSummary() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::event::UsageEventListRequest, ::sensory::api::v1::event::UsageEventSummary>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::event::UsageEventListRequest, ::sensory::api::v1::event::UsageEventSummary>* streamer) {
                       return this->StreamedGetUsageEventSummary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUsageEventSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUsageEventSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::UsageEventListRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUsageEventSummary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::event::UsageEventListRequest,::sensory::api::v1::event::UsageEventSummary>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGlobalUsageSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGlobalUsageSummary() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::event::GlobalEventSummaryRequest, ::sensory::api::v1::event::UsageEventSummary>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::event::GlobalEventSummaryRequest, ::sensory::api::v1::event::UsageEventSummary>* streamer) {
                       return this->StreamedGetGlobalUsageSummary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGlobalUsageSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGlobalUsageSummary(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::event::GlobalEventSummaryRequest* /*request*/, ::sensory::api::v1::event::UsageEventSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGlobalUsageSummary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::event::GlobalEventSummaryRequest,::sensory::api::v1::event::UsageEventSummary>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PublishUsageEvents<WithStreamedUnaryMethod_GetUsageEventList<WithStreamedUnaryMethod_GetUsageEventSummary<WithStreamedUnaryMethod_GetGlobalUsageSummary<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PublishUsageEvents<WithStreamedUnaryMethod_GetUsageEventList<WithStreamedUnaryMethod_GetUsageEventSummary<WithStreamedUnaryMethod_GetGlobalUsageSummary<Service > > > > StreamedService;
};

}  // namespace event
}  // namespace v1
}  // namespace api
}  // namespace sensory


#endif  // GRPC_v1_2fevent_2fevent_2eproto__INCLUDED
