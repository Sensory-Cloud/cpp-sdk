// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/file/file.proto
// Original file comments:
// sensory.api.file
#ifndef GRPC_v1_2ffile_2ffile_2eproto__INCLUDED
#define GRPC_v1_2ffile_2ffile_2eproto__INCLUDED

#include "v1/file/file.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sensory {
namespace api {
namespace v1 {
namespace file {

// Handles all file-related functions
class File final {
 public:
  static constexpr char const* service_full_name() {
    return "sensory.api.v1.file.File";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Allows a client to request information about a file in the cloud.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::sensory::api::v1::file::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileInfo>> AsyncGetInfo(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileInfo>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileInfo>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileInfo>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    // Allows a client to request a list of all the files it is allowed to access
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest& request, ::sensory::api::v1::file::FileCatalogResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>> AsyncGetCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>>(AsyncGetCatalogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>> PrepareAsyncGetCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>>(PrepareAsyncGetCatalogRaw(context, request, cq));
    }
    // Allows a root client to request the full list of files
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetCompleteCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest& request, ::sensory::api::v1::file::FileCatalogResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>> AsyncGetCompleteCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>>(AsyncGetCompleteCatalogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>> PrepareAsyncGetCompleteCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>>(PrepareAsyncGetCompleteCatalogRaw(context, request, cq));
    }
    // Allows a client to request a file from the cloud.
    // Download streams a FileResponse until the entire file is downloaded
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sensory::api::v1::file::FileResponse>> Download(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sensory::api::v1::file::FileResponse>>(DownloadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensory::api::v1::file::FileResponse>> AsyncDownload(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensory::api::v1::file::FileResponse>>(AsyncDownloadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensory::api::v1::file::FileResponse>> PrepareAsyncDownload(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensory::api::v1::file::FileResponse>>(PrepareAsyncDownloadRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Allows a client to request information about a file in the cloud.
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void GetInfo(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest* request, ::sensory::api::v1::file::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInfo(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest* request, ::sensory::api::v1::file::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Allows a client to request a list of all the files it is allowed to access
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void GetCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Allows a root client to request the full list of files
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void GetCompleteCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCompleteCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Allows a client to request a file from the cloud.
      // Download streams a FileResponse until the entire file is downloaded
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void Download(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest* request, ::grpc::ClientReadReactor< ::sensory::api::v1::file::FileResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileInfo>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileInfo>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>* AsyncGetCatalogRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>* PrepareAsyncGetCatalogRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>* AsyncGetCompleteCatalogRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::v1::file::FileCatalogResponse>* PrepareAsyncGetCompleteCatalogRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::sensory::api::v1::file::FileResponse>* DownloadRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sensory::api::v1::file::FileResponse>* AsyncDownloadRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sensory::api::v1::file::FileResponse>* PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::sensory::api::v1::file::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileInfo>> AsyncGetInfo(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileInfo>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileInfo>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileInfo>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    ::grpc::Status GetCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest& request, ::sensory::api::v1::file::FileCatalogResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>> AsyncGetCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>>(AsyncGetCatalogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>> PrepareAsyncGetCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>>(PrepareAsyncGetCatalogRaw(context, request, cq));
    }
    ::grpc::Status GetCompleteCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest& request, ::sensory::api::v1::file::FileCatalogResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>> AsyncGetCompleteCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>>(AsyncGetCompleteCatalogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>> PrepareAsyncGetCompleteCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>>(PrepareAsyncGetCompleteCatalogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::sensory::api::v1::file::FileResponse>> Download(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sensory::api::v1::file::FileResponse>>(DownloadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sensory::api::v1::file::FileResponse>> AsyncDownload(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sensory::api::v1::file::FileResponse>>(AsyncDownloadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sensory::api::v1::file::FileResponse>> PrepareAsyncDownload(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sensory::api::v1::file::FileResponse>>(PrepareAsyncDownloadRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetInfo(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest* request, ::sensory::api::v1::file::FileInfo* response, std::function<void(::grpc::Status)>) override;
      void GetInfo(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest* request, ::sensory::api::v1::file::FileInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCompleteCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCompleteCatalog(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Download(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest* request, ::grpc::ClientReadReactor< ::sensory::api::v1::file::FileResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileInfo>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileInfo>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>* AsyncGetCatalogRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>* PrepareAsyncGetCatalogRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCatalogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>* AsyncGetCompleteCatalogRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::v1::file::FileCatalogResponse>* PrepareAsyncGetCompleteCatalogRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::sensory::api::v1::file::FileResponse>* DownloadRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request) override;
    ::grpc::ClientAsyncReader< ::sensory::api::v1::file::FileResponse>* AsyncDownloadRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sensory::api::v1::file::FileResponse>* PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::sensory::api::v1::file::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCatalog_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCompleteCatalog_;
    const ::grpc::internal::RpcMethod rpcmethod_Download_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Allows a client to request information about a file in the cloud.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetInfo(::grpc::ServerContext* context, const ::sensory::api::v1::file::FileRequest* request, ::sensory::api::v1::file::FileInfo* response);
    // Allows a client to request a list of all the files it is allowed to access
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetCatalog(::grpc::ServerContext* context, const ::sensory::api::v1::file::FileCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response);
    // Allows a root client to request the full list of files
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetCompleteCatalog(::grpc::ServerContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response);
    // Allows a client to request a file from the cloud.
    // Download streams a FileResponse until the entire file is downloaded
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status Download(::grpc::ServerContext* context, const ::sensory::api::v1::file::FileRequest* request, ::grpc::ServerWriter< ::sensory::api::v1::file::FileResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::sensory::api::v1::file::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::sensory::api::v1::file::FileRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::file::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCatalog() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCatalog(::grpc::ServerContext* context, ::sensory::api::v1::file::FileCatalogRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::file::FileCatalogResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCompleteCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCompleteCatalog() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCompleteCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompleteCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCompleteCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCompleteCatalog(::grpc::ServerContext* context, ::sensory::api::v1::file::FileCompleteCatalogRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::v1::file::FileCatalogResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Download() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::grpc::ServerWriter< ::sensory::api::v1::file::FileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownload(::grpc::ServerContext* context, ::sensory::api::v1::file::FileRequest* request, ::grpc::ServerAsyncWriter< ::sensory::api::v1::file::FileResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetInfo<WithAsyncMethod_GetCatalog<WithAsyncMethod_GetCompleteCatalog<WithAsyncMethod_Download<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::file::FileRequest, ::sensory::api::v1::file::FileInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::file::FileRequest* request, ::sensory::api::v1::file::FileInfo* response) { return this->GetInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetInfo(
        ::grpc::MessageAllocator< ::sensory::api::v1::file::FileRequest, ::sensory::api::v1::file::FileInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::file::FileRequest, ::sensory::api::v1::file::FileInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::sensory::api::v1::file::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::sensory::api::v1::file::FileInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCatalog() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::file::FileCatalogRequest, ::sensory::api::v1::file::FileCatalogResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::file::FileCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response) { return this->GetCatalog(context, request, response); }));}
    void SetMessageAllocatorFor_GetCatalog(
        ::grpc::MessageAllocator< ::sensory::api::v1::file::FileCatalogRequest, ::sensory::api::v1::file::FileCatalogResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::file::FileCatalogRequest, ::sensory::api::v1::file::FileCatalogResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCatalog(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::file::FileCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCompleteCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCompleteCatalog() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::file::FileCompleteCatalogRequest, ::sensory::api::v1::file::FileCatalogResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::file::FileCompleteCatalogRequest* request, ::sensory::api::v1::file::FileCatalogResponse* response) { return this->GetCompleteCatalog(context, request, response); }));}
    void SetMessageAllocatorFor_GetCompleteCatalog(
        ::grpc::MessageAllocator< ::sensory::api::v1::file::FileCompleteCatalogRequest, ::sensory::api::v1::file::FileCatalogResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::v1::file::FileCompleteCatalogRequest, ::sensory::api::v1::file::FileCatalogResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCompleteCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompleteCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCompleteCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCompleteCatalog(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::file::FileCompleteCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Download() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::sensory::api::v1::file::FileRequest, ::sensory::api::v1::file::FileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::v1::file::FileRequest* request) { return this->Download(context, request); }));
    }
    ~WithCallbackMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::grpc::ServerWriter< ::sensory::api::v1::file::FileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::sensory::api::v1::file::FileResponse>* Download(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetInfo<WithCallbackMethod_GetCatalog<WithCallbackMethod_GetCompleteCatalog<WithCallbackMethod_Download<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::sensory::api::v1::file::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCatalog() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCompleteCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCompleteCatalog() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCompleteCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompleteCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCompleteCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Download() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::grpc::ServerWriter< ::sensory::api::v1::file::FileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::sensory::api::v1::file::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCatalog() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCatalog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCompleteCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCompleteCatalog() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCompleteCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompleteCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCompleteCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCompleteCatalog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Download() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::grpc::ServerWriter< ::sensory::api::v1::file::FileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::sensory::api::v1::file::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCatalog() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCatalog(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCatalog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCompleteCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCompleteCatalog() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCompleteCatalog(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCompleteCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompleteCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCompleteCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCompleteCatalog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Download() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Download(context, request); }));
    }
    ~WithRawCallbackMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::grpc::ServerWriter< ::sensory::api::v1::file::FileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Download(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::file::FileRequest, ::sensory::api::v1::file::FileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::file::FileRequest, ::sensory::api::v1::file::FileInfo>* streamer) {
                       return this->StreamedGetInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::sensory::api::v1::file::FileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::file::FileRequest,::sensory::api::v1::file::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCatalog() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::file::FileCatalogRequest, ::sensory::api::v1::file::FileCatalogResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::file::FileCatalogRequest, ::sensory::api::v1::file::FileCatalogResponse>* streamer) {
                       return this->StreamedGetCatalog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCatalog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::file::FileCatalogRequest,::sensory::api::v1::file::FileCatalogResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCompleteCatalog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCompleteCatalog() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::v1::file::FileCompleteCatalogRequest, ::sensory::api::v1::file::FileCatalogResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::v1::file::FileCompleteCatalogRequest, ::sensory::api::v1::file::FileCatalogResponse>* streamer) {
                       return this->StreamedGetCompleteCatalog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCompleteCatalog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCompleteCatalog(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileCompleteCatalogRequest* /*request*/, ::sensory::api::v1::file::FileCatalogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCompleteCatalog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::v1::file::FileCompleteCatalogRequest,::sensory::api::v1::file::FileCatalogResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_GetCatalog<WithStreamedUnaryMethod_GetCompleteCatalog<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Download() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::sensory::api::v1::file::FileRequest, ::sensory::api::v1::file::FileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::sensory::api::v1::file::FileRequest, ::sensory::api::v1::file::FileResponse>* streamer) {
                       return this->StreamedDownload(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::sensory::api::v1::file::FileRequest* /*request*/, ::grpc::ServerWriter< ::sensory::api::v1::file::FileResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownload(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sensory::api::v1::file::FileRequest,::sensory::api::v1::file::FileResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Download<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_GetCatalog<WithStreamedUnaryMethod_GetCompleteCatalog<WithSplitStreamingMethod_Download<Service > > > > StreamedService;
};

}  // namespace file
}  // namespace v1
}  // namespace api
}  // namespace sensory


#endif  // GRPC_v1_2ffile_2ffile_2eproto__INCLUDED
