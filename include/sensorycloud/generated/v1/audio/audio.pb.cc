// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/audio/audio.proto

#include "v1/audio/audio.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensory {
namespace api {
namespace v1 {
namespace audio {
constexpr GetModelsRequest::GetModelsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetModelsRequestDefaultTypeInternal {
  constexpr GetModelsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetModelsRequestDefaultTypeInternal() {}
  union {
    GetModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetModelsRequestDefaultTypeInternal _GetModelsRequest_default_instance_;
constexpr AudioModel::AudioModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : versions_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fixedphrase_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modeltype_(0)

  , samplerate_(0)
  , isenrollable_(false)
  , islivenesssupported_(false)
  , technology_(0)
{}
struct AudioModelDefaultTypeInternal {
  constexpr AudioModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioModelDefaultTypeInternal() {}
  union {
    AudioModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioModelDefaultTypeInternal _AudioModel_default_instance_;
constexpr AudioRequestPostProcessingAction::AudioRequestPostProcessingAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(0)
{}
struct AudioRequestPostProcessingActionDefaultTypeInternal {
  constexpr AudioRequestPostProcessingActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioRequestPostProcessingActionDefaultTypeInternal() {}
  union {
    AudioRequestPostProcessingAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioRequestPostProcessingActionDefaultTypeInternal _AudioRequestPostProcessingAction_default_instance_;
constexpr AudioResponsePostProcessingAction::AudioResponsePostProcessingAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(0)
{}
struct AudioResponsePostProcessingActionDefaultTypeInternal {
  constexpr AudioResponsePostProcessingActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioResponsePostProcessingActionDefaultTypeInternal() {}
  union {
    AudioResponsePostProcessingAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioResponsePostProcessingActionDefaultTypeInternal _AudioResponsePostProcessingAction_default_instance_;
constexpr GetModelsResponse::GetModelsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : models_(){}
struct GetModelsResponseDefaultTypeInternal {
  constexpr GetModelsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetModelsResponseDefaultTypeInternal() {}
  union {
    GetModelsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetModelsResponseDefaultTypeInternal _GetModelsResponse_default_instance_;
constexpr CreateEnrollmentRequest::CreateEnrollmentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CreateEnrollmentRequestDefaultTypeInternal {
  constexpr CreateEnrollmentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateEnrollmentRequestDefaultTypeInternal() {}
  union {
    CreateEnrollmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateEnrollmentRequestDefaultTypeInternal _CreateEnrollmentRequest_default_instance_;
constexpr AuthenticateRequest::AuthenticateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AuthenticateRequestDefaultTypeInternal {
  constexpr AuthenticateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticateRequestDefaultTypeInternal() {}
  union {
    AuthenticateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticateRequestDefaultTypeInternal _AuthenticateRequest_default_instance_;
constexpr ValidateEventRequest::ValidateEventRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : postprocessingaction_(nullptr)
  , _oneof_case_{}{}
struct ValidateEventRequestDefaultTypeInternal {
  constexpr ValidateEventRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateEventRequestDefaultTypeInternal() {}
  union {
    ValidateEventRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateEventRequestDefaultTypeInternal _ValidateEventRequest_default_instance_;
constexpr CreateEnrolledEventRequest::CreateEnrolledEventRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CreateEnrolledEventRequestDefaultTypeInternal {
  constexpr CreateEnrolledEventRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateEnrolledEventRequestDefaultTypeInternal() {}
  union {
    CreateEnrolledEventRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateEnrolledEventRequestDefaultTypeInternal _CreateEnrolledEventRequest_default_instance_;
constexpr ValidateEnrolledEventRequest::ValidateEnrolledEventRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ValidateEnrolledEventRequestDefaultTypeInternal {
  constexpr ValidateEnrolledEventRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateEnrolledEventRequestDefaultTypeInternal() {}
  union {
    ValidateEnrolledEventRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateEnrolledEventRequestDefaultTypeInternal _ValidateEnrolledEventRequest_default_instance_;
constexpr TranscribeRequest::TranscribeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : postprocessingaction_(nullptr)
  , _oneof_case_{}{}
struct TranscribeRequestDefaultTypeInternal {
  constexpr TranscribeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TranscribeRequestDefaultTypeInternal() {}
  union {
    TranscribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TranscribeRequestDefaultTypeInternal _TranscribeRequest_default_instance_;
constexpr CreateEnrollmentResponse::CreateEnrollmentResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enrollmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelprompt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , percentcomplete_(int64_t{0})
  , percentsegmentcomplete_(int64_t{0})
  , audioenergy_(0){}
struct CreateEnrollmentResponseDefaultTypeInternal {
  constexpr CreateEnrollmentResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateEnrollmentResponseDefaultTypeInternal() {}
  union {
    CreateEnrollmentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateEnrollmentResponseDefaultTypeInternal _CreateEnrollmentResponse_default_instance_;
constexpr AuthenticateResponse::AuthenticateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enrollmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelprompt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_(nullptr)
  , audioenergy_(0)
  , success_(false)
  , percentsegmentcomplete_(int64_t{0}){}
struct AuthenticateResponseDefaultTypeInternal {
  constexpr AuthenticateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticateResponseDefaultTypeInternal() {}
  union {
    AuthenticateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticateResponseDefaultTypeInternal _AuthenticateResponse_default_instance_;
constexpr ValidateEventResponse::ValidateEventResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resultid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , postprocessingaction_(nullptr)
  , audioenergy_(0)
  , success_(false)
  , score_(0){}
struct ValidateEventResponseDefaultTypeInternal {
  constexpr ValidateEventResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateEventResponseDefaultTypeInternal() {}
  union {
    ValidateEventResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateEventResponseDefaultTypeInternal _ValidateEventResponse_default_instance_;
constexpr ValidateEnrolledEventResponse::ValidateEnrolledEventResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enrollmentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelprompt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , audioenergy_(0)
  , success_(false){}
struct ValidateEnrolledEventResponseDefaultTypeInternal {
  constexpr ValidateEnrolledEventResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateEnrolledEventResponseDefaultTypeInternal() {}
  union {
    ValidateEnrolledEventResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateEnrolledEventResponseDefaultTypeInternal _ValidateEnrolledEventResponse_default_instance_;
constexpr TranscribeResponse::TranscribeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transcript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , postprocessingaction_(nullptr)
  , audioenergy_(0)
  , ispartialresult_(false){}
struct TranscribeResponseDefaultTypeInternal {
  constexpr TranscribeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TranscribeResponseDefaultTypeInternal() {}
  union {
    TranscribeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TranscribeResponseDefaultTypeInternal _TranscribeResponse_default_instance_;
constexpr CreateEnrollmentConfig::CreateEnrollmentConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , referenceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , audio_(nullptr)
  , islivenessenabled_(false)
  , _oneof_case_{}{}
struct CreateEnrollmentConfigDefaultTypeInternal {
  constexpr CreateEnrollmentConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateEnrollmentConfigDefaultTypeInternal() {}
  union {
    CreateEnrollmentConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateEnrollmentConfigDefaultTypeInternal _CreateEnrollmentConfig_default_instance_;
constexpr AuthenticateConfig::AuthenticateConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : audio_(nullptr)
  , sensitivity_(0)

  , doincludetoken_(false)
  , islivenessenabled_(false)
  , security_(0)

  , _oneof_case_{}{}
struct AuthenticateConfigDefaultTypeInternal {
  constexpr AuthenticateConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticateConfigDefaultTypeInternal() {}
  union {
    AuthenticateConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticateConfigDefaultTypeInternal _AuthenticateConfig_default_instance_;
constexpr ValidateEventConfig::ValidateEventConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , audio_(nullptr)
  , sensitivity_(0)
{}
struct ValidateEventConfigDefaultTypeInternal {
  constexpr ValidateEventConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateEventConfigDefaultTypeInternal() {}
  union {
    ValidateEventConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateEventConfigDefaultTypeInternal _ValidateEventConfig_default_instance_;
constexpr CreateEnrollmentEventConfig::CreateEnrollmentEventConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , referenceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , audio_(nullptr)
  , _oneof_case_{}{}
struct CreateEnrollmentEventConfigDefaultTypeInternal {
  constexpr CreateEnrollmentEventConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateEnrollmentEventConfigDefaultTypeInternal() {}
  union {
    CreateEnrollmentEventConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateEnrollmentEventConfigDefaultTypeInternal _CreateEnrollmentEventConfig_default_instance_;
constexpr ValidateEnrolledEventConfig::ValidateEnrolledEventConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : audio_(nullptr)
  , sensitivity_(0)

  , _oneof_case_{}{}
struct ValidateEnrolledEventConfigDefaultTypeInternal {
  constexpr ValidateEnrolledEventConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateEnrolledEventConfigDefaultTypeInternal() {}
  union {
    ValidateEnrolledEventConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateEnrolledEventConfigDefaultTypeInternal _ValidateEnrolledEventConfig_default_instance_;
constexpr TranscribeConfig::TranscribeConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modelname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , audio_(nullptr){}
struct TranscribeConfigDefaultTypeInternal {
  constexpr TranscribeConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TranscribeConfigDefaultTypeInternal() {}
  union {
    TranscribeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TranscribeConfigDefaultTypeInternal _TranscribeConfig_default_instance_;
constexpr AudioConfig::AudioConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : languagecode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encoding_(0)

  , sampleratehertz_(0)
  , audiochannelcount_(0){}
struct AudioConfigDefaultTypeInternal {
  constexpr AudioConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioConfigDefaultTypeInternal() {}
  union {
    AudioConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioConfigDefaultTypeInternal _AudioConfig_default_instance_;
}  // namespace audio
}  // namespace v1
}  // namespace api
}  // namespace sensory
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_v1_2faudio_2faudio_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_v1_2faudio_2faudio_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_v1_2faudio_2faudio_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_v1_2faudio_2faudio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::GetModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioModel, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioModel, isenrollable_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioModel, modeltype_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioModel, fixedphrase_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioModel, samplerate_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioModel, versions_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioModel, technology_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioModel, islivenesssupported_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioRequestPostProcessingAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioRequestPostProcessingAction, actionid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioRequestPostProcessingAction, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioResponsePostProcessingAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioResponsePostProcessingAction, actionid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioResponsePostProcessingAction, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::GetModelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::GetModelsResponse, models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentRequest, streamingRequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateRequest, streamingRequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventRequest, postprocessingaction_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventRequest, streamingRequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrolledEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrolledEventRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrolledEventRequest, streamingRequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventRequest, streamingRequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeRequest, postprocessingaction_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeRequest, streamingRequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentResponse, percentcomplete_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentResponse, audioenergy_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentResponse, enrollmentid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentResponse, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentResponse, modelversion_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentResponse, modelprompt_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentResponse, percentsegmentcomplete_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateResponse, audioenergy_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateResponse, success_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateResponse, token_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateResponse, userid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateResponse, enrollmentid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateResponse, modelprompt_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateResponse, percentsegmentcomplete_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventResponse, audioenergy_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventResponse, success_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventResponse, resultid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventResponse, score_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventResponse, postprocessingaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventResponse, audioenergy_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventResponse, success_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventResponse, enrollmentid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventResponse, userid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventResponse, modelprompt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeResponse, audioenergy_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeResponse, transcript_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeResponse, ispartialresult_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeResponse, postprocessingaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentConfig, audio_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentConfig, userid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentConfig, deviceid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentConfig, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentConfig, description_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentConfig, islivenessenabled_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentConfig, referenceid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentConfig, enrollLength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateConfig, audio_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateConfig, doincludetoken_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateConfig, sensitivity_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateConfig, security_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateConfig, islivenessenabled_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AuthenticateConfig, authId_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventConfig, audio_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventConfig, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventConfig, userid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEventConfig, sensitivity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentEventConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentEventConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentEventConfig, audio_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentEventConfig, userid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentEventConfig, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentEventConfig, description_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentEventConfig, referenceid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::CreateEnrollmentEventConfig, enrollLength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventConfig, audio_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventConfig, sensitivity_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::ValidateEnrolledEventConfig, authId_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeConfig, audio_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeConfig, modelname_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::TranscribeConfig, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioConfig, encoding_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioConfig, sampleratehertz_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioConfig, audiochannelcount_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::audio::AudioConfig, languagecode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sensory::api::v1::audio::GetModelsRequest)},
  { 6, -1, -1, sizeof(::sensory::api::v1::audio::AudioModel)},
  { 20, -1, -1, sizeof(::sensory::api::v1::audio::AudioRequestPostProcessingAction)},
  { 28, -1, -1, sizeof(::sensory::api::v1::audio::AudioResponsePostProcessingAction)},
  { 36, -1, -1, sizeof(::sensory::api::v1::audio::GetModelsResponse)},
  { 43, -1, -1, sizeof(::sensory::api::v1::audio::CreateEnrollmentRequest)},
  { 52, -1, -1, sizeof(::sensory::api::v1::audio::AuthenticateRequest)},
  { 61, -1, -1, sizeof(::sensory::api::v1::audio::ValidateEventRequest)},
  { 71, -1, -1, sizeof(::sensory::api::v1::audio::CreateEnrolledEventRequest)},
  { 80, -1, -1, sizeof(::sensory::api::v1::audio::ValidateEnrolledEventRequest)},
  { 89, -1, -1, sizeof(::sensory::api::v1::audio::TranscribeRequest)},
  { 99, -1, -1, sizeof(::sensory::api::v1::audio::CreateEnrollmentResponse)},
  { 112, -1, -1, sizeof(::sensory::api::v1::audio::AuthenticateResponse)},
  { 125, -1, -1, sizeof(::sensory::api::v1::audio::ValidateEventResponse)},
  { 136, -1, -1, sizeof(::sensory::api::v1::audio::ValidateEnrolledEventResponse)},
  { 147, -1, -1, sizeof(::sensory::api::v1::audio::TranscribeResponse)},
  { 157, -1, -1, sizeof(::sensory::api::v1::audio::CreateEnrollmentConfig)},
  { 173, -1, -1, sizeof(::sensory::api::v1::audio::AuthenticateConfig)},
  { 187, -1, -1, sizeof(::sensory::api::v1::audio::ValidateEventConfig)},
  { 197, -1, -1, sizeof(::sensory::api::v1::audio::CreateEnrollmentEventConfig)},
  { 211, -1, -1, sizeof(::sensory::api::v1::audio::ValidateEnrolledEventConfig)},
  { 222, -1, -1, sizeof(::sensory::api::v1::audio::TranscribeConfig)},
  { 231, -1, -1, sizeof(::sensory::api::v1::audio::AudioConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_GetModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_AudioModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_AudioRequestPostProcessingAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_AudioResponsePostProcessingAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_GetModelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_CreateEnrollmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_AuthenticateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_ValidateEventRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_CreateEnrolledEventRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_ValidateEnrolledEventRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_TranscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_CreateEnrollmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_AuthenticateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_ValidateEventResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_ValidateEnrolledEventResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_TranscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_CreateEnrollmentConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_AuthenticateConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_ValidateEventConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_CreateEnrollmentEventConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_ValidateEnrolledEventConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_TranscribeConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::audio::_AudioConfig_default_instance_),
};

const char descriptor_table_protodef_v1_2faudio_2faudio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024v1/audio/audio.proto\022\024sensory.api.v1.a"
  "udio\032\027validate/validate.proto\032\023common/co"
  "mmon.proto\"\022\n\020GetModelsRequest\"\362\001\n\nAudio"
  "Model\022\014\n\004name\030\001 \001(\t\022\024\n\014isEnrollable\030\002 \001("
  "\010\0220\n\tmodelType\030\003 \001(\0162\035.sensory.api.commo"
  "n.ModelType\022\023\n\013fixedPhrase\030\004 \001(\t\022\022\n\nsamp"
  "leRate\030\005 \001(\005\022\020\n\010versions\030\006 \003(\t\0226\n\ntechno"
  "logy\030\007 \001(\0162\".sensory.api.common.Technolo"
  "gyType\022\033\n\023isLivenessSupported\030\010 \001(\010\"\177\n A"
  "udioRequestPostProcessingAction\022\020\n\010actio"
  "nId\030\001 \001(\t\022I\n\006action\030\002 \001(\0162/.sensory.api."
  "v1.audio.AudioPostProcessingActionB\010\372B\005\202"
  "\001\002\020\001\"\200\001\n!AudioResponsePostProcessingActi"
  "on\022\020\n\010actionId\030\001 \001(\t\022I\n\006action\030\002 \001(\0162/.s"
  "ensory.api.v1.audio.AudioPostProcessingA"
  "ctionB\010\372B\005\202\001\002\020\001\"E\n\021GetModelsResponse\0220\n\006"
  "models\030\001 \003(\0132 .sensory.api.v1.audio.Audi"
  "oModel\"\212\001\n\027CreateEnrollmentRequest\022>\n\006co"
  "nfig\030\001 \001(\0132,.sensory.api.v1.audio.Create"
  "EnrollmentConfigH\000\022\026\n\014audioContent\030\002 \001(\014"
  "H\000B\027\n\020streamingRequest\022\003\370B\001\"\202\001\n\023Authenti"
  "cateRequest\022:\n\006config\030\001 \001(\0132(.sensory.ap"
  "i.v1.audio.AuthenticateConfigH\000\022\026\n\014audio"
  "Content\030\002 \001(\014H\000B\027\n\020streamingRequest\022\003\370B\001"
  "\"\332\001\n\024ValidateEventRequest\022;\n\006config\030\001 \001("
  "\0132).sensory.api.v1.audio.ValidateEventCo"
  "nfigH\000\022\026\n\014audioContent\030\002 \001(\014H\000\022T\n\024postPr"
  "ocessingAction\030\n \001(\01326.sensory.api.v1.au"
  "dio.AudioRequestPostProcessingActionB\027\n\020"
  "streamingRequest\022\003\370B\001\"\222\001\n\032CreateEnrolled"
  "EventRequest\022C\n\006config\030\001 \001(\01321.sensory.a"
  "pi.v1.audio.CreateEnrollmentEventConfigH"
  "\000\022\026\n\014audioContent\030\002 \001(\014H\000B\027\n\020streamingRe"
  "quest\022\003\370B\001\"\224\001\n\034ValidateEnrolledEventRequ"
  "est\022C\n\006config\030\001 \001(\01321.sensory.api.v1.aud"
  "io.ValidateEnrolledEventConfigH\000\022\026\n\014audi"
  "oContent\030\002 \001(\014H\000B\027\n\020streamingRequest\022\003\370B"
  "\001\"\324\001\n\021TranscribeRequest\0228\n\006config\030\001 \001(\0132"
  "&.sensory.api.v1.audio.TranscribeConfigH"
  "\000\022\026\n\014audioContent\030\002 \001(\014H\000\022T\n\024postProcess"
  "ingAction\030\n \001(\01326.sensory.api.v1.audio.A"
  "udioRequestPostProcessingActionB\027\n\020strea"
  "mingRequest\022\003\370B\001\"\274\001\n\030CreateEnrollmentRes"
  "ponse\022\027\n\017percentComplete\030\001 \001(\003\022\023\n\013audioE"
  "nergy\030\002 \001(\002\022\024\n\014enrollmentId\030\003 \001(\t\022\021\n\tmod"
  "elName\030\004 \001(\t\022\024\n\014modelVersion\030\005 \001(\t\022\023\n\013mo"
  "delPrompt\030\006 \001(\t\022\036\n\026percentSegmentComplet"
  "e\030\007 \001(\003\"\311\001\n\024AuthenticateResponse\022\023\n\013audi"
  "oEnergy\030\001 \001(\002\022\017\n\007success\030\002 \001(\010\0220\n\005token\030"
  "\003 \001(\0132!.sensory.api.common.TokenResponse"
  "\022\016\n\006userId\030\004 \001(\t\022\024\n\014enrollmentId\030\005 \001(\t\022\023"
  "\n\013modelPrompt\030\006 \001(\t\022\036\n\026percentSegmentCom"
  "plete\030\007 \001(\003\"\265\001\n\025ValidateEventResponse\022\023\n"
  "\013audioEnergy\030\001 \001(\002\022\017\n\007success\030\002 \001(\010\022\020\n\010r"
  "esultId\030\003 \001(\t\022\r\n\005score\030\004 \001(\002\022U\n\024postProc"
  "essingAction\030\n \001(\01327.sensory.api.v1.audi"
  "o.AudioResponsePostProcessingAction\"\200\001\n\035"
  "ValidateEnrolledEventResponse\022\023\n\013audioEn"
  "ergy\030\001 \001(\002\022\017\n\007success\030\002 \001(\010\022\024\n\014enrollmen"
  "tId\030\003 \001(\t\022\016\n\006userId\030\004 \001(\t\022\023\n\013modelPrompt"
  "\030\005 \001(\t\"\255\001\n\022TranscribeResponse\022\023\n\013audioEn"
  "ergy\030\001 \001(\002\022\022\n\ntranscript\030\002 \001(\t\022\027\n\017isPart"
  "ialResult\030\003 \001(\010\022U\n\024postProcessingAction\030"
  "\n \001(\01327.sensory.api.v1.audio.AudioRespon"
  "sePostProcessingAction\"\360\002\n\026CreateEnrollm"
  "entConfig\022:\n\005audio\030\001 \001(\0132!.sensory.api.v"
  "1.audio.AudioConfigB\010\372B\005\212\001\002\020\001\022\031\n\006userId\030"
  "\002 \001(\tB\t\372B\006r\004\020\001\030\177\022\033\n\010deviceId\030\003 \001(\tB\t\372B\006r"
  "\004\020\001\030\177\022\035\n\tmodelName\030\004 \001(\tB\n\372B\007r\005\020\001\030\377\001\022\035\n\013"
  "description\030\005 \001(\tB\010\372B\005r\003\030\377\007\022\031\n\021isLivenes"
  "sEnabled\030\006 \001(\010\022,\n\027enrollmentNumUtterance"
  "s\030\007 \001(\rB\t\372B\006*\004\030\n(\000H\000\022-\n\022enrollmentDurati"
  "on\030\010 \001(\002B\017\372B\014\n\n\035\000\000pA-\000\000\000\000H\000\022\034\n\013reference"
  "Id\030\t \001(\tB\007\372B\004r\002\030\177B\016\n\014enrollLength\"\234\003\n\022Au"
  "thenticateConfig\022:\n\005audio\030\001 \001(\0132!.sensor"
  "y.api.v1.audio.AudioConfigB\010\372B\005\212\001\002\020\001\022 \n\014"
  "enrollmentId\030\002 \001(\tB\010\372B\005r\003\260\001\001H\000\022\033\n\021enroll"
  "mentGroupId\030\003 \001(\tH\000\022\026\n\016doIncludeToken\030\004 "
  "\001(\010\022I\n\013sensitivity\030\005 \001(\0162*.sensory.api.v"
  "1.audio.ThresholdSensitivityB\010\372B\005\202\001\002\020\001\022V"
  "\n\010security\030\006 \001(\0162:.sensory.api.v1.audio."
  "AuthenticateConfig.ThresholdSecurityB\010\372B"
  "\005\202\001\002\020\001\022\031\n\021isLivenessEnabled\030\007 \001(\010\"&\n\021Thr"
  "esholdSecurity\022\010\n\004HIGH\020\000\022\007\n\003LOW\020\001B\r\n\006aut"
  "hId\022\003\370B\001\"\326\001\n\023ValidateEventConfig\022:\n\005audi"
  "o\030\001 \001(\0132!.sensory.api.v1.audio.AudioConf"
  "igB\010\372B\005\212\001\002\020\001\022\035\n\tmodelName\030\002 \001(\tB\n\372B\007r\005\020\001"
  "\030\377\001\022\031\n\006userId\030\003 \001(\tB\t\372B\006r\004\020\001\030\177\022I\n\013sensit"
  "ivity\030\004 \001(\0162*.sensory.api.v1.audio.Thres"
  "holdSensitivityB\010\372B\005\202\001\002\020\001\"\275\002\n\033CreateEnro"
  "llmentEventConfig\022:\n\005audio\030\001 \001(\0132!.senso"
  "ry.api.v1.audio.AudioConfigB\010\372B\005\212\001\002\020\001\022\031\n"
  "\006userId\030\002 \001(\tB\t\372B\006r\004\020\001\030\177\022\035\n\tmodelName\030\003 "
  "\001(\tB\n\372B\007r\005\020\001\030\377\001\022\035\n\013description\030\004 \001(\tB\010\372B"
  "\005r\003\030\377\007\022,\n\027enrollmentNumUtterances\030\005 \001(\rB"
  "\t\372B\006*\004\030\n(\000H\000\022-\n\022enrollmentDuration\030\006 \001(\002"
  "B\017\372B\014\n\n\035\000\000pA-\000\000\000\000H\000\022\034\n\013referenceId\030\007 \001(\t"
  "B\007\372B\004r\002\030\177B\016\n\014enrollLength\"\362\001\n\033ValidateEn"
  "rolledEventConfig\022:\n\005audio\030\001 \001(\0132!.senso"
  "ry.api.v1.audio.AudioConfigB\010\372B\005\212\001\002\020\001\022 \n"
  "\014enrollmentId\030\002 \001(\tB\010\372B\005r\003\260\001\001H\000\022\033\n\021enrol"
  "lmentGroupId\030\003 \001(\tH\000\022I\n\013sensitivity\030\004 \001("
  "\0162*.sensory.api.v1.audio.ThresholdSensit"
  "ivityB\010\372B\005\202\001\002\020\001B\r\n\006authId\022\003\370B\001\"\210\001\n\020Trans"
  "cribeConfig\022:\n\005audio\030\001 \001(\0132!.sensory.api"
  ".v1.audio.AudioConfigB\010\372B\005\212\001\002\020\001\022\035\n\tmodel"
  "Name\030\002 \001(\tB\n\372B\007r\005\020\001\030\377\001\022\031\n\006userId\030\003 \001(\tB\t"
  "\372B\006r\004\020\001\030\177\"\353\001\n\013AudioConfig\022K\n\010encoding\030\001 "
  "\001(\0162/.sensory.api.v1.audio.AudioConfig.A"
  "udioEncodingB\010\372B\005\202\001\002\020\001\022!\n\017sampleRateHert"
  "z\030\002 \001(\005B\010\372B\005\032\003 \300>\022\"\n\021audioChannelCount\030\003"
  " \001(\005B\007\372B\004\032\002 \000\022\024\n\014languageCode\030\004 \001(\t\"2\n\rA"
  "udioEncoding\022\014\n\010LINEAR16\020\000\022\010\n\004FLAC\020\001\022\t\n\005"
  "MULAW\020\002*>\n\031AudioPostProcessingAction\022\013\n\007"
  "NOT_SET\020\000\022\t\n\005FLUSH\020\001\022\t\n\005RESET\020\002*N\n\024Thres"
  "holdSensitivity\022\n\n\006LOWEST\020\000\022\007\n\003LOW\020\001\022\n\n\006"
  "MEDIUM\020\002\022\010\n\004HIGH\020\003\022\013\n\007HIGHEST\020\0042m\n\013Audio"
  "Models\022^\n\tGetModels\022&.sensory.api.v1.aud"
  "io.GetModelsRequest\032\'.sensory.api.v1.aud"
  "io.GetModelsResponse\"\0002\367\001\n\017AudioBiometri"
  "cs\022w\n\020CreateEnrollment\022-.sensory.api.v1."
  "audio.CreateEnrollmentRequest\032..sensory."
  "api.v1.audio.CreateEnrollmentResponse\"\000("
  "\0010\001\022k\n\014Authenticate\022).sensory.api.v1.aud"
  "io.AuthenticateRequest\032*.sensory.api.v1."
  "audio.AuthenticateResponse\"\000(\0010\0012\205\003\n\013Aud"
  "ioEvents\022n\n\rValidateEvent\022*.sensory.api."
  "v1.audio.ValidateEventRequest\032+.sensory."
  "api.v1.audio.ValidateEventResponse\"\000(\0010\001"
  "\022}\n\023CreateEnrolledEvent\0220.sensory.api.v1"
  ".audio.CreateEnrolledEventRequest\032..sens"
  "ory.api.v1.audio.CreateEnrollmentRespons"
  "e\"\000(\0010\001\022\206\001\n\025ValidateEnrolledEvent\0222.sens"
  "ory.api.v1.audio.ValidateEnrolledEventRe"
  "quest\0323.sensory.api.v1.audio.ValidateEnr"
  "olledEventResponse\"\000(\0010\0012|\n\023AudioTranscr"
  "iptions\022e\n\nTranscribe\022\'.sensory.api.v1.a"
  "udio.TranscribeRequest\032(.sensory.api.v1."
  "audio.TranscribeResponse\"\000(\0010\001Bo\n\027io.sen"
  "sory.api.v1.audioB\026SensoryApiV1AudioProt"
  "oP\001Z:gitlab.com/sensory-cloud/server/tit"
  "an.git/pkg/api/v1/audiob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_v1_2faudio_2faudio_2eproto_deps[2] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_v1_2faudio_2faudio_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2faudio_2faudio_2eproto = {
  false, false, 5671, descriptor_table_protodef_v1_2faudio_2faudio_2eproto, "v1/audio/audio.proto", 
  &descriptor_table_v1_2faudio_2faudio_2eproto_once, descriptor_table_v1_2faudio_2faudio_2eproto_deps, 2, 23,
  schemas, file_default_instances, TableStruct_v1_2faudio_2faudio_2eproto::offsets,
  file_level_metadata_v1_2faudio_2faudio_2eproto, file_level_enum_descriptors_v1_2faudio_2faudio_2eproto, file_level_service_descriptors_v1_2faudio_2faudio_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_v1_2faudio_2faudio_2eproto_getter() {
  return &descriptor_table_v1_2faudio_2faudio_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_v1_2faudio_2faudio_2eproto(&descriptor_table_v1_2faudio_2faudio_2eproto);
namespace sensory {
namespace api {
namespace v1 {
namespace audio {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticateConfig_ThresholdSecurity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v1_2faudio_2faudio_2eproto);
  return file_level_enum_descriptors_v1_2faudio_2faudio_2eproto[0];
}
bool AuthenticateConfig_ThresholdSecurity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AuthenticateConfig_ThresholdSecurity AuthenticateConfig::HIGH;
constexpr AuthenticateConfig_ThresholdSecurity AuthenticateConfig::LOW;
constexpr AuthenticateConfig_ThresholdSecurity AuthenticateConfig::ThresholdSecurity_MIN;
constexpr AuthenticateConfig_ThresholdSecurity AuthenticateConfig::ThresholdSecurity_MAX;
constexpr int AuthenticateConfig::ThresholdSecurity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioConfig_AudioEncoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v1_2faudio_2faudio_2eproto);
  return file_level_enum_descriptors_v1_2faudio_2faudio_2eproto[1];
}
bool AudioConfig_AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioConfig_AudioEncoding AudioConfig::LINEAR16;
constexpr AudioConfig_AudioEncoding AudioConfig::FLAC;
constexpr AudioConfig_AudioEncoding AudioConfig::MULAW;
constexpr AudioConfig_AudioEncoding AudioConfig::AudioEncoding_MIN;
constexpr AudioConfig_AudioEncoding AudioConfig::AudioEncoding_MAX;
constexpr int AudioConfig::AudioEncoding_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioPostProcessingAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v1_2faudio_2faudio_2eproto);
  return file_level_enum_descriptors_v1_2faudio_2faudio_2eproto[2];
}
bool AudioPostProcessingAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThresholdSensitivity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v1_2faudio_2faudio_2eproto);
  return file_level_enum_descriptors_v1_2faudio_2faudio_2eproto[3];
}
bool ThresholdSensitivity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetModelsRequest::_Internal {
 public:
};

GetModelsRequest::GetModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.GetModelsRequest)
}
GetModelsRequest::GetModelsRequest(const GetModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.GetModelsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetModelsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[0]);
}

// ===================================================================

class AudioModel::_Internal {
 public:
};

AudioModel::AudioModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.AudioModel)
}
AudioModel::AudioModel(const AudioModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      versions_(from.versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  fixedphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fixedphrase().empty()) {
    fixedphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fixedphrase(), 
      GetArenaForAllocation());
  }
  ::memcpy(&modeltype_, &from.modeltype_,
    static_cast<size_t>(reinterpret_cast<char*>(&technology_) -
    reinterpret_cast<char*>(&modeltype_)) + sizeof(technology_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.AudioModel)
}

void AudioModel::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fixedphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&modeltype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&technology_) -
    reinterpret_cast<char*>(&modeltype_)) + sizeof(technology_));
}

AudioModel::~AudioModel() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.AudioModel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AudioModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fixedphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioModel::ArenaDtor(void* object) {
  AudioModel* _this = reinterpret_cast< AudioModel* >(object);
  (void)_this;
}
void AudioModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioModel::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.AudioModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  name_.ClearToEmpty();
  fixedphrase_.ClearToEmpty();
  ::memset(&modeltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&technology_) -
      reinterpret_cast<char*>(&modeltype_)) + sizeof(technology_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.AudioModel.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isEnrollable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isenrollable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.common.ModelType modelType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_modeltype(static_cast<::sensory::api::common::ModelType>(val));
        } else
          goto handle_unusual;
        continue;
      // string fixedPhrase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fixedphrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.AudioModel.fixedPhrase"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sampleRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          samplerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string versions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_versions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.AudioModel.versions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.common.TechnologyType technology = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_technology(static_cast<::sensory::api::common::TechnologyType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool isLivenessSupported = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          islivenesssupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.AudioModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.AudioModel.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool isEnrollable = 2;
  if (this->_internal_isenrollable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isenrollable(), target);
  }

  // .sensory.api.common.ModelType modelType = 3;
  if (this->_internal_modeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_modeltype(), target);
  }

  // string fixedPhrase = 4;
  if (!this->_internal_fixedphrase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fixedphrase().data(), static_cast<int>(this->_internal_fixedphrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.AudioModel.fixedPhrase");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fixedphrase(), target);
  }

  // int32 sampleRate = 5;
  if (this->_internal_samplerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_samplerate(), target);
  }

  // repeated string versions = 6;
  for (int i = 0, n = this->_internal_versions_size(); i < n; i++) {
    const auto& s = this->_internal_versions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.AudioModel.versions");
    target = stream->WriteString(6, s, target);
  }

  // .sensory.api.common.TechnologyType technology = 7;
  if (this->_internal_technology() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_technology(), target);
  }

  // bool isLivenessSupported = 8;
  if (this->_internal_islivenesssupported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_islivenesssupported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.AudioModel)
  return target;
}

size_t AudioModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.AudioModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string versions = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(versions_.size());
  for (int i = 0, n = versions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      versions_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string fixedPhrase = 4;
  if (!this->_internal_fixedphrase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fixedphrase());
  }

  // .sensory.api.common.ModelType modelType = 3;
  if (this->_internal_modeltype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_modeltype());
  }

  // int32 sampleRate = 5;
  if (this->_internal_samplerate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_samplerate());
  }

  // bool isEnrollable = 2;
  if (this->_internal_isenrollable() != 0) {
    total_size += 1 + 1;
  }

  // bool isLivenessSupported = 8;
  if (this->_internal_islivenesssupported() != 0) {
    total_size += 1 + 1;
  }

  // .sensory.api.common.TechnologyType technology = 7;
  if (this->_internal_technology() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_technology());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioModel::GetClassData() const { return &_class_data_; }

void AudioModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioModel *>(to)->MergeFrom(
      static_cast<const AudioModel &>(from));
}


void AudioModel::MergeFrom(const AudioModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.AudioModel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_fixedphrase().empty()) {
    _internal_set_fixedphrase(from._internal_fixedphrase());
  }
  if (from._internal_modeltype() != 0) {
    _internal_set_modeltype(from._internal_modeltype());
  }
  if (from._internal_samplerate() != 0) {
    _internal_set_samplerate(from._internal_samplerate());
  }
  if (from._internal_isenrollable() != 0) {
    _internal_set_isenrollable(from._internal_isenrollable());
  }
  if (from._internal_islivenesssupported() != 0) {
    _internal_set_islivenesssupported(from._internal_islivenesssupported());
  }
  if (from._internal_technology() != 0) {
    _internal_set_technology(from._internal_technology());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioModel::CopyFrom(const AudioModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.AudioModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioModel::IsInitialized() const {
  return true;
}

void AudioModel::InternalSwap(AudioModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  versions_.InternalSwap(&other->versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fixedphrase_, lhs_arena,
      &other->fixedphrase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioModel, technology_)
      + sizeof(AudioModel::technology_)
      - PROTOBUF_FIELD_OFFSET(AudioModel, modeltype_)>(
          reinterpret_cast<char*>(&modeltype_),
          reinterpret_cast<char*>(&other->modeltype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[1]);
}

// ===================================================================

class AudioRequestPostProcessingAction::_Internal {
 public:
};

AudioRequestPostProcessingAction::AudioRequestPostProcessingAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.AudioRequestPostProcessingAction)
}
AudioRequestPostProcessingAction::AudioRequestPostProcessingAction(const AudioRequestPostProcessingAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actionid().empty()) {
    actionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actionid(), 
      GetArenaForAllocation());
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.AudioRequestPostProcessingAction)
}

void AudioRequestPostProcessingAction::SharedCtor() {
actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_ = 0;
}

AudioRequestPostProcessingAction::~AudioRequestPostProcessingAction() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.AudioRequestPostProcessingAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AudioRequestPostProcessingAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  actionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioRequestPostProcessingAction::ArenaDtor(void* object) {
  AudioRequestPostProcessingAction* _this = reinterpret_cast< AudioRequestPostProcessingAction* >(object);
  (void)_this;
}
void AudioRequestPostProcessingAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioRequestPostProcessingAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioRequestPostProcessingAction::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.AudioRequestPostProcessingAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionid_.ClearToEmpty();
  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioRequestPostProcessingAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string actionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_actionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.AudioRequestPostProcessingAction.actionId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.audio.AudioPostProcessingAction action = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::sensory::api::v1::audio::AudioPostProcessingAction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioRequestPostProcessingAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.AudioRequestPostProcessingAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string actionId = 1;
  if (!this->_internal_actionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actionid().data(), static_cast<int>(this->_internal_actionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.AudioRequestPostProcessingAction.actionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_actionid(), target);
  }

  // .sensory.api.v1.audio.AudioPostProcessingAction action = 2 [(.validate.rules) = {
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.AudioRequestPostProcessingAction)
  return target;
}

size_t AudioRequestPostProcessingAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.AudioRequestPostProcessingAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actionId = 1;
  if (!this->_internal_actionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actionid());
  }

  // .sensory.api.v1.audio.AudioPostProcessingAction action = 2 [(.validate.rules) = {
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioRequestPostProcessingAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioRequestPostProcessingAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioRequestPostProcessingAction::GetClassData() const { return &_class_data_; }

void AudioRequestPostProcessingAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioRequestPostProcessingAction *>(to)->MergeFrom(
      static_cast<const AudioRequestPostProcessingAction &>(from));
}


void AudioRequestPostProcessingAction::MergeFrom(const AudioRequestPostProcessingAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.AudioRequestPostProcessingAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actionid().empty()) {
    _internal_set_actionid(from._internal_actionid());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioRequestPostProcessingAction::CopyFrom(const AudioRequestPostProcessingAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.AudioRequestPostProcessingAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioRequestPostProcessingAction::IsInitialized() const {
  return true;
}

void AudioRequestPostProcessingAction::InternalSwap(AudioRequestPostProcessingAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actionid_, lhs_arena,
      &other->actionid_, rhs_arena
  );
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioRequestPostProcessingAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[2]);
}

// ===================================================================

class AudioResponsePostProcessingAction::_Internal {
 public:
};

AudioResponsePostProcessingAction::AudioResponsePostProcessingAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.AudioResponsePostProcessingAction)
}
AudioResponsePostProcessingAction::AudioResponsePostProcessingAction(const AudioResponsePostProcessingAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actionid().empty()) {
    actionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actionid(), 
      GetArenaForAllocation());
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.AudioResponsePostProcessingAction)
}

void AudioResponsePostProcessingAction::SharedCtor() {
actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_ = 0;
}

AudioResponsePostProcessingAction::~AudioResponsePostProcessingAction() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.AudioResponsePostProcessingAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AudioResponsePostProcessingAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  actionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioResponsePostProcessingAction::ArenaDtor(void* object) {
  AudioResponsePostProcessingAction* _this = reinterpret_cast< AudioResponsePostProcessingAction* >(object);
  (void)_this;
}
void AudioResponsePostProcessingAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioResponsePostProcessingAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioResponsePostProcessingAction::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.AudioResponsePostProcessingAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionid_.ClearToEmpty();
  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioResponsePostProcessingAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string actionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_actionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.AudioResponsePostProcessingAction.actionId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.audio.AudioPostProcessingAction action = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::sensory::api::v1::audio::AudioPostProcessingAction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioResponsePostProcessingAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.AudioResponsePostProcessingAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string actionId = 1;
  if (!this->_internal_actionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actionid().data(), static_cast<int>(this->_internal_actionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.AudioResponsePostProcessingAction.actionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_actionid(), target);
  }

  // .sensory.api.v1.audio.AudioPostProcessingAction action = 2 [(.validate.rules) = {
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.AudioResponsePostProcessingAction)
  return target;
}

size_t AudioResponsePostProcessingAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.AudioResponsePostProcessingAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actionId = 1;
  if (!this->_internal_actionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actionid());
  }

  // .sensory.api.v1.audio.AudioPostProcessingAction action = 2 [(.validate.rules) = {
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioResponsePostProcessingAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioResponsePostProcessingAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioResponsePostProcessingAction::GetClassData() const { return &_class_data_; }

void AudioResponsePostProcessingAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioResponsePostProcessingAction *>(to)->MergeFrom(
      static_cast<const AudioResponsePostProcessingAction &>(from));
}


void AudioResponsePostProcessingAction::MergeFrom(const AudioResponsePostProcessingAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.AudioResponsePostProcessingAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actionid().empty()) {
    _internal_set_actionid(from._internal_actionid());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioResponsePostProcessingAction::CopyFrom(const AudioResponsePostProcessingAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.AudioResponsePostProcessingAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioResponsePostProcessingAction::IsInitialized() const {
  return true;
}

void AudioResponsePostProcessingAction::InternalSwap(AudioResponsePostProcessingAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actionid_, lhs_arena,
      &other->actionid_, rhs_arena
  );
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioResponsePostProcessingAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[3]);
}

// ===================================================================

class GetModelsResponse::_Internal {
 public:
};

GetModelsResponse::GetModelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  models_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.GetModelsResponse)
}
GetModelsResponse::GetModelsResponse(const GetModelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      models_(from.models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.GetModelsResponse)
}

void GetModelsResponse::SharedCtor() {
}

GetModelsResponse::~GetModelsResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.GetModelsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetModelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetModelsResponse::ArenaDtor(void* object) {
  GetModelsResponse* _this = reinterpret_cast< GetModelsResponse* >(object);
  (void)_this;
}
void GetModelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.GetModelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensory.api.v1.audio.AudioModel models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.GetModelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensory.api.v1.audio.AudioModel models = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.GetModelsResponse)
  return target;
}

size_t GetModelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.GetModelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensory.api.v1.audio.AudioModel models = 1;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetModelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelsResponse::GetClassData() const { return &_class_data_; }

void GetModelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetModelsResponse *>(to)->MergeFrom(
      static_cast<const GetModelsResponse &>(from));
}


void GetModelsResponse::MergeFrom(const GetModelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.GetModelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelsResponse::CopyFrom(const GetModelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.GetModelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelsResponse::IsInitialized() const {
  return true;
}

void GetModelsResponse::InternalSwap(GetModelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[4]);
}

// ===================================================================

class CreateEnrollmentRequest::_Internal {
 public:
  static const ::sensory::api::v1::audio::CreateEnrollmentConfig& config(const CreateEnrollmentRequest* msg);
};

const ::sensory::api::v1::audio::CreateEnrollmentConfig&
CreateEnrollmentRequest::_Internal::config(const CreateEnrollmentRequest* msg) {
  return *msg->streamingRequest_.config_;
}
void CreateEnrollmentRequest::set_allocated_config(::sensory::api::v1::audio::CreateEnrollmentConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streamingRequest();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::audio::CreateEnrollmentConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streamingRequest_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.audio.CreateEnrollmentRequest.config)
}
CreateEnrollmentRequest::CreateEnrollmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.CreateEnrollmentRequest)
}
CreateEnrollmentRequest::CreateEnrollmentRequest(const CreateEnrollmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streamingRequest();
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::CreateEnrollmentConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.CreateEnrollmentRequest)
}

void CreateEnrollmentRequest::SharedCtor() {
clear_has_streamingRequest();
}

CreateEnrollmentRequest::~CreateEnrollmentRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.CreateEnrollmentRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateEnrollmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streamingRequest()) {
    clear_streamingRequest();
  }
}

void CreateEnrollmentRequest::ArenaDtor(void* object) {
  CreateEnrollmentRequest* _this = reinterpret_cast< CreateEnrollmentRequest* >(object);
  (void)_this;
}
void CreateEnrollmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEnrollmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateEnrollmentRequest::clear_streamingRequest() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.audio.CreateEnrollmentRequest)
  switch (streamingRequest_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streamingRequest_.config_;
      }
      break;
    }
    case kAudioContent: {
      streamingRequest_.audiocontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMINGREQUEST_NOT_SET;
}


void CreateEnrollmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.CreateEnrollmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streamingRequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEnrollmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.CreateEnrollmentConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes audioContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audiocontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEnrollmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.CreateEnrollmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.CreateEnrollmentConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // bytes audioContent = 2;
  if (_internal_has_audiocontent()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audiocontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.CreateEnrollmentRequest)
  return target;
}

size_t CreateEnrollmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.CreateEnrollmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streamingRequest_case()) {
    // .sensory.api.v1.audio.CreateEnrollmentConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streamingRequest_.config_);
      break;
    }
    // bytes audioContent = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEnrollmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateEnrollmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEnrollmentRequest::GetClassData() const { return &_class_data_; }

void CreateEnrollmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateEnrollmentRequest *>(to)->MergeFrom(
      static_cast<const CreateEnrollmentRequest &>(from));
}


void CreateEnrollmentRequest::MergeFrom(const CreateEnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.CreateEnrollmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::CreateEnrollmentConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEnrollmentRequest::CopyFrom(const CreateEnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.CreateEnrollmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEnrollmentRequest::IsInitialized() const {
  return true;
}

void CreateEnrollmentRequest::InternalSwap(CreateEnrollmentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(streamingRequest_, other->streamingRequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEnrollmentRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[5]);
}

// ===================================================================

class AuthenticateRequest::_Internal {
 public:
  static const ::sensory::api::v1::audio::AuthenticateConfig& config(const AuthenticateRequest* msg);
};

const ::sensory::api::v1::audio::AuthenticateConfig&
AuthenticateRequest::_Internal::config(const AuthenticateRequest* msg) {
  return *msg->streamingRequest_.config_;
}
void AuthenticateRequest::set_allocated_config(::sensory::api::v1::audio::AuthenticateConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streamingRequest();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::audio::AuthenticateConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streamingRequest_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.audio.AuthenticateRequest.config)
}
AuthenticateRequest::AuthenticateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.AuthenticateRequest)
}
AuthenticateRequest::AuthenticateRequest(const AuthenticateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streamingRequest();
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::AuthenticateConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.AuthenticateRequest)
}

void AuthenticateRequest::SharedCtor() {
clear_has_streamingRequest();
}

AuthenticateRequest::~AuthenticateRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.AuthenticateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streamingRequest()) {
    clear_streamingRequest();
  }
}

void AuthenticateRequest::ArenaDtor(void* object) {
  AuthenticateRequest* _this = reinterpret_cast< AuthenticateRequest* >(object);
  (void)_this;
}
void AuthenticateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticateRequest::clear_streamingRequest() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.audio.AuthenticateRequest)
  switch (streamingRequest_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streamingRequest_.config_;
      }
      break;
    }
    case kAudioContent: {
      streamingRequest_.audiocontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMINGREQUEST_NOT_SET;
}


void AuthenticateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.AuthenticateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streamingRequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.AuthenticateConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes audioContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audiocontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.AuthenticateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AuthenticateConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // bytes audioContent = 2;
  if (_internal_has_audiocontent()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audiocontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.AuthenticateRequest)
  return target;
}

size_t AuthenticateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.AuthenticateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streamingRequest_case()) {
    // .sensory.api.v1.audio.AuthenticateConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streamingRequest_.config_);
      break;
    }
    // bytes audioContent = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateRequest::GetClassData() const { return &_class_data_; }

void AuthenticateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthenticateRequest *>(to)->MergeFrom(
      static_cast<const AuthenticateRequest &>(from));
}


void AuthenticateRequest::MergeFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.AuthenticateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::AuthenticateConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateRequest::CopyFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.AuthenticateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateRequest::IsInitialized() const {
  return true;
}

void AuthenticateRequest::InternalSwap(AuthenticateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(streamingRequest_, other->streamingRequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[6]);
}

// ===================================================================

class ValidateEventRequest::_Internal {
 public:
  static const ::sensory::api::v1::audio::ValidateEventConfig& config(const ValidateEventRequest* msg);
  static const ::sensory::api::v1::audio::AudioRequestPostProcessingAction& postprocessingaction(const ValidateEventRequest* msg);
};

const ::sensory::api::v1::audio::ValidateEventConfig&
ValidateEventRequest::_Internal::config(const ValidateEventRequest* msg) {
  return *msg->streamingRequest_.config_;
}
const ::sensory::api::v1::audio::AudioRequestPostProcessingAction&
ValidateEventRequest::_Internal::postprocessingaction(const ValidateEventRequest* msg) {
  return *msg->postprocessingaction_;
}
void ValidateEventRequest::set_allocated_config(::sensory::api::v1::audio::ValidateEventConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streamingRequest();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::audio::ValidateEventConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streamingRequest_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.audio.ValidateEventRequest.config)
}
ValidateEventRequest::ValidateEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.ValidateEventRequest)
}
ValidateEventRequest::ValidateEventRequest(const ValidateEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_postprocessingaction()) {
    postprocessingaction_ = new ::sensory::api::v1::audio::AudioRequestPostProcessingAction(*from.postprocessingaction_);
  } else {
    postprocessingaction_ = nullptr;
  }
  clear_has_streamingRequest();
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::ValidateEventConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.ValidateEventRequest)
}

void ValidateEventRequest::SharedCtor() {
postprocessingaction_ = nullptr;
clear_has_streamingRequest();
}

ValidateEventRequest::~ValidateEventRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.ValidateEventRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete postprocessingaction_;
  if (has_streamingRequest()) {
    clear_streamingRequest();
  }
}

void ValidateEventRequest::ArenaDtor(void* object) {
  ValidateEventRequest* _this = reinterpret_cast< ValidateEventRequest* >(object);
  (void)_this;
}
void ValidateEventRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateEventRequest::clear_streamingRequest() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.audio.ValidateEventRequest)
  switch (streamingRequest_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streamingRequest_.config_;
      }
      break;
    }
    case kAudioContent: {
      streamingRequest_.audiocontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMINGREQUEST_NOT_SET;
}


void ValidateEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.ValidateEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && postprocessingaction_ != nullptr) {
    delete postprocessingaction_;
  }
  postprocessingaction_ = nullptr;
  clear_streamingRequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateEventRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.ValidateEventConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes audioContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audiocontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.audio.AudioRequestPostProcessingAction postProcessingAction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_postprocessingaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateEventRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.ValidateEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.ValidateEventConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // bytes audioContent = 2;
  if (_internal_has_audiocontent()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audiocontent(), target);
  }

  // .sensory.api.v1.audio.AudioRequestPostProcessingAction postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::postprocessingaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.ValidateEventRequest)
  return target;
}

size_t ValidateEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.ValidateEventRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AudioRequestPostProcessingAction postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *postprocessingaction_);
  }

  switch (streamingRequest_case()) {
    // .sensory.api.v1.audio.ValidateEventConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streamingRequest_.config_);
      break;
    }
    // bytes audioContent = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateEventRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateEventRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateEventRequest::GetClassData() const { return &_class_data_; }

void ValidateEventRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidateEventRequest *>(to)->MergeFrom(
      static_cast<const ValidateEventRequest &>(from));
}


void ValidateEventRequest::MergeFrom(const ValidateEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.ValidateEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_postprocessingaction()) {
    _internal_mutable_postprocessingaction()->::sensory::api::v1::audio::AudioRequestPostProcessingAction::MergeFrom(from._internal_postprocessingaction());
  }
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::ValidateEventConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateEventRequest::CopyFrom(const ValidateEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.ValidateEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateEventRequest::IsInitialized() const {
  return true;
}

void ValidateEventRequest::InternalSwap(ValidateEventRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(postprocessingaction_, other->postprocessingaction_);
  swap(streamingRequest_, other->streamingRequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateEventRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[7]);
}

// ===================================================================

class CreateEnrolledEventRequest::_Internal {
 public:
  static const ::sensory::api::v1::audio::CreateEnrollmentEventConfig& config(const CreateEnrolledEventRequest* msg);
};

const ::sensory::api::v1::audio::CreateEnrollmentEventConfig&
CreateEnrolledEventRequest::_Internal::config(const CreateEnrolledEventRequest* msg) {
  return *msg->streamingRequest_.config_;
}
void CreateEnrolledEventRequest::set_allocated_config(::sensory::api::v1::audio::CreateEnrollmentEventConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streamingRequest();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::audio::CreateEnrollmentEventConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streamingRequest_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.audio.CreateEnrolledEventRequest.config)
}
CreateEnrolledEventRequest::CreateEnrolledEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.CreateEnrolledEventRequest)
}
CreateEnrolledEventRequest::CreateEnrolledEventRequest(const CreateEnrolledEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streamingRequest();
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::CreateEnrollmentEventConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.CreateEnrolledEventRequest)
}

void CreateEnrolledEventRequest::SharedCtor() {
clear_has_streamingRequest();
}

CreateEnrolledEventRequest::~CreateEnrolledEventRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.CreateEnrolledEventRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateEnrolledEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streamingRequest()) {
    clear_streamingRequest();
  }
}

void CreateEnrolledEventRequest::ArenaDtor(void* object) {
  CreateEnrolledEventRequest* _this = reinterpret_cast< CreateEnrolledEventRequest* >(object);
  (void)_this;
}
void CreateEnrolledEventRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEnrolledEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateEnrolledEventRequest::clear_streamingRequest() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.audio.CreateEnrolledEventRequest)
  switch (streamingRequest_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streamingRequest_.config_;
      }
      break;
    }
    case kAudioContent: {
      streamingRequest_.audiocontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMINGREQUEST_NOT_SET;
}


void CreateEnrolledEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.CreateEnrolledEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streamingRequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEnrolledEventRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.CreateEnrollmentEventConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes audioContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audiocontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEnrolledEventRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.CreateEnrolledEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.CreateEnrollmentEventConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // bytes audioContent = 2;
  if (_internal_has_audiocontent()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audiocontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.CreateEnrolledEventRequest)
  return target;
}

size_t CreateEnrolledEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.CreateEnrolledEventRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streamingRequest_case()) {
    // .sensory.api.v1.audio.CreateEnrollmentEventConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streamingRequest_.config_);
      break;
    }
    // bytes audioContent = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEnrolledEventRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateEnrolledEventRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEnrolledEventRequest::GetClassData() const { return &_class_data_; }

void CreateEnrolledEventRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateEnrolledEventRequest *>(to)->MergeFrom(
      static_cast<const CreateEnrolledEventRequest &>(from));
}


void CreateEnrolledEventRequest::MergeFrom(const CreateEnrolledEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.CreateEnrolledEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::CreateEnrollmentEventConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEnrolledEventRequest::CopyFrom(const CreateEnrolledEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.CreateEnrolledEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEnrolledEventRequest::IsInitialized() const {
  return true;
}

void CreateEnrolledEventRequest::InternalSwap(CreateEnrolledEventRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(streamingRequest_, other->streamingRequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEnrolledEventRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[8]);
}

// ===================================================================

class ValidateEnrolledEventRequest::_Internal {
 public:
  static const ::sensory::api::v1::audio::ValidateEnrolledEventConfig& config(const ValidateEnrolledEventRequest* msg);
};

const ::sensory::api::v1::audio::ValidateEnrolledEventConfig&
ValidateEnrolledEventRequest::_Internal::config(const ValidateEnrolledEventRequest* msg) {
  return *msg->streamingRequest_.config_;
}
void ValidateEnrolledEventRequest::set_allocated_config(::sensory::api::v1::audio::ValidateEnrolledEventConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streamingRequest();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::audio::ValidateEnrolledEventConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streamingRequest_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.audio.ValidateEnrolledEventRequest.config)
}
ValidateEnrolledEventRequest::ValidateEnrolledEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.ValidateEnrolledEventRequest)
}
ValidateEnrolledEventRequest::ValidateEnrolledEventRequest(const ValidateEnrolledEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streamingRequest();
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::ValidateEnrolledEventConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.ValidateEnrolledEventRequest)
}

void ValidateEnrolledEventRequest::SharedCtor() {
clear_has_streamingRequest();
}

ValidateEnrolledEventRequest::~ValidateEnrolledEventRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.ValidateEnrolledEventRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateEnrolledEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streamingRequest()) {
    clear_streamingRequest();
  }
}

void ValidateEnrolledEventRequest::ArenaDtor(void* object) {
  ValidateEnrolledEventRequest* _this = reinterpret_cast< ValidateEnrolledEventRequest* >(object);
  (void)_this;
}
void ValidateEnrolledEventRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateEnrolledEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateEnrolledEventRequest::clear_streamingRequest() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.audio.ValidateEnrolledEventRequest)
  switch (streamingRequest_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streamingRequest_.config_;
      }
      break;
    }
    case kAudioContent: {
      streamingRequest_.audiocontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMINGREQUEST_NOT_SET;
}


void ValidateEnrolledEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.ValidateEnrolledEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streamingRequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateEnrolledEventRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.ValidateEnrolledEventConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes audioContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audiocontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateEnrolledEventRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.ValidateEnrolledEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.ValidateEnrolledEventConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // bytes audioContent = 2;
  if (_internal_has_audiocontent()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audiocontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.ValidateEnrolledEventRequest)
  return target;
}

size_t ValidateEnrolledEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.ValidateEnrolledEventRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streamingRequest_case()) {
    // .sensory.api.v1.audio.ValidateEnrolledEventConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streamingRequest_.config_);
      break;
    }
    // bytes audioContent = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateEnrolledEventRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateEnrolledEventRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateEnrolledEventRequest::GetClassData() const { return &_class_data_; }

void ValidateEnrolledEventRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidateEnrolledEventRequest *>(to)->MergeFrom(
      static_cast<const ValidateEnrolledEventRequest &>(from));
}


void ValidateEnrolledEventRequest::MergeFrom(const ValidateEnrolledEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.ValidateEnrolledEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::ValidateEnrolledEventConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateEnrolledEventRequest::CopyFrom(const ValidateEnrolledEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.ValidateEnrolledEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateEnrolledEventRequest::IsInitialized() const {
  return true;
}

void ValidateEnrolledEventRequest::InternalSwap(ValidateEnrolledEventRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(streamingRequest_, other->streamingRequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateEnrolledEventRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[9]);
}

// ===================================================================

class TranscribeRequest::_Internal {
 public:
  static const ::sensory::api::v1::audio::TranscribeConfig& config(const TranscribeRequest* msg);
  static const ::sensory::api::v1::audio::AudioRequestPostProcessingAction& postprocessingaction(const TranscribeRequest* msg);
};

const ::sensory::api::v1::audio::TranscribeConfig&
TranscribeRequest::_Internal::config(const TranscribeRequest* msg) {
  return *msg->streamingRequest_.config_;
}
const ::sensory::api::v1::audio::AudioRequestPostProcessingAction&
TranscribeRequest::_Internal::postprocessingaction(const TranscribeRequest* msg) {
  return *msg->postprocessingaction_;
}
void TranscribeRequest::set_allocated_config(::sensory::api::v1::audio::TranscribeConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streamingRequest();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensory::api::v1::audio::TranscribeConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streamingRequest_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:sensory.api.v1.audio.TranscribeRequest.config)
}
TranscribeRequest::TranscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.TranscribeRequest)
}
TranscribeRequest::TranscribeRequest(const TranscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_postprocessingaction()) {
    postprocessingaction_ = new ::sensory::api::v1::audio::AudioRequestPostProcessingAction(*from.postprocessingaction_);
  } else {
    postprocessingaction_ = nullptr;
  }
  clear_has_streamingRequest();
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::TranscribeConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.TranscribeRequest)
}

void TranscribeRequest::SharedCtor() {
postprocessingaction_ = nullptr;
clear_has_streamingRequest();
}

TranscribeRequest::~TranscribeRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.TranscribeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TranscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete postprocessingaction_;
  if (has_streamingRequest()) {
    clear_streamingRequest();
  }
}

void TranscribeRequest::ArenaDtor(void* object) {
  TranscribeRequest* _this = reinterpret_cast< TranscribeRequest* >(object);
  (void)_this;
}
void TranscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TranscribeRequest::clear_streamingRequest() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.audio.TranscribeRequest)
  switch (streamingRequest_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streamingRequest_.config_;
      }
      break;
    }
    case kAudioContent: {
      streamingRequest_.audiocontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMINGREQUEST_NOT_SET;
}


void TranscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.TranscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && postprocessingaction_ != nullptr) {
    delete postprocessingaction_;
  }
  postprocessingaction_ = nullptr;
  clear_streamingRequest();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.TranscribeConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes audioContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audiocontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.audio.AudioRequestPostProcessingAction postProcessingAction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_postprocessingaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TranscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.TranscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.TranscribeConfig config = 1;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // bytes audioContent = 2;
  if (_internal_has_audiocontent()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audiocontent(), target);
  }

  // .sensory.api.v1.audio.AudioRequestPostProcessingAction postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::postprocessingaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.TranscribeRequest)
  return target;
}

size_t TranscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.TranscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AudioRequestPostProcessingAction postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *postprocessingaction_);
  }

  switch (streamingRequest_case()) {
    // .sensory.api.v1.audio.TranscribeConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streamingRequest_.config_);
      break;
    }
    // bytes audioContent = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranscribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TranscribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranscribeRequest::GetClassData() const { return &_class_data_; }

void TranscribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TranscribeRequest *>(to)->MergeFrom(
      static_cast<const TranscribeRequest &>(from));
}


void TranscribeRequest::MergeFrom(const TranscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.TranscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_postprocessingaction()) {
    _internal_mutable_postprocessingaction()->::sensory::api::v1::audio::AudioRequestPostProcessingAction::MergeFrom(from._internal_postprocessingaction());
  }
  switch (from.streamingRequest_case()) {
    case kConfig: {
      _internal_mutable_config()->::sensory::api::v1::audio::TranscribeConfig::MergeFrom(from._internal_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audiocontent(from._internal_audiocontent());
      break;
    }
    case STREAMINGREQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranscribeRequest::CopyFrom(const TranscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.TranscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscribeRequest::IsInitialized() const {
  return true;
}

void TranscribeRequest::InternalSwap(TranscribeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(postprocessingaction_, other->postprocessingaction_);
  swap(streamingRequest_, other->streamingRequest_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TranscribeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[10]);
}

// ===================================================================

class CreateEnrollmentResponse::_Internal {
 public:
};

CreateEnrollmentResponse::CreateEnrollmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.CreateEnrollmentResponse)
}
CreateEnrollmentResponse::CreateEnrollmentResponse(const CreateEnrollmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enrollmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enrollmentid().empty()) {
    enrollmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enrollmentid(), 
      GetArenaForAllocation());
  }
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  modelversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelversion().empty()) {
    modelversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelversion(), 
      GetArenaForAllocation());
  }
  modelprompt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelprompt().empty()) {
    modelprompt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelprompt(), 
      GetArenaForAllocation());
  }
  ::memcpy(&percentcomplete_, &from.percentcomplete_,
    static_cast<size_t>(reinterpret_cast<char*>(&audioenergy_) -
    reinterpret_cast<char*>(&percentcomplete_)) + sizeof(audioenergy_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.CreateEnrollmentResponse)
}

void CreateEnrollmentResponse::SharedCtor() {
enrollmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelprompt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&percentcomplete_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audioenergy_) -
    reinterpret_cast<char*>(&percentcomplete_)) + sizeof(audioenergy_));
}

CreateEnrollmentResponse::~CreateEnrollmentResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.CreateEnrollmentResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateEnrollmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  enrollmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelprompt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateEnrollmentResponse::ArenaDtor(void* object) {
  CreateEnrollmentResponse* _this = reinterpret_cast< CreateEnrollmentResponse* >(object);
  (void)_this;
}
void CreateEnrollmentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEnrollmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateEnrollmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.CreateEnrollmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enrollmentid_.ClearToEmpty();
  modelname_.ClearToEmpty();
  modelversion_.ClearToEmpty();
  modelprompt_.ClearToEmpty();
  ::memset(&percentcomplete_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audioenergy_) -
      reinterpret_cast<char*>(&percentcomplete_)) + sizeof(audioenergy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEnrollmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 percentComplete = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          percentcomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float audioEnergy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          audioenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string enrollmentId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_enrollmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentResponse.enrollmentId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string modelName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentResponse.modelName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string modelVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_modelversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentResponse.modelVersion"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string modelPrompt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_modelprompt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentResponse.modelPrompt"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 percentSegmentComplete = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          percentsegmentcomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEnrollmentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.CreateEnrollmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 percentComplete = 1;
  if (this->_internal_percentcomplete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_percentcomplete(), target);
  }

  // float audioEnergy = 2;
  if (!(this->_internal_audioenergy() <= 0 && this->_internal_audioenergy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_audioenergy(), target);
  }

  // string enrollmentId = 3;
  if (!this->_internal_enrollmentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enrollmentid().data(), static_cast<int>(this->_internal_enrollmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentResponse.enrollmentId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enrollmentid(), target);
  }

  // string modelName = 4;
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentResponse.modelName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_modelname(), target);
  }

  // string modelVersion = 5;
  if (!this->_internal_modelversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelversion().data(), static_cast<int>(this->_internal_modelversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentResponse.modelVersion");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_modelversion(), target);
  }

  // string modelPrompt = 6;
  if (!this->_internal_modelprompt().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelprompt().data(), static_cast<int>(this->_internal_modelprompt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentResponse.modelPrompt");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_modelprompt(), target);
  }

  // int64 percentSegmentComplete = 7;
  if (this->_internal_percentsegmentcomplete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_percentsegmentcomplete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.CreateEnrollmentResponse)
  return target;
}

size_t CreateEnrollmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.CreateEnrollmentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string enrollmentId = 3;
  if (!this->_internal_enrollmentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enrollmentid());
  }

  // string modelName = 4;
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // string modelVersion = 5;
  if (!this->_internal_modelversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelversion());
  }

  // string modelPrompt = 6;
  if (!this->_internal_modelprompt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelprompt());
  }

  // int64 percentComplete = 1;
  if (this->_internal_percentcomplete() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_percentcomplete());
  }

  // int64 percentSegmentComplete = 7;
  if (this->_internal_percentsegmentcomplete() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_percentsegmentcomplete());
  }

  // float audioEnergy = 2;
  if (!(this->_internal_audioenergy() <= 0 && this->_internal_audioenergy() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEnrollmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateEnrollmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEnrollmentResponse::GetClassData() const { return &_class_data_; }

void CreateEnrollmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateEnrollmentResponse *>(to)->MergeFrom(
      static_cast<const CreateEnrollmentResponse &>(from));
}


void CreateEnrollmentResponse::MergeFrom(const CreateEnrollmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.CreateEnrollmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_enrollmentid().empty()) {
    _internal_set_enrollmentid(from._internal_enrollmentid());
  }
  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_modelversion().empty()) {
    _internal_set_modelversion(from._internal_modelversion());
  }
  if (!from._internal_modelprompt().empty()) {
    _internal_set_modelprompt(from._internal_modelprompt());
  }
  if (from._internal_percentcomplete() != 0) {
    _internal_set_percentcomplete(from._internal_percentcomplete());
  }
  if (from._internal_percentsegmentcomplete() != 0) {
    _internal_set_percentsegmentcomplete(from._internal_percentsegmentcomplete());
  }
  if (!(from._internal_audioenergy() <= 0 && from._internal_audioenergy() >= 0)) {
    _internal_set_audioenergy(from._internal_audioenergy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEnrollmentResponse::CopyFrom(const CreateEnrollmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.CreateEnrollmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEnrollmentResponse::IsInitialized() const {
  return true;
}

void CreateEnrollmentResponse::InternalSwap(CreateEnrollmentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enrollmentid_, lhs_arena,
      &other->enrollmentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, lhs_arena,
      &other->modelname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelversion_, lhs_arena,
      &other->modelversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelprompt_, lhs_arena,
      &other->modelprompt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateEnrollmentResponse, audioenergy_)
      + sizeof(CreateEnrollmentResponse::audioenergy_)
      - PROTOBUF_FIELD_OFFSET(CreateEnrollmentResponse, percentcomplete_)>(
          reinterpret_cast<char*>(&percentcomplete_),
          reinterpret_cast<char*>(&other->percentcomplete_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEnrollmentResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[11]);
}

// ===================================================================

class AuthenticateResponse::_Internal {
 public:
  static const ::sensory::api::common::TokenResponse& token(const AuthenticateResponse* msg);
};

const ::sensory::api::common::TokenResponse&
AuthenticateResponse::_Internal::token(const AuthenticateResponse* msg) {
  return *msg->token_;
}
void AuthenticateResponse::clear_token() {
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
AuthenticateResponse::AuthenticateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.AuthenticateResponse)
}
AuthenticateResponse::AuthenticateResponse(const AuthenticateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  enrollmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enrollmentid().empty()) {
    enrollmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enrollmentid(), 
      GetArenaForAllocation());
  }
  modelprompt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelprompt().empty()) {
    modelprompt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelprompt(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_token()) {
    token_ = new ::sensory::api::common::TokenResponse(*from.token_);
  } else {
    token_ = nullptr;
  }
  ::memcpy(&audioenergy_, &from.audioenergy_,
    static_cast<size_t>(reinterpret_cast<char*>(&percentsegmentcomplete_) -
    reinterpret_cast<char*>(&audioenergy_)) + sizeof(percentsegmentcomplete_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.AuthenticateResponse)
}

void AuthenticateResponse::SharedCtor() {
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
enrollmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelprompt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&percentsegmentcomplete_) -
    reinterpret_cast<char*>(&token_)) + sizeof(percentsegmentcomplete_));
}

AuthenticateResponse::~AuthenticateResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.AuthenticateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enrollmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelprompt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete token_;
}

void AuthenticateResponse::ArenaDtor(void* object) {
  AuthenticateResponse* _this = reinterpret_cast< AuthenticateResponse* >(object);
  (void)_this;
}
void AuthenticateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.AuthenticateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmpty();
  enrollmentid_.ClearToEmpty();
  modelprompt_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
  ::memset(&audioenergy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentsegmentcomplete_) -
      reinterpret_cast<char*>(&audioenergy_)) + sizeof(percentsegmentcomplete_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float audioEnergy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          audioenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.common.TokenResponse token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string userId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.AuthenticateResponse.userId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enrollmentId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_enrollmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.AuthenticateResponse.enrollmentId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string modelPrompt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_modelprompt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.AuthenticateResponse.modelPrompt"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 percentSegmentComplete = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          percentsegmentcomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.AuthenticateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float audioEnergy = 1;
  if (!(this->_internal_audioenergy() <= 0 && this->_internal_audioenergy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_audioenergy(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // .sensory.api.common.TokenResponse token = 3;
  if (this->_internal_has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::token(this), target, stream);
  }

  // string userId = 4;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.AuthenticateResponse.userId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_userid(), target);
  }

  // string enrollmentId = 5;
  if (!this->_internal_enrollmentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enrollmentid().data(), static_cast<int>(this->_internal_enrollmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.AuthenticateResponse.enrollmentId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_enrollmentid(), target);
  }

  // string modelPrompt = 6;
  if (!this->_internal_modelprompt().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelprompt().data(), static_cast<int>(this->_internal_modelprompt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.AuthenticateResponse.modelPrompt");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_modelprompt(), target);
  }

  // int64 percentSegmentComplete = 7;
  if (this->_internal_percentsegmentcomplete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_percentsegmentcomplete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.AuthenticateResponse)
  return target;
}

size_t AuthenticateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.AuthenticateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 4;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string enrollmentId = 5;
  if (!this->_internal_enrollmentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enrollmentid());
  }

  // string modelPrompt = 6;
  if (!this->_internal_modelprompt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelprompt());
  }

  // .sensory.api.common.TokenResponse token = 3;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  // float audioEnergy = 1;
  if (!(this->_internal_audioenergy() <= 0 && this->_internal_audioenergy() >= 0)) {
    total_size += 1 + 4;
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int64 percentSegmentComplete = 7;
  if (this->_internal_percentsegmentcomplete() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_percentsegmentcomplete());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateResponse::GetClassData() const { return &_class_data_; }

void AuthenticateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthenticateResponse *>(to)->MergeFrom(
      static_cast<const AuthenticateResponse &>(from));
}


void AuthenticateResponse::MergeFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.AuthenticateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (!from._internal_enrollmentid().empty()) {
    _internal_set_enrollmentid(from._internal_enrollmentid());
  }
  if (!from._internal_modelprompt().empty()) {
    _internal_set_modelprompt(from._internal_modelprompt());
  }
  if (from._internal_has_token()) {
    _internal_mutable_token()->::sensory::api::common::TokenResponse::MergeFrom(from._internal_token());
  }
  if (!(from._internal_audioenergy() <= 0 && from._internal_audioenergy() >= 0)) {
    _internal_set_audioenergy(from._internal_audioenergy());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_percentsegmentcomplete() != 0) {
    _internal_set_percentsegmentcomplete(from._internal_percentsegmentcomplete());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateResponse::CopyFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateResponse::IsInitialized() const {
  return true;
}

void AuthenticateResponse::InternalSwap(AuthenticateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, lhs_arena,
      &other->userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enrollmentid_, lhs_arena,
      &other->enrollmentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelprompt_, lhs_arena,
      &other->modelprompt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateResponse, percentsegmentcomplete_)
      + sizeof(AuthenticateResponse::percentsegmentcomplete_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateResponse, token_)>(
          reinterpret_cast<char*>(&token_),
          reinterpret_cast<char*>(&other->token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[12]);
}

// ===================================================================

class ValidateEventResponse::_Internal {
 public:
  static const ::sensory::api::v1::audio::AudioResponsePostProcessingAction& postprocessingaction(const ValidateEventResponse* msg);
};

const ::sensory::api::v1::audio::AudioResponsePostProcessingAction&
ValidateEventResponse::_Internal::postprocessingaction(const ValidateEventResponse* msg) {
  return *msg->postprocessingaction_;
}
ValidateEventResponse::ValidateEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.ValidateEventResponse)
}
ValidateEventResponse::ValidateEventResponse(const ValidateEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resultid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resultid().empty()) {
    resultid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resultid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_postprocessingaction()) {
    postprocessingaction_ = new ::sensory::api::v1::audio::AudioResponsePostProcessingAction(*from.postprocessingaction_);
  } else {
    postprocessingaction_ = nullptr;
  }
  ::memcpy(&audioenergy_, &from.audioenergy_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&audioenergy_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.ValidateEventResponse)
}

void ValidateEventResponse::SharedCtor() {
resultid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&postprocessingaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&postprocessingaction_)) + sizeof(score_));
}

ValidateEventResponse::~ValidateEventResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.ValidateEventResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateEventResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  resultid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete postprocessingaction_;
}

void ValidateEventResponse::ArenaDtor(void* object) {
  ValidateEventResponse* _this = reinterpret_cast< ValidateEventResponse* >(object);
  (void)_this;
}
void ValidateEventResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.ValidateEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resultid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && postprocessingaction_ != nullptr) {
    delete postprocessingaction_;
  }
  postprocessingaction_ = nullptr;
  ::memset(&audioenergy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&audioenergy_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateEventResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float audioEnergy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          audioenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resultId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_resultid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.ValidateEventResponse.resultId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.audio.AudioResponsePostProcessingAction postProcessingAction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_postprocessingaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateEventResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.ValidateEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float audioEnergy = 1;
  if (!(this->_internal_audioenergy() <= 0 && this->_internal_audioenergy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_audioenergy(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string resultId = 3;
  if (!this->_internal_resultid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resultid().data(), static_cast<int>(this->_internal_resultid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.ValidateEventResponse.resultId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resultid(), target);
  }

  // float score = 4;
  if (!(this->_internal_score() <= 0 && this->_internal_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_score(), target);
  }

  // .sensory.api.v1.audio.AudioResponsePostProcessingAction postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::postprocessingaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.ValidateEventResponse)
  return target;
}

size_t ValidateEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.ValidateEventResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resultId = 3;
  if (!this->_internal_resultid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resultid());
  }

  // .sensory.api.v1.audio.AudioResponsePostProcessingAction postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *postprocessingaction_);
  }

  // float audioEnergy = 1;
  if (!(this->_internal_audioenergy() <= 0 && this->_internal_audioenergy() >= 0)) {
    total_size += 1 + 4;
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // float score = 4;
  if (!(this->_internal_score() <= 0 && this->_internal_score() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateEventResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateEventResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateEventResponse::GetClassData() const { return &_class_data_; }

void ValidateEventResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidateEventResponse *>(to)->MergeFrom(
      static_cast<const ValidateEventResponse &>(from));
}


void ValidateEventResponse::MergeFrom(const ValidateEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.ValidateEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resultid().empty()) {
    _internal_set_resultid(from._internal_resultid());
  }
  if (from._internal_has_postprocessingaction()) {
    _internal_mutable_postprocessingaction()->::sensory::api::v1::audio::AudioResponsePostProcessingAction::MergeFrom(from._internal_postprocessingaction());
  }
  if (!(from._internal_audioenergy() <= 0 && from._internal_audioenergy() >= 0)) {
    _internal_set_audioenergy(from._internal_audioenergy());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (!(from._internal_score() <= 0 && from._internal_score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateEventResponse::CopyFrom(const ValidateEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.ValidateEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateEventResponse::IsInitialized() const {
  return true;
}

void ValidateEventResponse::InternalSwap(ValidateEventResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &resultid_, lhs_arena,
      &other->resultid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateEventResponse, score_)
      + sizeof(ValidateEventResponse::score_)
      - PROTOBUF_FIELD_OFFSET(ValidateEventResponse, postprocessingaction_)>(
          reinterpret_cast<char*>(&postprocessingaction_),
          reinterpret_cast<char*>(&other->postprocessingaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateEventResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[13]);
}

// ===================================================================

class ValidateEnrolledEventResponse::_Internal {
 public:
};

ValidateEnrolledEventResponse::ValidateEnrolledEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.ValidateEnrolledEventResponse)
}
ValidateEnrolledEventResponse::ValidateEnrolledEventResponse(const ValidateEnrolledEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enrollmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enrollmentid().empty()) {
    enrollmentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enrollmentid(), 
      GetArenaForAllocation());
  }
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  modelprompt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelprompt().empty()) {
    modelprompt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelprompt(), 
      GetArenaForAllocation());
  }
  ::memcpy(&audioenergy_, &from.audioenergy_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&audioenergy_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.ValidateEnrolledEventResponse)
}

void ValidateEnrolledEventResponse::SharedCtor() {
enrollmentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelprompt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audioenergy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&audioenergy_)) + sizeof(success_));
}

ValidateEnrolledEventResponse::~ValidateEnrolledEventResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.ValidateEnrolledEventResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateEnrolledEventResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  enrollmentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelprompt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidateEnrolledEventResponse::ArenaDtor(void* object) {
  ValidateEnrolledEventResponse* _this = reinterpret_cast< ValidateEnrolledEventResponse* >(object);
  (void)_this;
}
void ValidateEnrolledEventResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateEnrolledEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateEnrolledEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.ValidateEnrolledEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enrollmentid_.ClearToEmpty();
  userid_.ClearToEmpty();
  modelprompt_.ClearToEmpty();
  ::memset(&audioenergy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&audioenergy_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateEnrolledEventResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float audioEnergy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          audioenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enrollmentId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_enrollmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.ValidateEnrolledEventResponse.enrollmentId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string userId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.ValidateEnrolledEventResponse.userId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string modelPrompt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_modelprompt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.ValidateEnrolledEventResponse.modelPrompt"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateEnrolledEventResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.ValidateEnrolledEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float audioEnergy = 1;
  if (!(this->_internal_audioenergy() <= 0 && this->_internal_audioenergy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_audioenergy(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string enrollmentId = 3;
  if (!this->_internal_enrollmentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enrollmentid().data(), static_cast<int>(this->_internal_enrollmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.ValidateEnrolledEventResponse.enrollmentId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enrollmentid(), target);
  }

  // string userId = 4;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.ValidateEnrolledEventResponse.userId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_userid(), target);
  }

  // string modelPrompt = 5;
  if (!this->_internal_modelprompt().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelprompt().data(), static_cast<int>(this->_internal_modelprompt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.ValidateEnrolledEventResponse.modelPrompt");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_modelprompt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.ValidateEnrolledEventResponse)
  return target;
}

size_t ValidateEnrolledEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.ValidateEnrolledEventResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string enrollmentId = 3;
  if (!this->_internal_enrollmentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enrollmentid());
  }

  // string userId = 4;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string modelPrompt = 5;
  if (!this->_internal_modelprompt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelprompt());
  }

  // float audioEnergy = 1;
  if (!(this->_internal_audioenergy() <= 0 && this->_internal_audioenergy() >= 0)) {
    total_size += 1 + 4;
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateEnrolledEventResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateEnrolledEventResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateEnrolledEventResponse::GetClassData() const { return &_class_data_; }

void ValidateEnrolledEventResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidateEnrolledEventResponse *>(to)->MergeFrom(
      static_cast<const ValidateEnrolledEventResponse &>(from));
}


void ValidateEnrolledEventResponse::MergeFrom(const ValidateEnrolledEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.ValidateEnrolledEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_enrollmentid().empty()) {
    _internal_set_enrollmentid(from._internal_enrollmentid());
  }
  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (!from._internal_modelprompt().empty()) {
    _internal_set_modelprompt(from._internal_modelprompt());
  }
  if (!(from._internal_audioenergy() <= 0 && from._internal_audioenergy() >= 0)) {
    _internal_set_audioenergy(from._internal_audioenergy());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateEnrolledEventResponse::CopyFrom(const ValidateEnrolledEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.ValidateEnrolledEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateEnrolledEventResponse::IsInitialized() const {
  return true;
}

void ValidateEnrolledEventResponse::InternalSwap(ValidateEnrolledEventResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enrollmentid_, lhs_arena,
      &other->enrollmentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, lhs_arena,
      &other->userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelprompt_, lhs_arena,
      &other->modelprompt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateEnrolledEventResponse, success_)
      + sizeof(ValidateEnrolledEventResponse::success_)
      - PROTOBUF_FIELD_OFFSET(ValidateEnrolledEventResponse, audioenergy_)>(
          reinterpret_cast<char*>(&audioenergy_),
          reinterpret_cast<char*>(&other->audioenergy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateEnrolledEventResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[14]);
}

// ===================================================================

class TranscribeResponse::_Internal {
 public:
  static const ::sensory::api::v1::audio::AudioResponsePostProcessingAction& postprocessingaction(const TranscribeResponse* msg);
};

const ::sensory::api::v1::audio::AudioResponsePostProcessingAction&
TranscribeResponse::_Internal::postprocessingaction(const TranscribeResponse* msg) {
  return *msg->postprocessingaction_;
}
TranscribeResponse::TranscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.TranscribeResponse)
}
TranscribeResponse::TranscribeResponse(const TranscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transcript().empty()) {
    transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transcript(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_postprocessingaction()) {
    postprocessingaction_ = new ::sensory::api::v1::audio::AudioResponsePostProcessingAction(*from.postprocessingaction_);
  } else {
    postprocessingaction_ = nullptr;
  }
  ::memcpy(&audioenergy_, &from.audioenergy_,
    static_cast<size_t>(reinterpret_cast<char*>(&ispartialresult_) -
    reinterpret_cast<char*>(&audioenergy_)) + sizeof(ispartialresult_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.TranscribeResponse)
}

void TranscribeResponse::SharedCtor() {
transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&postprocessingaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ispartialresult_) -
    reinterpret_cast<char*>(&postprocessingaction_)) + sizeof(ispartialresult_));
}

TranscribeResponse::~TranscribeResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.TranscribeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TranscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transcript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete postprocessingaction_;
}

void TranscribeResponse::ArenaDtor(void* object) {
  TranscribeResponse* _this = reinterpret_cast< TranscribeResponse* >(object);
  (void)_this;
}
void TranscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TranscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.TranscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transcript_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && postprocessingaction_ != nullptr) {
    delete postprocessingaction_;
  }
  postprocessingaction_ = nullptr;
  ::memset(&audioenergy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ispartialresult_) -
      reinterpret_cast<char*>(&audioenergy_)) + sizeof(ispartialresult_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float audioEnergy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          audioenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string transcript = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transcript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.TranscribeResponse.transcript"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isPartialResult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ispartialresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.audio.AudioResponsePostProcessingAction postProcessingAction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_postprocessingaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TranscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.TranscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float audioEnergy = 1;
  if (!(this->_internal_audioenergy() <= 0 && this->_internal_audioenergy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_audioenergy(), target);
  }

  // string transcript = 2;
  if (!this->_internal_transcript().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transcript().data(), static_cast<int>(this->_internal_transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.TranscribeResponse.transcript");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_transcript(), target);
  }

  // bool isPartialResult = 3;
  if (this->_internal_ispartialresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ispartialresult(), target);
  }

  // .sensory.api.v1.audio.AudioResponsePostProcessingAction postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::postprocessingaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.TranscribeResponse)
  return target;
}

size_t TranscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.TranscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transcript = 2;
  if (!this->_internal_transcript().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transcript());
  }

  // .sensory.api.v1.audio.AudioResponsePostProcessingAction postProcessingAction = 10;
  if (this->_internal_has_postprocessingaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *postprocessingaction_);
  }

  // float audioEnergy = 1;
  if (!(this->_internal_audioenergy() <= 0 && this->_internal_audioenergy() >= 0)) {
    total_size += 1 + 4;
  }

  // bool isPartialResult = 3;
  if (this->_internal_ispartialresult() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranscribeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TranscribeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranscribeResponse::GetClassData() const { return &_class_data_; }

void TranscribeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TranscribeResponse *>(to)->MergeFrom(
      static_cast<const TranscribeResponse &>(from));
}


void TranscribeResponse::MergeFrom(const TranscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.TranscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transcript().empty()) {
    _internal_set_transcript(from._internal_transcript());
  }
  if (from._internal_has_postprocessingaction()) {
    _internal_mutable_postprocessingaction()->::sensory::api::v1::audio::AudioResponsePostProcessingAction::MergeFrom(from._internal_postprocessingaction());
  }
  if (!(from._internal_audioenergy() <= 0 && from._internal_audioenergy() >= 0)) {
    _internal_set_audioenergy(from._internal_audioenergy());
  }
  if (from._internal_ispartialresult() != 0) {
    _internal_set_ispartialresult(from._internal_ispartialresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranscribeResponse::CopyFrom(const TranscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.TranscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscribeResponse::IsInitialized() const {
  return true;
}

void TranscribeResponse::InternalSwap(TranscribeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transcript_, lhs_arena,
      &other->transcript_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TranscribeResponse, ispartialresult_)
      + sizeof(TranscribeResponse::ispartialresult_)
      - PROTOBUF_FIELD_OFFSET(TranscribeResponse, postprocessingaction_)>(
          reinterpret_cast<char*>(&postprocessingaction_),
          reinterpret_cast<char*>(&other->postprocessingaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TranscribeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[15]);
}

// ===================================================================

class CreateEnrollmentConfig::_Internal {
 public:
  static const ::sensory::api::v1::audio::AudioConfig& audio(const CreateEnrollmentConfig* msg);
};

const ::sensory::api::v1::audio::AudioConfig&
CreateEnrollmentConfig::_Internal::audio(const CreateEnrollmentConfig* msg) {
  return *msg->audio_;
}
CreateEnrollmentConfig::CreateEnrollmentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.CreateEnrollmentConfig)
}
CreateEnrollmentConfig::CreateEnrollmentConfig(const CreateEnrollmentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  referenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_referenceid().empty()) {
    referenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referenceid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_audio()) {
    audio_ = new ::sensory::api::v1::audio::AudioConfig(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  islivenessenabled_ = from.islivenessenabled_;
  clear_has_enrollLength();
  switch (from.enrollLength_case()) {
    case kEnrollmentNumUtterances: {
      _internal_set_enrollmentnumutterances(from._internal_enrollmentnumutterances());
      break;
    }
    case kEnrollmentDuration: {
      _internal_set_enrollmentduration(from._internal_enrollmentduration());
      break;
    }
    case ENROLLLENGTH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.CreateEnrollmentConfig)
}

void CreateEnrollmentConfig::SharedCtor() {
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
referenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audio_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&islivenessenabled_) -
    reinterpret_cast<char*>(&audio_)) + sizeof(islivenessenabled_));
clear_has_enrollLength();
}

CreateEnrollmentConfig::~CreateEnrollmentConfig() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.CreateEnrollmentConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateEnrollmentConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  referenceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete audio_;
  if (has_enrollLength()) {
    clear_enrollLength();
  }
}

void CreateEnrollmentConfig::ArenaDtor(void* object) {
  CreateEnrollmentConfig* _this = reinterpret_cast< CreateEnrollmentConfig* >(object);
  (void)_this;
}
void CreateEnrollmentConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEnrollmentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateEnrollmentConfig::clear_enrollLength() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.audio.CreateEnrollmentConfig)
  switch (enrollLength_case()) {
    case kEnrollmentNumUtterances: {
      // No need to clear
      break;
    }
    case kEnrollmentDuration: {
      // No need to clear
      break;
    }
    case ENROLLLENGTH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENROLLLENGTH_NOT_SET;
}


void CreateEnrollmentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.CreateEnrollmentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  modelname_.ClearToEmpty();
  description_.ClearToEmpty();
  referenceid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  islivenessenabled_ = false;
  clear_enrollLength();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEnrollmentConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string userId = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentConfig.userId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceId = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentConfig.deviceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string modelName = 4 [(.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentConfig.modelName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 5 [(.validate.rules) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentConfig.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isLivenessEnabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          islivenessenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enrollmentNumUtterances = 7 [(.validate.rules) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_enrollmentnumutterances(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float enrollmentDuration = 8 [(.validate.rules) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _internal_set_enrollmentduration(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string referenceId = 9 [(.validate.rules) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_referenceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentConfig.referenceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEnrollmentConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.CreateEnrollmentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio(this), target, stream);
  }

  // string userId = 2 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentConfig.userId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_userid(), target);
  }

  // string deviceId = 3 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentConfig.deviceId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_deviceid(), target);
  }

  // string modelName = 4 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentConfig.modelName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_modelname(), target);
  }

  // string description = 5 [(.validate.rules) = {
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentConfig.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // bool isLivenessEnabled = 6;
  if (this->_internal_islivenessenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_islivenessenabled(), target);
  }

  // uint32 enrollmentNumUtterances = 7 [(.validate.rules) = {
  if (_internal_has_enrollmentnumutterances()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_enrollmentnumutterances(), target);
  }

  // float enrollmentDuration = 8 [(.validate.rules) = {
  if (_internal_has_enrollmentduration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_enrollmentduration(), target);
  }

  // string referenceId = 9 [(.validate.rules) = {
  if (!this->_internal_referenceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_referenceid().data(), static_cast<int>(this->_internal_referenceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentConfig.referenceId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_referenceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.CreateEnrollmentConfig)
  return target;
}

size_t CreateEnrollmentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.CreateEnrollmentConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 2 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string deviceId = 3 [(.validate.rules) = {
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string modelName = 4 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // string description = 5 [(.validate.rules) = {
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string referenceId = 9 [(.validate.rules) = {
  if (!this->_internal_referenceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_referenceid());
  }

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  // bool isLivenessEnabled = 6;
  if (this->_internal_islivenessenabled() != 0) {
    total_size += 1 + 1;
  }

  switch (enrollLength_case()) {
    // uint32 enrollmentNumUtterances = 7 [(.validate.rules) = {
    case kEnrollmentNumUtterances: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_enrollmentnumutterances());
      break;
    }
    // float enrollmentDuration = 8 [(.validate.rules) = {
    case kEnrollmentDuration: {
      total_size += 1 + 4;
      break;
    }
    case ENROLLLENGTH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEnrollmentConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateEnrollmentConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEnrollmentConfig::GetClassData() const { return &_class_data_; }

void CreateEnrollmentConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateEnrollmentConfig *>(to)->MergeFrom(
      static_cast<const CreateEnrollmentConfig &>(from));
}


void CreateEnrollmentConfig::MergeFrom(const CreateEnrollmentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.CreateEnrollmentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_referenceid().empty()) {
    _internal_set_referenceid(from._internal_referenceid());
  }
  if (from._internal_has_audio()) {
    _internal_mutable_audio()->::sensory::api::v1::audio::AudioConfig::MergeFrom(from._internal_audio());
  }
  if (from._internal_islivenessenabled() != 0) {
    _internal_set_islivenessenabled(from._internal_islivenessenabled());
  }
  switch (from.enrollLength_case()) {
    case kEnrollmentNumUtterances: {
      _internal_set_enrollmentnumutterances(from._internal_enrollmentnumutterances());
      break;
    }
    case kEnrollmentDuration: {
      _internal_set_enrollmentduration(from._internal_enrollmentduration());
      break;
    }
    case ENROLLLENGTH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEnrollmentConfig::CopyFrom(const CreateEnrollmentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.CreateEnrollmentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEnrollmentConfig::IsInitialized() const {
  return true;
}

void CreateEnrollmentConfig::InternalSwap(CreateEnrollmentConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, lhs_arena,
      &other->userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, lhs_arena,
      &other->modelname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &referenceid_, lhs_arena,
      &other->referenceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateEnrollmentConfig, islivenessenabled_)
      + sizeof(CreateEnrollmentConfig::islivenessenabled_)
      - PROTOBUF_FIELD_OFFSET(CreateEnrollmentConfig, audio_)>(
          reinterpret_cast<char*>(&audio_),
          reinterpret_cast<char*>(&other->audio_));
  swap(enrollLength_, other->enrollLength_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEnrollmentConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[16]);
}

// ===================================================================

class AuthenticateConfig::_Internal {
 public:
  static const ::sensory::api::v1::audio::AudioConfig& audio(const AuthenticateConfig* msg);
};

const ::sensory::api::v1::audio::AudioConfig&
AuthenticateConfig::_Internal::audio(const AuthenticateConfig* msg) {
  return *msg->audio_;
}
AuthenticateConfig::AuthenticateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.AuthenticateConfig)
}
AuthenticateConfig::AuthenticateConfig(const AuthenticateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_audio()) {
    audio_ = new ::sensory::api::v1::audio::AudioConfig(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  ::memcpy(&sensitivity_, &from.sensitivity_,
    static_cast<size_t>(reinterpret_cast<char*>(&security_) -
    reinterpret_cast<char*>(&sensitivity_)) + sizeof(security_));
  clear_has_authId();
  switch (from.authId_case()) {
    case kEnrollmentId: {
      _internal_set_enrollmentid(from._internal_enrollmentid());
      break;
    }
    case kEnrollmentGroupId: {
      _internal_set_enrollmentgroupid(from._internal_enrollmentgroupid());
      break;
    }
    case AUTHID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.AuthenticateConfig)
}

void AuthenticateConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audio_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&security_) -
    reinterpret_cast<char*>(&audio_)) + sizeof(security_));
clear_has_authId();
}

AuthenticateConfig::~AuthenticateConfig() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.AuthenticateConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticateConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete audio_;
  if (has_authId()) {
    clear_authId();
  }
}

void AuthenticateConfig::ArenaDtor(void* object) {
  AuthenticateConfig* _this = reinterpret_cast< AuthenticateConfig* >(object);
  (void)_this;
}
void AuthenticateConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticateConfig::clear_authId() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.audio.AuthenticateConfig)
  switch (authId_case()) {
    case kEnrollmentId: {
      authId_.enrollmentid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kEnrollmentGroupId: {
      authId_.enrollmentgroupid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case AUTHID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUTHID_NOT_SET;
}


void AuthenticateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.AuthenticateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  ::memset(&sensitivity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&security_) -
      reinterpret_cast<char*>(&sensitivity_)) + sizeof(security_));
  clear_authId();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enrollmentId = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_enrollmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.AuthenticateConfig.enrollmentId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enrollmentGroupId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_enrollmentgroupid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.AuthenticateConfig.enrollmentGroupId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool doIncludeToken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          doincludetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.audio.ThresholdSensitivity sensitivity = 5 [(.validate.rules) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sensitivity(static_cast<::sensory::api::v1::audio::ThresholdSensitivity>(val));
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.audio.AuthenticateConfig.ThresholdSecurity security = 6 [(.validate.rules) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_security(static_cast<::sensory::api::v1::audio::AuthenticateConfig_ThresholdSecurity>(val));
        } else
          goto handle_unusual;
        continue;
      // bool isLivenessEnabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          islivenessenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.AuthenticateConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio(this), target, stream);
  }

  // string enrollmentId = 2 [(.validate.rules) = {
  if (_internal_has_enrollmentid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enrollmentid().data(), static_cast<int>(this->_internal_enrollmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.AuthenticateConfig.enrollmentId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_enrollmentid(), target);
  }

  // string enrollmentGroupId = 3;
  if (_internal_has_enrollmentgroupid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enrollmentgroupid().data(), static_cast<int>(this->_internal_enrollmentgroupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.AuthenticateConfig.enrollmentGroupId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enrollmentgroupid(), target);
  }

  // bool doIncludeToken = 4;
  if (this->_internal_doincludetoken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_doincludetoken(), target);
  }

  // .sensory.api.v1.audio.ThresholdSensitivity sensitivity = 5 [(.validate.rules) = {
  if (this->_internal_sensitivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sensitivity(), target);
  }

  // .sensory.api.v1.audio.AuthenticateConfig.ThresholdSecurity security = 6 [(.validate.rules) = {
  if (this->_internal_security() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_security(), target);
  }

  // bool isLivenessEnabled = 7;
  if (this->_internal_islivenessenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_islivenessenabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.AuthenticateConfig)
  return target;
}

size_t AuthenticateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.AuthenticateConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  // .sensory.api.v1.audio.ThresholdSensitivity sensitivity = 5 [(.validate.rules) = {
  if (this->_internal_sensitivity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensitivity());
  }

  // bool doIncludeToken = 4;
  if (this->_internal_doincludetoken() != 0) {
    total_size += 1 + 1;
  }

  // bool isLivenessEnabled = 7;
  if (this->_internal_islivenessenabled() != 0) {
    total_size += 1 + 1;
  }

  // .sensory.api.v1.audio.AuthenticateConfig.ThresholdSecurity security = 6 [(.validate.rules) = {
  if (this->_internal_security() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_security());
  }

  switch (authId_case()) {
    // string enrollmentId = 2 [(.validate.rules) = {
    case kEnrollmentId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enrollmentid());
      break;
    }
    // string enrollmentGroupId = 3;
    case kEnrollmentGroupId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enrollmentgroupid());
      break;
    }
    case AUTHID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticateConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateConfig::GetClassData() const { return &_class_data_; }

void AuthenticateConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthenticateConfig *>(to)->MergeFrom(
      static_cast<const AuthenticateConfig &>(from));
}


void AuthenticateConfig::MergeFrom(const AuthenticateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.AuthenticateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_audio()) {
    _internal_mutable_audio()->::sensory::api::v1::audio::AudioConfig::MergeFrom(from._internal_audio());
  }
  if (from._internal_sensitivity() != 0) {
    _internal_set_sensitivity(from._internal_sensitivity());
  }
  if (from._internal_doincludetoken() != 0) {
    _internal_set_doincludetoken(from._internal_doincludetoken());
  }
  if (from._internal_islivenessenabled() != 0) {
    _internal_set_islivenessenabled(from._internal_islivenessenabled());
  }
  if (from._internal_security() != 0) {
    _internal_set_security(from._internal_security());
  }
  switch (from.authId_case()) {
    case kEnrollmentId: {
      _internal_set_enrollmentid(from._internal_enrollmentid());
      break;
    }
    case kEnrollmentGroupId: {
      _internal_set_enrollmentgroupid(from._internal_enrollmentgroupid());
      break;
    }
    case AUTHID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateConfig::CopyFrom(const AuthenticateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.AuthenticateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateConfig::IsInitialized() const {
  return true;
}

void AuthenticateConfig::InternalSwap(AuthenticateConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateConfig, security_)
      + sizeof(AuthenticateConfig::security_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateConfig, audio_)>(
          reinterpret_cast<char*>(&audio_),
          reinterpret_cast<char*>(&other->audio_));
  swap(authId_, other->authId_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[17]);
}

// ===================================================================

class ValidateEventConfig::_Internal {
 public:
  static const ::sensory::api::v1::audio::AudioConfig& audio(const ValidateEventConfig* msg);
};

const ::sensory::api::v1::audio::AudioConfig&
ValidateEventConfig::_Internal::audio(const ValidateEventConfig* msg) {
  return *msg->audio_;
}
ValidateEventConfig::ValidateEventConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.ValidateEventConfig)
}
ValidateEventConfig::ValidateEventConfig(const ValidateEventConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_audio()) {
    audio_ = new ::sensory::api::v1::audio::AudioConfig(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  sensitivity_ = from.sensitivity_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.ValidateEventConfig)
}

void ValidateEventConfig::SharedCtor() {
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audio_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sensitivity_) -
    reinterpret_cast<char*>(&audio_)) + sizeof(sensitivity_));
}

ValidateEventConfig::~ValidateEventConfig() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.ValidateEventConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateEventConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete audio_;
}

void ValidateEventConfig::ArenaDtor(void* object) {
  ValidateEventConfig* _this = reinterpret_cast< ValidateEventConfig* >(object);
  (void)_this;
}
void ValidateEventConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateEventConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateEventConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.ValidateEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modelname_.ClearToEmpty();
  userid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  sensitivity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateEventConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string modelName = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.ValidateEventConfig.modelName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string userId = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.ValidateEventConfig.userId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.audio.ThresholdSensitivity sensitivity = 4 [(.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sensitivity(static_cast<::sensory::api::v1::audio::ThresholdSensitivity>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateEventConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.ValidateEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio(this), target, stream);
  }

  // string modelName = 2 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.ValidateEventConfig.modelName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_modelname(), target);
  }

  // string userId = 3 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.ValidateEventConfig.userId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_userid(), target);
  }

  // .sensory.api.v1.audio.ThresholdSensitivity sensitivity = 4 [(.validate.rules) = {
  if (this->_internal_sensitivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sensitivity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.ValidateEventConfig)
  return target;
}

size_t ValidateEventConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.ValidateEventConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modelName = 2 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // string userId = 3 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  // .sensory.api.v1.audio.ThresholdSensitivity sensitivity = 4 [(.validate.rules) = {
  if (this->_internal_sensitivity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensitivity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateEventConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateEventConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateEventConfig::GetClassData() const { return &_class_data_; }

void ValidateEventConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidateEventConfig *>(to)->MergeFrom(
      static_cast<const ValidateEventConfig &>(from));
}


void ValidateEventConfig::MergeFrom(const ValidateEventConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.ValidateEventConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (from._internal_has_audio()) {
    _internal_mutable_audio()->::sensory::api::v1::audio::AudioConfig::MergeFrom(from._internal_audio());
  }
  if (from._internal_sensitivity() != 0) {
    _internal_set_sensitivity(from._internal_sensitivity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateEventConfig::CopyFrom(const ValidateEventConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.ValidateEventConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateEventConfig::IsInitialized() const {
  return true;
}

void ValidateEventConfig::InternalSwap(ValidateEventConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, lhs_arena,
      &other->modelname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, lhs_arena,
      &other->userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateEventConfig, sensitivity_)
      + sizeof(ValidateEventConfig::sensitivity_)
      - PROTOBUF_FIELD_OFFSET(ValidateEventConfig, audio_)>(
          reinterpret_cast<char*>(&audio_),
          reinterpret_cast<char*>(&other->audio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateEventConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[18]);
}

// ===================================================================

class CreateEnrollmentEventConfig::_Internal {
 public:
  static const ::sensory::api::v1::audio::AudioConfig& audio(const CreateEnrollmentEventConfig* msg);
};

const ::sensory::api::v1::audio::AudioConfig&
CreateEnrollmentEventConfig::_Internal::audio(const CreateEnrollmentEventConfig* msg) {
  return *msg->audio_;
}
CreateEnrollmentEventConfig::CreateEnrollmentEventConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.CreateEnrollmentEventConfig)
}
CreateEnrollmentEventConfig::CreateEnrollmentEventConfig(const CreateEnrollmentEventConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  referenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_referenceid().empty()) {
    referenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referenceid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_audio()) {
    audio_ = new ::sensory::api::v1::audio::AudioConfig(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  clear_has_enrollLength();
  switch (from.enrollLength_case()) {
    case kEnrollmentNumUtterances: {
      _internal_set_enrollmentnumutterances(from._internal_enrollmentnumutterances());
      break;
    }
    case kEnrollmentDuration: {
      _internal_set_enrollmentduration(from._internal_enrollmentduration());
      break;
    }
    case ENROLLLENGTH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.CreateEnrollmentEventConfig)
}

void CreateEnrollmentEventConfig::SharedCtor() {
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
referenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
audio_ = nullptr;
clear_has_enrollLength();
}

CreateEnrollmentEventConfig::~CreateEnrollmentEventConfig() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.CreateEnrollmentEventConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateEnrollmentEventConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  referenceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete audio_;
  if (has_enrollLength()) {
    clear_enrollLength();
  }
}

void CreateEnrollmentEventConfig::ArenaDtor(void* object) {
  CreateEnrollmentEventConfig* _this = reinterpret_cast< CreateEnrollmentEventConfig* >(object);
  (void)_this;
}
void CreateEnrollmentEventConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEnrollmentEventConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateEnrollmentEventConfig::clear_enrollLength() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.audio.CreateEnrollmentEventConfig)
  switch (enrollLength_case()) {
    case kEnrollmentNumUtterances: {
      // No need to clear
      break;
    }
    case kEnrollmentDuration: {
      // No need to clear
      break;
    }
    case ENROLLLENGTH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENROLLLENGTH_NOT_SET;
}


void CreateEnrollmentEventConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.CreateEnrollmentEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmpty();
  modelname_.ClearToEmpty();
  description_.ClearToEmpty();
  referenceid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  clear_enrollLength();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEnrollmentEventConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string userId = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentEventConfig.userId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string modelName = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentEventConfig.modelName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 4 [(.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentEventConfig.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enrollmentNumUtterances = 5 [(.validate.rules) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_enrollmentnumutterances(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float enrollmentDuration = 6 [(.validate.rules) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _internal_set_enrollmentduration(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string referenceId = 7 [(.validate.rules) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_referenceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.CreateEnrollmentEventConfig.referenceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEnrollmentEventConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.CreateEnrollmentEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio(this), target, stream);
  }

  // string userId = 2 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentEventConfig.userId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_userid(), target);
  }

  // string modelName = 3 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentEventConfig.modelName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_modelname(), target);
  }

  // string description = 4 [(.validate.rules) = {
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentEventConfig.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // uint32 enrollmentNumUtterances = 5 [(.validate.rules) = {
  if (_internal_has_enrollmentnumutterances()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_enrollmentnumutterances(), target);
  }

  // float enrollmentDuration = 6 [(.validate.rules) = {
  if (_internal_has_enrollmentduration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_enrollmentduration(), target);
  }

  // string referenceId = 7 [(.validate.rules) = {
  if (!this->_internal_referenceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_referenceid().data(), static_cast<int>(this->_internal_referenceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.CreateEnrollmentEventConfig.referenceId");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_referenceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.CreateEnrollmentEventConfig)
  return target;
}

size_t CreateEnrollmentEventConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.CreateEnrollmentEventConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 2 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string modelName = 3 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // string description = 4 [(.validate.rules) = {
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string referenceId = 7 [(.validate.rules) = {
  if (!this->_internal_referenceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_referenceid());
  }

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  switch (enrollLength_case()) {
    // uint32 enrollmentNumUtterances = 5 [(.validate.rules) = {
    case kEnrollmentNumUtterances: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_enrollmentnumutterances());
      break;
    }
    // float enrollmentDuration = 6 [(.validate.rules) = {
    case kEnrollmentDuration: {
      total_size += 1 + 4;
      break;
    }
    case ENROLLLENGTH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEnrollmentEventConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateEnrollmentEventConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEnrollmentEventConfig::GetClassData() const { return &_class_data_; }

void CreateEnrollmentEventConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateEnrollmentEventConfig *>(to)->MergeFrom(
      static_cast<const CreateEnrollmentEventConfig &>(from));
}


void CreateEnrollmentEventConfig::MergeFrom(const CreateEnrollmentEventConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.CreateEnrollmentEventConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_referenceid().empty()) {
    _internal_set_referenceid(from._internal_referenceid());
  }
  if (from._internal_has_audio()) {
    _internal_mutable_audio()->::sensory::api::v1::audio::AudioConfig::MergeFrom(from._internal_audio());
  }
  switch (from.enrollLength_case()) {
    case kEnrollmentNumUtterances: {
      _internal_set_enrollmentnumutterances(from._internal_enrollmentnumutterances());
      break;
    }
    case kEnrollmentDuration: {
      _internal_set_enrollmentduration(from._internal_enrollmentduration());
      break;
    }
    case ENROLLLENGTH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEnrollmentEventConfig::CopyFrom(const CreateEnrollmentEventConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.CreateEnrollmentEventConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEnrollmentEventConfig::IsInitialized() const {
  return true;
}

void CreateEnrollmentEventConfig::InternalSwap(CreateEnrollmentEventConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, lhs_arena,
      &other->userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, lhs_arena,
      &other->modelname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &referenceid_, lhs_arena,
      &other->referenceid_, rhs_arena
  );
  swap(audio_, other->audio_);
  swap(enrollLength_, other->enrollLength_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEnrollmentEventConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[19]);
}

// ===================================================================

class ValidateEnrolledEventConfig::_Internal {
 public:
  static const ::sensory::api::v1::audio::AudioConfig& audio(const ValidateEnrolledEventConfig* msg);
};

const ::sensory::api::v1::audio::AudioConfig&
ValidateEnrolledEventConfig::_Internal::audio(const ValidateEnrolledEventConfig* msg) {
  return *msg->audio_;
}
ValidateEnrolledEventConfig::ValidateEnrolledEventConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.ValidateEnrolledEventConfig)
}
ValidateEnrolledEventConfig::ValidateEnrolledEventConfig(const ValidateEnrolledEventConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_audio()) {
    audio_ = new ::sensory::api::v1::audio::AudioConfig(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  sensitivity_ = from.sensitivity_;
  clear_has_authId();
  switch (from.authId_case()) {
    case kEnrollmentId: {
      _internal_set_enrollmentid(from._internal_enrollmentid());
      break;
    }
    case kEnrollmentGroupId: {
      _internal_set_enrollmentgroupid(from._internal_enrollmentgroupid());
      break;
    }
    case AUTHID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.ValidateEnrolledEventConfig)
}

void ValidateEnrolledEventConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audio_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sensitivity_) -
    reinterpret_cast<char*>(&audio_)) + sizeof(sensitivity_));
clear_has_authId();
}

ValidateEnrolledEventConfig::~ValidateEnrolledEventConfig() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.ValidateEnrolledEventConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateEnrolledEventConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete audio_;
  if (has_authId()) {
    clear_authId();
  }
}

void ValidateEnrolledEventConfig::ArenaDtor(void* object) {
  ValidateEnrolledEventConfig* _this = reinterpret_cast< ValidateEnrolledEventConfig* >(object);
  (void)_this;
}
void ValidateEnrolledEventConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateEnrolledEventConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateEnrolledEventConfig::clear_authId() {
// @@protoc_insertion_point(one_of_clear_start:sensory.api.v1.audio.ValidateEnrolledEventConfig)
  switch (authId_case()) {
    case kEnrollmentId: {
      authId_.enrollmentid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kEnrollmentGroupId: {
      authId_.enrollmentgroupid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case AUTHID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUTHID_NOT_SET;
}


void ValidateEnrolledEventConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.ValidateEnrolledEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  sensitivity_ = 0;
  clear_authId();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateEnrolledEventConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enrollmentId = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_enrollmentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.ValidateEnrolledEventConfig.enrollmentId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enrollmentGroupId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_enrollmentgroupid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.ValidateEnrolledEventConfig.enrollmentGroupId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.v1.audio.ThresholdSensitivity sensitivity = 4 [(.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sensitivity(static_cast<::sensory::api::v1::audio::ThresholdSensitivity>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateEnrolledEventConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.ValidateEnrolledEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio(this), target, stream);
  }

  // string enrollmentId = 2 [(.validate.rules) = {
  if (_internal_has_enrollmentid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enrollmentid().data(), static_cast<int>(this->_internal_enrollmentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.ValidateEnrolledEventConfig.enrollmentId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_enrollmentid(), target);
  }

  // string enrollmentGroupId = 3;
  if (_internal_has_enrollmentgroupid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enrollmentgroupid().data(), static_cast<int>(this->_internal_enrollmentgroupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.ValidateEnrolledEventConfig.enrollmentGroupId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enrollmentgroupid(), target);
  }

  // .sensory.api.v1.audio.ThresholdSensitivity sensitivity = 4 [(.validate.rules) = {
  if (this->_internal_sensitivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sensitivity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.ValidateEnrolledEventConfig)
  return target;
}

size_t ValidateEnrolledEventConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.ValidateEnrolledEventConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  // .sensory.api.v1.audio.ThresholdSensitivity sensitivity = 4 [(.validate.rules) = {
  if (this->_internal_sensitivity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensitivity());
  }

  switch (authId_case()) {
    // string enrollmentId = 2 [(.validate.rules) = {
    case kEnrollmentId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enrollmentid());
      break;
    }
    // string enrollmentGroupId = 3;
    case kEnrollmentGroupId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enrollmentgroupid());
      break;
    }
    case AUTHID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateEnrolledEventConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateEnrolledEventConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateEnrolledEventConfig::GetClassData() const { return &_class_data_; }

void ValidateEnrolledEventConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidateEnrolledEventConfig *>(to)->MergeFrom(
      static_cast<const ValidateEnrolledEventConfig &>(from));
}


void ValidateEnrolledEventConfig::MergeFrom(const ValidateEnrolledEventConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.ValidateEnrolledEventConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_audio()) {
    _internal_mutable_audio()->::sensory::api::v1::audio::AudioConfig::MergeFrom(from._internal_audio());
  }
  if (from._internal_sensitivity() != 0) {
    _internal_set_sensitivity(from._internal_sensitivity());
  }
  switch (from.authId_case()) {
    case kEnrollmentId: {
      _internal_set_enrollmentid(from._internal_enrollmentid());
      break;
    }
    case kEnrollmentGroupId: {
      _internal_set_enrollmentgroupid(from._internal_enrollmentgroupid());
      break;
    }
    case AUTHID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateEnrolledEventConfig::CopyFrom(const ValidateEnrolledEventConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.ValidateEnrolledEventConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateEnrolledEventConfig::IsInitialized() const {
  return true;
}

void ValidateEnrolledEventConfig::InternalSwap(ValidateEnrolledEventConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateEnrolledEventConfig, sensitivity_)
      + sizeof(ValidateEnrolledEventConfig::sensitivity_)
      - PROTOBUF_FIELD_OFFSET(ValidateEnrolledEventConfig, audio_)>(
          reinterpret_cast<char*>(&audio_),
          reinterpret_cast<char*>(&other->audio_));
  swap(authId_, other->authId_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateEnrolledEventConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[20]);
}

// ===================================================================

class TranscribeConfig::_Internal {
 public:
  static const ::sensory::api::v1::audio::AudioConfig& audio(const TranscribeConfig* msg);
};

const ::sensory::api::v1::audio::AudioConfig&
TranscribeConfig::_Internal::audio(const TranscribeConfig* msg) {
  return *msg->audio_;
}
TranscribeConfig::TranscribeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.TranscribeConfig)
}
TranscribeConfig::TranscribeConfig(const TranscribeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelname().empty()) {
    modelname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelname(), 
      GetArenaForAllocation());
  }
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_audio()) {
    audio_ = new ::sensory::api::v1::audio::AudioConfig(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.TranscribeConfig)
}

void TranscribeConfig::SharedCtor() {
modelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
audio_ = nullptr;
}

TranscribeConfig::~TranscribeConfig() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.TranscribeConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TranscribeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  modelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete audio_;
}

void TranscribeConfig::ArenaDtor(void* object) {
  TranscribeConfig* _this = reinterpret_cast< TranscribeConfig* >(object);
  (void)_this;
}
void TranscribeConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranscribeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TranscribeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.TranscribeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modelname_.ClearToEmpty();
  userid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranscribeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string modelName = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_modelname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.TranscribeConfig.modelName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string userId = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.TranscribeConfig.userId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TranscribeConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.TranscribeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio(this), target, stream);
  }

  // string modelName = 2 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelname().data(), static_cast<int>(this->_internal_modelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.TranscribeConfig.modelName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_modelname(), target);
  }

  // string userId = 3 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.TranscribeConfig.userId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.TranscribeConfig)
  return target;
}

size_t TranscribeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.TranscribeConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modelName = 2 [(.validate.rules) = {
  if (!this->_internal_modelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelname());
  }

  // string userId = 3 [(.validate.rules) = {
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // .sensory.api.v1.audio.AudioConfig audio = 1 [(.validate.rules) = {
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranscribeConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TranscribeConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranscribeConfig::GetClassData() const { return &_class_data_; }

void TranscribeConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TranscribeConfig *>(to)->MergeFrom(
      static_cast<const TranscribeConfig &>(from));
}


void TranscribeConfig::MergeFrom(const TranscribeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.TranscribeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_modelname().empty()) {
    _internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_userid().empty()) {
    _internal_set_userid(from._internal_userid());
  }
  if (from._internal_has_audio()) {
    _internal_mutable_audio()->::sensory::api::v1::audio::AudioConfig::MergeFrom(from._internal_audio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranscribeConfig::CopyFrom(const TranscribeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.TranscribeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscribeConfig::IsInitialized() const {
  return true;
}

void TranscribeConfig::InternalSwap(TranscribeConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelname_, lhs_arena,
      &other->modelname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userid_, lhs_arena,
      &other->userid_, rhs_arena
  );
  swap(audio_, other->audio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TranscribeConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[21]);
}

// ===================================================================

class AudioConfig::_Internal {
 public:
};

AudioConfig::AudioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.audio.AudioConfig)
}
AudioConfig::AudioConfig(const AudioConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  languagecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_languagecode().empty()) {
    languagecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_languagecode(), 
      GetArenaForAllocation());
  }
  ::memcpy(&encoding_, &from.encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&audiochannelcount_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(audiochannelcount_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.audio.AudioConfig)
}

void AudioConfig::SharedCtor() {
languagecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encoding_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audiochannelcount_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(audiochannelcount_));
}

AudioConfig::~AudioConfig() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.audio.AudioConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AudioConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  languagecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioConfig::ArenaDtor(void* object) {
  AudioConfig* _this = reinterpret_cast< AudioConfig* >(object);
  (void)_this;
}
void AudioConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.audio.AudioConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  languagecode_.ClearToEmpty();
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audiochannelcount_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(audiochannelcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::sensory::api::v1::audio::AudioConfig_AudioEncoding>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 sampleRateHertz = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sampleratehertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 audioChannelCount = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          audiochannelcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string languageCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_languagecode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.audio.AudioConfig.languageCode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.audio.AudioConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = {
  if (this->_internal_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_encoding(), target);
  }

  // int32 sampleRateHertz = 2 [(.validate.rules) = {
  if (this->_internal_sampleratehertz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sampleratehertz(), target);
  }

  // int32 audioChannelCount = 3 [(.validate.rules) = {
  if (this->_internal_audiochannelcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_audiochannelcount(), target);
  }

  // string languageCode = 4;
  if (!this->_internal_languagecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_languagecode().data(), static_cast<int>(this->_internal_languagecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.audio.AudioConfig.languageCode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_languagecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.audio.AudioConfig)
  return target;
}

size_t AudioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.audio.AudioConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string languageCode = 4;
  if (!this->_internal_languagecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_languagecode());
  }

  // .sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = {
  if (this->_internal_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  // int32 sampleRateHertz = 2 [(.validate.rules) = {
  if (this->_internal_sampleratehertz() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sampleratehertz());
  }

  // int32 audioChannelCount = 3 [(.validate.rules) = {
  if (this->_internal_audiochannelcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_audiochannelcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioConfig::GetClassData() const { return &_class_data_; }

void AudioConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioConfig *>(to)->MergeFrom(
      static_cast<const AudioConfig &>(from));
}


void AudioConfig::MergeFrom(const AudioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.audio.AudioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_languagecode().empty()) {
    _internal_set_languagecode(from._internal_languagecode());
  }
  if (from._internal_encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  if (from._internal_sampleratehertz() != 0) {
    _internal_set_sampleratehertz(from._internal_sampleratehertz());
  }
  if (from._internal_audiochannelcount() != 0) {
    _internal_set_audiochannelcount(from._internal_audiochannelcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioConfig::CopyFrom(const AudioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.audio.AudioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioConfig::IsInitialized() const {
  return true;
}

void AudioConfig::InternalSwap(AudioConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &languagecode_, lhs_arena,
      &other->languagecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioConfig, audiochannelcount_)
      + sizeof(AudioConfig::audiochannelcount_)
      - PROTOBUF_FIELD_OFFSET(AudioConfig, encoding_)>(
          reinterpret_cast<char*>(&encoding_),
          reinterpret_cast<char*>(&other->encoding_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2faudio_2faudio_2eproto_getter, &descriptor_table_v1_2faudio_2faudio_2eproto_once,
      file_level_metadata_v1_2faudio_2faudio_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace audio
}  // namespace v1
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::GetModelsRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::GetModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::GetModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::AudioModel* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::AudioModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::AudioModel >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::AudioRequestPostProcessingAction* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::AudioRequestPostProcessingAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::AudioRequestPostProcessingAction >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::AudioResponsePostProcessingAction* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::AudioResponsePostProcessingAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::AudioResponsePostProcessingAction >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::GetModelsResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::GetModelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::GetModelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::CreateEnrollmentRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::CreateEnrollmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::CreateEnrollmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::AuthenticateRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::AuthenticateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::AuthenticateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::ValidateEventRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::ValidateEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::ValidateEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::CreateEnrolledEventRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::CreateEnrolledEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::CreateEnrolledEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::ValidateEnrolledEventRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::ValidateEnrolledEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::ValidateEnrolledEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::TranscribeRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::TranscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::TranscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::CreateEnrollmentResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::CreateEnrollmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::CreateEnrollmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::AuthenticateResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::AuthenticateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::AuthenticateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::ValidateEventResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::ValidateEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::ValidateEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::ValidateEnrolledEventResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::ValidateEnrolledEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::ValidateEnrolledEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::TranscribeResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::TranscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::TranscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::CreateEnrollmentConfig* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::CreateEnrollmentConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::CreateEnrollmentConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::AuthenticateConfig* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::AuthenticateConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::AuthenticateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::ValidateEventConfig* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::ValidateEventConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::ValidateEventConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::CreateEnrollmentEventConfig* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::CreateEnrollmentEventConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::CreateEnrollmentEventConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::ValidateEnrolledEventConfig* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::ValidateEnrolledEventConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::ValidateEnrolledEventConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::TranscribeConfig* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::TranscribeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::TranscribeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::audio::AudioConfig* Arena::CreateMaybeMessage< ::sensory::api::v1::audio::AudioConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::audio::AudioConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
