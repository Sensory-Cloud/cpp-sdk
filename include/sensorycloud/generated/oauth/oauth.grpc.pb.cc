// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: oauth/oauth.proto

#include "oauth/oauth.pb.h"
#include "oauth/oauth.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sensory {
namespace api {
namespace oauth {

static const char* OauthService_method_names[] = {
  "/sensory.api.oauth.OauthService/GetToken",
  "/sensory.api.oauth.OauthService/SignToken",
  "/sensory.api.oauth.OauthService/GetWhoAmI",
  "/sensory.api.oauth.OauthService/GetPublicKey",
};

std::unique_ptr< OauthService::Stub> OauthService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OauthService::Stub> stub(new OauthService::Stub(channel, options));
  return stub;
}

OauthService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetToken_(OauthService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignToken_(OauthService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWhoAmI_(OauthService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPublicKey_(OauthService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OauthService::Stub::GetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::sensory::api::common::TokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::oauth::TokenRequest, ::sensory::api::common::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetToken_, context, request, response);
}

void OauthService::Stub::async::GetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest* request, ::sensory::api::common::TokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::oauth::TokenRequest, ::sensory::api::common::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToken_, context, request, response, std::move(f));
}

void OauthService::Stub::async::GetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest* request, ::sensory::api::common::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>* OauthService::Stub::PrepareAsyncGetTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::common::TokenResponse, ::sensory::api::oauth::TokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>* OauthService::Stub::AsyncGetTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OauthService::Stub::SignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::sensory::api::common::TokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::oauth::SignTokenRequest, ::sensory::api::common::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignToken_, context, request, response);
}

void OauthService::Stub::async::SignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest* request, ::sensory::api::common::TokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::oauth::SignTokenRequest, ::sensory::api::common::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignToken_, context, request, response, std::move(f));
}

void OauthService::Stub::async::SignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest* request, ::sensory::api::common::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>* OauthService::Stub::PrepareAsyncSignTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::common::TokenResponse, ::sensory::api::oauth::SignTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>* OauthService::Stub::AsyncSignTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OauthService::Stub::GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::sensory::api::oauth::WhoAmIResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::oauth::WhoAmIRequest, ::sensory::api::oauth::WhoAmIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWhoAmI_, context, request, response);
}

void OauthService::Stub::async::GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest* request, ::sensory::api::oauth::WhoAmIResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::oauth::WhoAmIRequest, ::sensory::api::oauth::WhoAmIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWhoAmI_, context, request, response, std::move(f));
}

void OauthService::Stub::async::GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest* request, ::sensory::api::oauth::WhoAmIResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWhoAmI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::WhoAmIResponse>* OauthService::Stub::PrepareAsyncGetWhoAmIRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::oauth::WhoAmIResponse, ::sensory::api::oauth::WhoAmIRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWhoAmI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::WhoAmIResponse>* OauthService::Stub::AsyncGetWhoAmIRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWhoAmIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OauthService::Stub::GetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::sensory::api::oauth::PublicKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::oauth::PublicKeyRequest, ::sensory::api::oauth::PublicKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPublicKey_, context, request, response);
}

void OauthService::Stub::async::GetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest* request, ::sensory::api::oauth::PublicKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::oauth::PublicKeyRequest, ::sensory::api::oauth::PublicKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPublicKey_, context, request, response, std::move(f));
}

void OauthService::Stub::async::GetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest* request, ::sensory::api::oauth::PublicKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPublicKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::PublicKeyResponse>* OauthService::Stub::PrepareAsyncGetPublicKeyRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::oauth::PublicKeyResponse, ::sensory::api::oauth::PublicKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPublicKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::PublicKeyResponse>* OauthService::Stub::AsyncGetPublicKeyRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPublicKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

OauthService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OauthService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OauthService::Service, ::sensory::api::oauth::TokenRequest, ::sensory::api::common::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OauthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::oauth::TokenRequest* req,
             ::sensory::api::common::TokenResponse* resp) {
               return service->GetToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OauthService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OauthService::Service, ::sensory::api::oauth::SignTokenRequest, ::sensory::api::common::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OauthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::oauth::SignTokenRequest* req,
             ::sensory::api::common::TokenResponse* resp) {
               return service->SignToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OauthService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OauthService::Service, ::sensory::api::oauth::WhoAmIRequest, ::sensory::api::oauth::WhoAmIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OauthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::oauth::WhoAmIRequest* req,
             ::sensory::api::oauth::WhoAmIResponse* resp) {
               return service->GetWhoAmI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OauthService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OauthService::Service, ::sensory::api::oauth::PublicKeyRequest, ::sensory::api::oauth::PublicKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OauthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::oauth::PublicKeyRequest* req,
             ::sensory::api::oauth::PublicKeyResponse* resp) {
               return service->GetPublicKey(ctx, req, resp);
             }, this)));
}

OauthService::Service::~Service() {
}

::grpc::Status OauthService::Service::GetToken(::grpc::ServerContext* context, const ::sensory::api::oauth::TokenRequest* request, ::sensory::api::common::TokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OauthService::Service::SignToken(::grpc::ServerContext* context, const ::sensory::api::oauth::SignTokenRequest* request, ::sensory::api::common::TokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OauthService::Service::GetWhoAmI(::grpc::ServerContext* context, const ::sensory::api::oauth::WhoAmIRequest* request, ::sensory::api::oauth::WhoAmIResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OauthService::Service::GetPublicKey(::grpc::ServerContext* context, const ::sensory::api::oauth::PublicKeyRequest* request, ::sensory::api::oauth::PublicKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sensory
}  // namespace api
}  // namespace oauth

