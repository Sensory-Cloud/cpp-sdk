// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: oauth/oauth.proto
// Original file comments:
// sensory.api.oauth
#ifndef GRPC_oauth_2foauth_2eproto__INCLUDED
#define GRPC_oauth_2foauth_2eproto__INCLUDED

#include "oauth/oauth.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sensory {
namespace api {
namespace oauth {

// Service for OAuth function
class OauthService final {
 public:
  static constexpr char const* service_full_name() {
    return "sensory.api.oauth.OauthService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Obtain an OAuth token for the given credentials
    // Endpoint does not require an authorization token
    virtual ::grpc::Status GetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::sensory::api::common::TokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>> AsyncGetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>>(AsyncGetTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>> PrepareAsyncGetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>>(PrepareAsyncGetTokenRaw(context, request, cq));
    }
    // Sign and return an OAuth token. The passed authorization token must have the SignToken authority.
    // Therefore, Devices are not allowed to make this request.
    // Sign does not validate credentials, and therefore should be used in specific circumstances where credentials are not required.
    // One common usecase for the Sign request is an Io server issuing a user-scoped token after a successful authentication.
    // Only a limited subset of of scopes may be requested from the SignToken request.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status SignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::sensory::api::common::TokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>> AsyncSignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>>(AsyncSignTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>> PrepareAsyncSignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>>(PrepareAsyncSignTokenRaw(context, request, cq));
    }
    // Obtain information about oneself based on the passed OAuth token
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::sensory::api::oauth::WhoAmIResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::WhoAmIResponse>> AsyncGetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::WhoAmIResponse>>(AsyncGetWhoAmIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::WhoAmIResponse>> PrepareAsyncGetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::WhoAmIResponse>>(PrepareAsyncGetWhoAmIRaw(context, request, cq));
    }
    // Retrieve a public key by ID. Public keys retrieved by this endpoint can be used
    // to validate tokens signed by the Sensory cloud.
    virtual ::grpc::Status GetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::sensory::api::oauth::PublicKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::PublicKeyResponse>> AsyncGetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::PublicKeyResponse>>(AsyncGetPublicKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::PublicKeyResponse>> PrepareAsyncGetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::PublicKeyResponse>>(PrepareAsyncGetPublicKeyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Obtain an OAuth token for the given credentials
      // Endpoint does not require an authorization token
      virtual void GetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest* request, ::sensory::api::common::TokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest* request, ::sensory::api::common::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sign and return an OAuth token. The passed authorization token must have the SignToken authority.
      // Therefore, Devices are not allowed to make this request.
      // Sign does not validate credentials, and therefore should be used in specific circumstances where credentials are not required.
      // One common usecase for the Sign request is an Io server issuing a user-scoped token after a successful authentication.
      // Only a limited subset of of scopes may be requested from the SignToken request.
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void SignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest* request, ::sensory::api::common::TokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest* request, ::sensory::api::common::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Obtain information about oneself based on the passed OAuth token
      // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
      virtual void GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest* request, ::sensory::api::oauth::WhoAmIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest* request, ::sensory::api::oauth::WhoAmIResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieve a public key by ID. Public keys retrieved by this endpoint can be used
      // to validate tokens signed by the Sensory cloud.
      virtual void GetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest* request, ::sensory::api::oauth::PublicKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest* request, ::sensory::api::oauth::PublicKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>* AsyncGetTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>* PrepareAsyncGetTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>* AsyncSignTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::common::TokenResponse>* PrepareAsyncSignTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::WhoAmIResponse>* AsyncGetWhoAmIRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::WhoAmIResponse>* PrepareAsyncGetWhoAmIRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::PublicKeyResponse>* AsyncGetPublicKeyRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sensory::api::oauth::PublicKeyResponse>* PrepareAsyncGetPublicKeyRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::sensory::api::common::TokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>> AsyncGetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>>(AsyncGetTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>> PrepareAsyncGetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>>(PrepareAsyncGetTokenRaw(context, request, cq));
    }
    ::grpc::Status SignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::sensory::api::common::TokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>> AsyncSignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>>(AsyncSignTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>> PrepareAsyncSignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>>(PrepareAsyncSignTokenRaw(context, request, cq));
    }
    ::grpc::Status GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::sensory::api::oauth::WhoAmIResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::WhoAmIResponse>> AsyncGetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::WhoAmIResponse>>(AsyncGetWhoAmIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::WhoAmIResponse>> PrepareAsyncGetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::WhoAmIResponse>>(PrepareAsyncGetWhoAmIRaw(context, request, cq));
    }
    ::grpc::Status GetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::sensory::api::oauth::PublicKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::PublicKeyResponse>> AsyncGetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::PublicKeyResponse>>(AsyncGetPublicKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::PublicKeyResponse>> PrepareAsyncGetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::PublicKeyResponse>>(PrepareAsyncGetPublicKeyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest* request, ::sensory::api::common::TokenResponse* response, std::function<void(::grpc::Status)>) override;
      void GetToken(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest* request, ::sensory::api::common::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest* request, ::sensory::api::common::TokenResponse* response, std::function<void(::grpc::Status)>) override;
      void SignToken(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest* request, ::sensory::api::common::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest* request, ::sensory::api::oauth::WhoAmIResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWhoAmI(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest* request, ::sensory::api::oauth::WhoAmIResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest* request, ::sensory::api::oauth::PublicKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPublicKey(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest* request, ::sensory::api::oauth::PublicKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>* AsyncGetTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>* PrepareAsyncGetTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::TokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>* AsyncSignTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::common::TokenResponse>* PrepareAsyncSignTokenRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::SignTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::WhoAmIResponse>* AsyncGetWhoAmIRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::WhoAmIResponse>* PrepareAsyncGetWhoAmIRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::PublicKeyResponse>* AsyncGetPublicKeyRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sensory::api::oauth::PublicKeyResponse>* PrepareAsyncGetPublicKeyRaw(::grpc::ClientContext* context, const ::sensory::api::oauth::PublicKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetToken_;
    const ::grpc::internal::RpcMethod rpcmethod_SignToken_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWhoAmI_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPublicKey_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Obtain an OAuth token for the given credentials
    // Endpoint does not require an authorization token
    virtual ::grpc::Status GetToken(::grpc::ServerContext* context, const ::sensory::api::oauth::TokenRequest* request, ::sensory::api::common::TokenResponse* response);
    // Sign and return an OAuth token. The passed authorization token must have the SignToken authority.
    // Therefore, Devices are not allowed to make this request.
    // Sign does not validate credentials, and therefore should be used in specific circumstances where credentials are not required.
    // One common usecase for the Sign request is an Io server issuing a user-scoped token after a successful authentication.
    // Only a limited subset of of scopes may be requested from the SignToken request.
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status SignToken(::grpc::ServerContext* context, const ::sensory::api::oauth::SignTokenRequest* request, ::sensory::api::common::TokenResponse* response);
    // Obtain information about oneself based on the passed OAuth token
    // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
    virtual ::grpc::Status GetWhoAmI(::grpc::ServerContext* context, const ::sensory::api::oauth::WhoAmIRequest* request, ::sensory::api::oauth::WhoAmIResponse* response);
    // Retrieve a public key by ID. Public keys retrieved by this endpoint can be used
    // to validate tokens signed by the Sensory cloud.
    virtual ::grpc::Status GetPublicKey(::grpc::ServerContext* context, const ::sensory::api::oauth::PublicKeyRequest* request, ::sensory::api::oauth::PublicKeyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetToken() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::TokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetToken(::grpc::ServerContext* context, ::sensory::api::oauth::TokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::common::TokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignToken() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SignToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::SignTokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignToken(::grpc::ServerContext* context, ::sensory::api::oauth::SignTokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::common::TokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWhoAmI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWhoAmI() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetWhoAmI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWhoAmI(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::WhoAmIRequest* /*request*/, ::sensory::api::oauth::WhoAmIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWhoAmI(::grpc::ServerContext* context, ::sensory::api::oauth::WhoAmIRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::oauth::WhoAmIResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPublicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPublicKey() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetPublicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicKey(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::PublicKeyRequest* /*request*/, ::sensory::api::oauth::PublicKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublicKey(::grpc::ServerContext* context, ::sensory::api::oauth::PublicKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::sensory::api::oauth::PublicKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetToken<WithAsyncMethod_SignToken<WithAsyncMethod_GetWhoAmI<WithAsyncMethod_GetPublicKey<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetToken() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::oauth::TokenRequest, ::sensory::api::common::TokenResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::oauth::TokenRequest* request, ::sensory::api::common::TokenResponse* response) { return this->GetToken(context, request, response); }));}
    void SetMessageAllocatorFor_GetToken(
        ::grpc::MessageAllocator< ::sensory::api::oauth::TokenRequest, ::sensory::api::common::TokenResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::oauth::TokenRequest, ::sensory::api::common::TokenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::TokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetToken(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::oauth::TokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SignToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SignToken() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::oauth::SignTokenRequest, ::sensory::api::common::TokenResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::oauth::SignTokenRequest* request, ::sensory::api::common::TokenResponse* response) { return this->SignToken(context, request, response); }));}
    void SetMessageAllocatorFor_SignToken(
        ::grpc::MessageAllocator< ::sensory::api::oauth::SignTokenRequest, ::sensory::api::common::TokenResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::oauth::SignTokenRequest, ::sensory::api::common::TokenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SignToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::SignTokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignToken(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::oauth::SignTokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWhoAmI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWhoAmI() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::oauth::WhoAmIRequest, ::sensory::api::oauth::WhoAmIResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::oauth::WhoAmIRequest* request, ::sensory::api::oauth::WhoAmIResponse* response) { return this->GetWhoAmI(context, request, response); }));}
    void SetMessageAllocatorFor_GetWhoAmI(
        ::grpc::MessageAllocator< ::sensory::api::oauth::WhoAmIRequest, ::sensory::api::oauth::WhoAmIResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::oauth::WhoAmIRequest, ::sensory::api::oauth::WhoAmIResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWhoAmI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWhoAmI(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::WhoAmIRequest* /*request*/, ::sensory::api::oauth::WhoAmIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWhoAmI(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::oauth::WhoAmIRequest* /*request*/, ::sensory::api::oauth::WhoAmIResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPublicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPublicKey() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sensory::api::oauth::PublicKeyRequest, ::sensory::api::oauth::PublicKeyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sensory::api::oauth::PublicKeyRequest* request, ::sensory::api::oauth::PublicKeyResponse* response) { return this->GetPublicKey(context, request, response); }));}
    void SetMessageAllocatorFor_GetPublicKey(
        ::grpc::MessageAllocator< ::sensory::api::oauth::PublicKeyRequest, ::sensory::api::oauth::PublicKeyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sensory::api::oauth::PublicKeyRequest, ::sensory::api::oauth::PublicKeyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPublicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicKey(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::PublicKeyRequest* /*request*/, ::sensory::api::oauth::PublicKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPublicKey(
      ::grpc::CallbackServerContext* /*context*/, const ::sensory::api::oauth::PublicKeyRequest* /*request*/, ::sensory::api::oauth::PublicKeyResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetToken<WithCallbackMethod_SignToken<WithCallbackMethod_GetWhoAmI<WithCallbackMethod_GetPublicKey<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetToken() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::TokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignToken() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SignToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::SignTokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWhoAmI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWhoAmI() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetWhoAmI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWhoAmI(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::WhoAmIRequest* /*request*/, ::sensory::api::oauth::WhoAmIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPublicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPublicKey() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetPublicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicKey(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::PublicKeyRequest* /*request*/, ::sensory::api::oauth::PublicKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetToken() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::TokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignToken() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SignToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::SignTokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWhoAmI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWhoAmI() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetWhoAmI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWhoAmI(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::WhoAmIRequest* /*request*/, ::sensory::api::oauth::WhoAmIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWhoAmI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPublicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPublicKey() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetPublicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicKey(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::PublicKeyRequest* /*request*/, ::sensory::api::oauth::PublicKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublicKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetToken() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetToken(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::TokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SignToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SignToken() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignToken(context, request, response); }));
    }
    ~WithRawCallbackMethod_SignToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::SignTokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWhoAmI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWhoAmI() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWhoAmI(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWhoAmI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWhoAmI(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::WhoAmIRequest* /*request*/, ::sensory::api::oauth::WhoAmIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWhoAmI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPublicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPublicKey() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPublicKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPublicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicKey(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::PublicKeyRequest* /*request*/, ::sensory::api::oauth::PublicKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPublicKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetToken() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::oauth::TokenRequest, ::sensory::api::common::TokenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::oauth::TokenRequest, ::sensory::api::common::TokenResponse>* streamer) {
                       return this->StreamedGetToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::TokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::oauth::TokenRequest,::sensory::api::common::TokenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignToken() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::oauth::SignTokenRequest, ::sensory::api::common::TokenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::oauth::SignTokenRequest, ::sensory::api::common::TokenResponse>* streamer) {
                       return this->StreamedSignToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignToken(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::SignTokenRequest* /*request*/, ::sensory::api::common::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::oauth::SignTokenRequest,::sensory::api::common::TokenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWhoAmI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWhoAmI() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::oauth::WhoAmIRequest, ::sensory::api::oauth::WhoAmIResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::oauth::WhoAmIRequest, ::sensory::api::oauth::WhoAmIResponse>* streamer) {
                       return this->StreamedGetWhoAmI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWhoAmI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWhoAmI(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::WhoAmIRequest* /*request*/, ::sensory::api::oauth::WhoAmIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWhoAmI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::oauth::WhoAmIRequest,::sensory::api::oauth::WhoAmIResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPublicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPublicKey() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sensory::api::oauth::PublicKeyRequest, ::sensory::api::oauth::PublicKeyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sensory::api::oauth::PublicKeyRequest, ::sensory::api::oauth::PublicKeyResponse>* streamer) {
                       return this->StreamedGetPublicKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPublicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPublicKey(::grpc::ServerContext* /*context*/, const ::sensory::api::oauth::PublicKeyRequest* /*request*/, ::sensory::api::oauth::PublicKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPublicKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sensory::api::oauth::PublicKeyRequest,::sensory::api::oauth::PublicKeyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetToken<WithStreamedUnaryMethod_SignToken<WithStreamedUnaryMethod_GetWhoAmI<WithStreamedUnaryMethod_GetPublicKey<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetToken<WithStreamedUnaryMethod_SignToken<WithStreamedUnaryMethod_GetWhoAmI<WithStreamedUnaryMethod_GetPublicKey<Service > > > > StreamedService;
};

}  // namespace oauth
}  // namespace api
}  // namespace sensory


#endif  // GRPC_oauth_2foauth_2eproto__INCLUDED
