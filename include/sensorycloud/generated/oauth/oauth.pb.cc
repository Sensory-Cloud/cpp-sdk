// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oauth/oauth.proto

#include "oauth/oauth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensory {
namespace api {
namespace oauth {
constexpr TokenRequest::TokenRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clientid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TokenRequestDefaultTypeInternal {
  constexpr TokenRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenRequestDefaultTypeInternal() {}
  union {
    TokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenRequestDefaultTypeInternal _TokenRequest_default_instance_;
constexpr SignTokenRequest::SignTokenRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scope_(0)
{}
struct SignTokenRequestDefaultTypeInternal {
  constexpr SignTokenRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignTokenRequestDefaultTypeInternal() {}
  union {
    SignTokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignTokenRequestDefaultTypeInternal _SignTokenRequest_default_instance_;
constexpr WhoAmIRequest::WhoAmIRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WhoAmIRequestDefaultTypeInternal {
  constexpr WhoAmIRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WhoAmIRequestDefaultTypeInternal() {}
  union {
    WhoAmIRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WhoAmIRequestDefaultTypeInternal _WhoAmIRequest_default_instance_;
constexpr WhoAmIResponse::WhoAmIResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clientid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tenantid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WhoAmIResponseDefaultTypeInternal {
  constexpr WhoAmIResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WhoAmIResponseDefaultTypeInternal() {}
  union {
    WhoAmIResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WhoAmIResponseDefaultTypeInternal _WhoAmIResponse_default_instance_;
constexpr PublicKeyRequest::PublicKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PublicKeyRequestDefaultTypeInternal {
  constexpr PublicKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublicKeyRequestDefaultTypeInternal() {}
  union {
    PublicKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublicKeyRequestDefaultTypeInternal _PublicKeyRequest_default_instance_;
constexpr PublicKeyResponse::PublicKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publickey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , keytype_(0)
{}
struct PublicKeyResponseDefaultTypeInternal {
  constexpr PublicKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublicKeyResponseDefaultTypeInternal() {}
  union {
    PublicKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublicKeyResponseDefaultTypeInternal _PublicKeyResponse_default_instance_;
}  // namespace oauth
}  // namespace api
}  // namespace sensory
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_oauth_2foauth_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_oauth_2foauth_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_oauth_2foauth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_oauth_2foauth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::TokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::TokenRequest, clientid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::TokenRequest, secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::SignTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::SignTokenRequest, subject_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::SignTokenRequest, scope_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::WhoAmIRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::WhoAmIResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::WhoAmIResponse, clientid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::WhoAmIResponse, tenantid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::PublicKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::PublicKeyRequest, keyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::PublicKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::PublicKeyResponse, publickey_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::oauth::PublicKeyResponse, keytype_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sensory::api::oauth::TokenRequest)},
  { 8, -1, -1, sizeof(::sensory::api::oauth::SignTokenRequest)},
  { 16, -1, -1, sizeof(::sensory::api::oauth::WhoAmIRequest)},
  { 22, -1, -1, sizeof(::sensory::api::oauth::WhoAmIResponse)},
  { 30, -1, -1, sizeof(::sensory::api::oauth::PublicKeyRequest)},
  { 37, -1, -1, sizeof(::sensory::api::oauth::PublicKeyResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::oauth::_TokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::oauth::_SignTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::oauth::_WhoAmIRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::oauth::_WhoAmIResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::oauth::_PublicKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::oauth::_PublicKeyResponse_default_instance_),
};

const char descriptor_table_protodef_oauth_2foauth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021oauth/oauth.proto\022\021sensory.api.oauth\032\027"
  "validate/validate.proto\032\023common/common.p"
  "roto\":\n\014TokenRequest\022\032\n\010clientId\030\001 \001(\tB\010"
  "\372B\005r\003\260\001\001\022\016\n\006secret\030\002 \001(\t\"\310\001\n\020SignTokenRe"
  "quest\022\032\n\007subject\030\001 \001(\tB\t\372B\006r\004\020\001\030\177\022G\n\005sco"
  "pe\030\002 \001(\0162..sensory.api.oauth.SignTokenRe"
  "quest.TokenScopeB\010\372B\005\202\001\002\020\001\"O\n\nTokenScope"
  "\022\010\n\004USER\020\000\022\017\n\013SUPER_ADMIN\020\001\022\021\n\rBILLING_A"
  "DMIN\020\002\022\023\n\017READ_ONLY_ADMIN\020\003\"\017\n\rWhoAmIReq"
  "uest\"4\n\016WhoAmIResponse\022\020\n\010clientId\030\001 \001(\t"
  "\022\020\n\010tenantId\030\002 \001(\t\"+\n\020PublicKeyRequest\022\027"
  "\n\005keyId\030\001 \001(\tB\010\372B\005r\003\260\001\001\"T\n\021PublicKeyResp"
  "onse\022\021\n\tpublicKey\030\001 \001(\014\022,\n\007keyType\030\002 \001(\016"
  "2\033.sensory.api.common.KeyType2\350\002\n\014OauthS"
  "ervice\022P\n\010GetToken\022\037.sensory.api.oauth.T"
  "okenRequest\032!.sensory.api.common.TokenRe"
  "sponse\"\000\022U\n\tSignToken\022#.sensory.api.oaut"
  "h.SignTokenRequest\032!.sensory.api.common."
  "TokenResponse\"\000\022R\n\tGetWhoAmI\022 .sensory.a"
  "pi.oauth.WhoAmIRequest\032!.sensory.api.oau"
  "th.WhoAmIResponse\"\000\022[\n\014GetPublicKey\022#.se"
  "nsory.api.oauth.PublicKeyRequest\032$.senso"
  "ry.api.oauth.PublicKeyResponse\"\000Bl\n\031ai.s"
  "ensorycloud.api.oauthB\024SensoryApiOauthPr"
  "otoP\001Z7gitlab.com/sensory-cloud/server/t"
  "itan.git/pkg/api/oauthb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_oauth_2foauth_2eproto_deps[2] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_oauth_2foauth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oauth_2foauth_2eproto = {
  false, false, 1030, descriptor_table_protodef_oauth_2foauth_2eproto, "oauth/oauth.proto", 
  &descriptor_table_oauth_2foauth_2eproto_once, descriptor_table_oauth_2foauth_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_oauth_2foauth_2eproto::offsets,
  file_level_metadata_oauth_2foauth_2eproto, file_level_enum_descriptors_oauth_2foauth_2eproto, file_level_service_descriptors_oauth_2foauth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_oauth_2foauth_2eproto_getter() {
  return &descriptor_table_oauth_2foauth_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_oauth_2foauth_2eproto(&descriptor_table_oauth_2foauth_2eproto);
namespace sensory {
namespace api {
namespace oauth {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignTokenRequest_TokenScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_oauth_2foauth_2eproto);
  return file_level_enum_descriptors_oauth_2foauth_2eproto[0];
}
bool SignTokenRequest_TokenScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SignTokenRequest_TokenScope SignTokenRequest::USER;
constexpr SignTokenRequest_TokenScope SignTokenRequest::SUPER_ADMIN;
constexpr SignTokenRequest_TokenScope SignTokenRequest::BILLING_ADMIN;
constexpr SignTokenRequest_TokenScope SignTokenRequest::READ_ONLY_ADMIN;
constexpr SignTokenRequest_TokenScope SignTokenRequest::TokenScope_MIN;
constexpr SignTokenRequest_TokenScope SignTokenRequest::TokenScope_MAX;
constexpr int SignTokenRequest::TokenScope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class TokenRequest::_Internal {
 public:
};

TokenRequest::TokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.oauth.TokenRequest)
}
TokenRequest::TokenRequest(const TokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArenaForAllocation());
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.oauth.TokenRequest)
}

void TokenRequest::SharedCtor() {
clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TokenRequest::~TokenRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.oauth.TokenRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenRequest::ArenaDtor(void* object) {
  TokenRequest* _this = reinterpret_cast< TokenRequest* >(object);
  (void)_this;
}
void TokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.oauth.TokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientid_.ClearToEmpty();
  secret_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.oauth.TokenRequest.clientId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.oauth.TokenRequest.secret"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.oauth.TokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1 [(.validate.rules) = {
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.oauth.TokenRequest.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.oauth.TokenRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.oauth.TokenRequest)
  return target;
}

size_t TokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.oauth.TokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1 [(.validate.rules) = {
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenRequest::GetClassData() const { return &_class_data_; }

void TokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TokenRequest *>(to)->MergeFrom(
      static_cast<const TokenRequest &>(from));
}


void TokenRequest::MergeFrom(const TokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.oauth.TokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_secret().empty()) {
    _internal_set_secret(from._internal_secret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenRequest::CopyFrom(const TokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.oauth.TokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenRequest::IsInitialized() const {
  return true;
}

void TokenRequest::InternalSwap(TokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clientid_, lhs_arena,
      &other->clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_, lhs_arena,
      &other->secret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oauth_2foauth_2eproto_getter, &descriptor_table_oauth_2foauth_2eproto_once,
      file_level_metadata_oauth_2foauth_2eproto[0]);
}

// ===================================================================

class SignTokenRequest::_Internal {
 public:
};

SignTokenRequest::SignTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.oauth.SignTokenRequest)
}
SignTokenRequest::SignTokenRequest(const SignTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArenaForAllocation());
  }
  scope_ = from.scope_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.oauth.SignTokenRequest)
}

void SignTokenRequest::SharedCtor() {
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scope_ = 0;
}

SignTokenRequest::~SignTokenRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.oauth.SignTokenRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignTokenRequest::ArenaDtor(void* object) {
  SignTokenRequest* _this = reinterpret_cast< SignTokenRequest* >(object);
  (void)_this;
}
void SignTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.oauth.SignTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_.ClearToEmpty();
  scope_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.oauth.SignTokenRequest.subject"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.oauth.SignTokenRequest.TokenScope scope = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scope(static_cast<::sensory::api::oauth::SignTokenRequest_TokenScope>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.oauth.SignTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1 [(.validate.rules) = {
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.oauth.SignTokenRequest.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // .sensory.api.oauth.SignTokenRequest.TokenScope scope = 2 [(.validate.rules) = {
  if (this->_internal_scope() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scope(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.oauth.SignTokenRequest)
  return target;
}

size_t SignTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.oauth.SignTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 1 [(.validate.rules) = {
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // .sensory.api.oauth.SignTokenRequest.TokenScope scope = 2 [(.validate.rules) = {
  if (this->_internal_scope() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scope());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignTokenRequest::GetClassData() const { return &_class_data_; }

void SignTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignTokenRequest *>(to)->MergeFrom(
      static_cast<const SignTokenRequest &>(from));
}


void SignTokenRequest::MergeFrom(const SignTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.oauth.SignTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subject().empty()) {
    _internal_set_subject(from._internal_subject());
  }
  if (from._internal_scope() != 0) {
    _internal_set_scope(from._internal_scope());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignTokenRequest::CopyFrom(const SignTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.oauth.SignTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignTokenRequest::IsInitialized() const {
  return true;
}

void SignTokenRequest::InternalSwap(SignTokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subject_, lhs_arena,
      &other->subject_, rhs_arena
  );
  swap(scope_, other->scope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignTokenRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oauth_2foauth_2eproto_getter, &descriptor_table_oauth_2foauth_2eproto_once,
      file_level_metadata_oauth_2foauth_2eproto[1]);
}

// ===================================================================

class WhoAmIRequest::_Internal {
 public:
};

WhoAmIRequest::WhoAmIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sensory.api.oauth.WhoAmIRequest)
}
WhoAmIRequest::WhoAmIRequest(const WhoAmIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.oauth.WhoAmIRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WhoAmIRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WhoAmIRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata WhoAmIRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oauth_2foauth_2eproto_getter, &descriptor_table_oauth_2foauth_2eproto_once,
      file_level_metadata_oauth_2foauth_2eproto[2]);
}

// ===================================================================

class WhoAmIResponse::_Internal {
 public:
};

WhoAmIResponse::WhoAmIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.oauth.WhoAmIResponse)
}
WhoAmIResponse::WhoAmIResponse(const WhoAmIResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArenaForAllocation());
  }
  tenantid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tenantid().empty()) {
    tenantid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tenantid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.oauth.WhoAmIResponse)
}

void WhoAmIResponse::SharedCtor() {
clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tenantid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WhoAmIResponse::~WhoAmIResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.oauth.WhoAmIResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WhoAmIResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tenantid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WhoAmIResponse::ArenaDtor(void* object) {
  WhoAmIResponse* _this = reinterpret_cast< WhoAmIResponse* >(object);
  (void)_this;
}
void WhoAmIResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WhoAmIResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WhoAmIResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.oauth.WhoAmIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientid_.ClearToEmpty();
  tenantid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WhoAmIResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.oauth.WhoAmIResponse.clientId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tenantId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tenantid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.oauth.WhoAmIResponse.tenantId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WhoAmIResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.oauth.WhoAmIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.oauth.WhoAmIResponse.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  // string tenantId = 2;
  if (!this->_internal_tenantid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenantid().data(), static_cast<int>(this->_internal_tenantid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.oauth.WhoAmIResponse.tenantId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tenantid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.oauth.WhoAmIResponse)
  return target;
}

size_t WhoAmIResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.oauth.WhoAmIResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string tenantId = 2;
  if (!this->_internal_tenantid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenantid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WhoAmIResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WhoAmIResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WhoAmIResponse::GetClassData() const { return &_class_data_; }

void WhoAmIResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WhoAmIResponse *>(to)->MergeFrom(
      static_cast<const WhoAmIResponse &>(from));
}


void WhoAmIResponse::MergeFrom(const WhoAmIResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.oauth.WhoAmIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_tenantid().empty()) {
    _internal_set_tenantid(from._internal_tenantid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WhoAmIResponse::CopyFrom(const WhoAmIResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.oauth.WhoAmIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhoAmIResponse::IsInitialized() const {
  return true;
}

void WhoAmIResponse::InternalSwap(WhoAmIResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clientid_, lhs_arena,
      &other->clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tenantid_, lhs_arena,
      &other->tenantid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WhoAmIResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oauth_2foauth_2eproto_getter, &descriptor_table_oauth_2foauth_2eproto_once,
      file_level_metadata_oauth_2foauth_2eproto[3]);
}

// ===================================================================

class PublicKeyRequest::_Internal {
 public:
};

PublicKeyRequest::PublicKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.oauth.PublicKeyRequest)
}
PublicKeyRequest::PublicKeyRequest(const PublicKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keyid().empty()) {
    keyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_keyid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.oauth.PublicKeyRequest)
}

void PublicKeyRequest::SharedCtor() {
keyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PublicKeyRequest::~PublicKeyRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.oauth.PublicKeyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublicKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  keyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublicKeyRequest::ArenaDtor(void* object) {
  PublicKeyRequest* _this = reinterpret_cast< PublicKeyRequest* >(object);
  (void)_this;
}
void PublicKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublicKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.oauth.PublicKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string keyId = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_keyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.oauth.PublicKeyRequest.keyId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.oauth.PublicKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string keyId = 1 [(.validate.rules) = {
  if (!this->_internal_keyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_keyid().data(), static_cast<int>(this->_internal_keyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.oauth.PublicKeyRequest.keyId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_keyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.oauth.PublicKeyRequest)
  return target;
}

size_t PublicKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.oauth.PublicKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string keyId = 1 [(.validate.rules) = {
  if (!this->_internal_keyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_keyid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublicKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicKeyRequest::GetClassData() const { return &_class_data_; }

void PublicKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublicKeyRequest *>(to)->MergeFrom(
      static_cast<const PublicKeyRequest &>(from));
}


void PublicKeyRequest::MergeFrom(const PublicKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.oauth.PublicKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_keyid().empty()) {
    _internal_set_keyid(from._internal_keyid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicKeyRequest::CopyFrom(const PublicKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.oauth.PublicKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKeyRequest::IsInitialized() const {
  return true;
}

void PublicKeyRequest::InternalSwap(PublicKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &keyid_, lhs_arena,
      &other->keyid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKeyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oauth_2foauth_2eproto_getter, &descriptor_table_oauth_2foauth_2eproto_once,
      file_level_metadata_oauth_2foauth_2eproto[4]);
}

// ===================================================================

class PublicKeyResponse::_Internal {
 public:
};

PublicKeyResponse::PublicKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.oauth.PublicKeyResponse)
}
PublicKeyResponse::PublicKeyResponse(const PublicKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publickey().empty()) {
    publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_publickey(), 
      GetArenaForAllocation());
  }
  keytype_ = from.keytype_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.oauth.PublicKeyResponse)
}

void PublicKeyResponse::SharedCtor() {
publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
keytype_ = 0;
}

PublicKeyResponse::~PublicKeyResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.oauth.PublicKeyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublicKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublicKeyResponse::ArenaDtor(void* object) {
  PublicKeyResponse* _this = reinterpret_cast< PublicKeyResponse* >(object);
  (void)_this;
}
void PublicKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublicKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.oauth.PublicKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publickey_.ClearToEmpty();
  keytype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes publicKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_publickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.common.KeyType keyType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_keytype(static_cast<::sensory::api::common::KeyType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.oauth.PublicKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes publicKey = 1;
  if (!this->_internal_publickey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_publickey(), target);
  }

  // .sensory.api.common.KeyType keyType = 2;
  if (this->_internal_keytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_keytype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.oauth.PublicKeyResponse)
  return target;
}

size_t PublicKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.oauth.PublicKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes publicKey = 1;
  if (!this->_internal_publickey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_publickey());
  }

  // .sensory.api.common.KeyType keyType = 2;
  if (this->_internal_keytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_keytype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublicKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicKeyResponse::GetClassData() const { return &_class_data_; }

void PublicKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublicKeyResponse *>(to)->MergeFrom(
      static_cast<const PublicKeyResponse &>(from));
}


void PublicKeyResponse::MergeFrom(const PublicKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.oauth.PublicKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_publickey().empty()) {
    _internal_set_publickey(from._internal_publickey());
  }
  if (from._internal_keytype() != 0) {
    _internal_set_keytype(from._internal_keytype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicKeyResponse::CopyFrom(const PublicKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.oauth.PublicKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKeyResponse::IsInitialized() const {
  return true;
}

void PublicKeyResponse::InternalSwap(PublicKeyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &publickey_, lhs_arena,
      &other->publickey_, rhs_arena
  );
  swap(keytype_, other->keytype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKeyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_oauth_2foauth_2eproto_getter, &descriptor_table_oauth_2foauth_2eproto_once,
      file_level_metadata_oauth_2foauth_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace oauth
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensory::api::oauth::TokenRequest* Arena::CreateMaybeMessage< ::sensory::api::oauth::TokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::oauth::TokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::oauth::SignTokenRequest* Arena::CreateMaybeMessage< ::sensory::api::oauth::SignTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::oauth::SignTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::oauth::WhoAmIRequest* Arena::CreateMaybeMessage< ::sensory::api::oauth::WhoAmIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::oauth::WhoAmIRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::oauth::WhoAmIResponse* Arena::CreateMaybeMessage< ::sensory::api::oauth::WhoAmIResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::oauth::WhoAmIResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::oauth::PublicKeyRequest* Arena::CreateMaybeMessage< ::sensory::api::oauth::PublicKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::oauth::PublicKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::oauth::PublicKeyResponse* Arena::CreateMaybeMessage< ::sensory::api::oauth::PublicKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::oauth::PublicKeyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
