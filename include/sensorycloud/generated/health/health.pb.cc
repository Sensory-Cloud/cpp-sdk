// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: health/health.proto

#include "health/health.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensory {
namespace api {
namespace health {
constexpr HealthRequest::HealthRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HealthRequestDefaultTypeInternal {
  constexpr HealthRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HealthRequestDefaultTypeInternal() {}
  union {
    HealthRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HealthRequestDefaultTypeInternal _HealthRequest_default_instance_;
}  // namespace health
}  // namespace api
}  // namespace sensory
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_health_2fhealth_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_health_2fhealth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_health_2fhealth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_health_2fhealth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::health::HealthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sensory::api::health::HealthRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::health::_HealthRequest_default_instance_),
};

const char descriptor_table_protodef_health_2fhealth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023health/health.proto\022\022sensory.api.healt"
  "h\032\023common/common.proto\"\017\n\rHealthRequest2"
  "k\n\rHealthService\022Z\n\tGetHealth\022!.sensory."
  "api.health.HealthRequest\032(.sensory.api.c"
  "ommon.ServerHealthResponse\"\000Bv\n\032ai.senso"
  "rycloud.api.healthB\025SensoryApiHealthProt"
  "oP\001Z8gitlab.com/sensory-cloud/server/tit"
  "an.git/pkg/api/health\242\002\004SENGb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_health_2fhealth_2eproto_deps[1] = {
  &::descriptor_table_common_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_health_2fhealth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_health_2fhealth_2eproto = {
  false, false, 316, descriptor_table_protodef_health_2fhealth_2eproto, "health/health.proto", 
  &descriptor_table_health_2fhealth_2eproto_once, descriptor_table_health_2fhealth_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_health_2fhealth_2eproto::offsets,
  file_level_metadata_health_2fhealth_2eproto, file_level_enum_descriptors_health_2fhealth_2eproto, file_level_service_descriptors_health_2fhealth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_health_2fhealth_2eproto_getter() {
  return &descriptor_table_health_2fhealth_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_health_2fhealth_2eproto(&descriptor_table_health_2fhealth_2eproto);
namespace sensory {
namespace api {
namespace health {

// ===================================================================

class HealthRequest::_Internal {
 public:
};

HealthRequest::HealthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sensory.api.health.HealthRequest)
}
HealthRequest::HealthRequest(const HealthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.health.HealthRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HealthRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_health_2fhealth_2eproto_getter, &descriptor_table_health_2fhealth_2eproto_once,
      file_level_metadata_health_2fhealth_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace health
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensory::api::health::HealthRequest* Arena::CreateMaybeMessage< ::sensory::api::health::HealthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::health::HealthRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
