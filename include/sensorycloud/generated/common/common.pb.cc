// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/common.proto

#include "common/common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensory {
namespace api {
namespace common {
constexpr CompressionConfiguration::CompressionConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compressions_()
  , _compressions_cached_byte_size_(0){}
struct CompressionConfigurationDefaultTypeInternal {
  constexpr CompressionConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompressionConfigurationDefaultTypeInternal() {}
  union {
    CompressionConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompressionConfigurationDefaultTypeInternal _CompressionConfiguration_default_instance_;
constexpr TokenResponse::TokenResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accesstoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , keyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tokentype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expiresin_(0){}
struct TokenResponseDefaultTypeInternal {
  constexpr TokenResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenResponseDefaultTypeInternal() {}
  union {
    TokenResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenResponseDefaultTypeInternal _TokenResponse_default_instance_;
constexpr ServiceHealth::ServiceHealth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ishealthy_(false){}
struct ServiceHealthDefaultTypeInternal {
  constexpr ServiceHealthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceHealthDefaultTypeInternal() {}
  union {
    ServiceHealth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceHealthDefaultTypeInternal _ServiceHealth_default_instance_;
constexpr ServerHealthResponse::ServerHealthResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : services_()
  , serverversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ishealthy_(false)
  , isleader_(false)
  , servertype_(0)
{}
struct ServerHealthResponseDefaultTypeInternal {
  constexpr ServerHealthResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerHealthResponseDefaultTypeInternal() {}
  union {
    ServerHealthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerHealthResponseDefaultTypeInternal _ServerHealthResponse_default_instance_;
constexpr SystemSummary::SystemSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cpu_(nullptr)
  , memory_(nullptr){}
struct SystemSummaryDefaultTypeInternal {
  constexpr SystemSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SystemSummaryDefaultTypeInternal() {}
  union {
    SystemSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SystemSummaryDefaultTypeInternal _SystemSummary_default_instance_;
constexpr CpuSummary::CpuSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(uint64_t{0u})
  , nice_(uint64_t{0u})
  , system_(uint64_t{0u})
  , idle_(uint64_t{0u})
  , iowait_(uint64_t{0u})
  , irq_(uint64_t{0u})
  , softirq_(uint64_t{0u})
  , steal_(uint64_t{0u})
  , guest_(uint64_t{0u})
  , guestnice_(uint64_t{0u}){}
struct CpuSummaryDefaultTypeInternal {
  constexpr CpuSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CpuSummaryDefaultTypeInternal() {}
  union {
    CpuSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CpuSummaryDefaultTypeInternal _CpuSummary_default_instance_;
constexpr MemorySummary::MemorySummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : memtotal_(uint64_t{0u})
  , memfree_(uint64_t{0u})
  , memavailable_(uint64_t{0u}){}
struct MemorySummaryDefaultTypeInternal {
  constexpr MemorySummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemorySummaryDefaultTypeInternal() {}
  union {
    MemorySummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemorySummaryDefaultTypeInternal _MemorySummary_default_instance_;
constexpr GenericClient::GenericClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clientid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GenericClientDefaultTypeInternal {
  constexpr GenericClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericClientDefaultTypeInternal() {}
  union {
    GenericClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericClientDefaultTypeInternal _GenericClient_default_instance_;
constexpr TenantResponse::TenantResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , createdat_(nullptr)
  , updatedat_(nullptr){}
struct TenantResponseDefaultTypeInternal {
  constexpr TenantResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TenantResponseDefaultTypeInternal() {}
  union {
    TenantResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TenantResponseDefaultTypeInternal _TenantResponse_default_instance_;
constexpr PaginationOptions::PaginationOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ordering_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , decending_(false)
  , pageindex_(0)
  , pagesize_(0){}
struct PaginationOptionsDefaultTypeInternal {
  constexpr PaginationOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PaginationOptionsDefaultTypeInternal() {}
  union {
    PaginationOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PaginationOptionsDefaultTypeInternal _PaginationOptions_default_instance_;
constexpr PaginationResponse::PaginationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : possibleorderings_()
  , ordering_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , decending_(false)
  , pagesize_(0)
  , totalcount_(int64_t{0})
  , prevpageindex_(0)
  , currentpageindex_(0)
  , nextpageindex_(0){}
struct PaginationResponseDefaultTypeInternal {
  constexpr PaginationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PaginationResponseDefaultTypeInternal() {}
  union {
    PaginationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PaginationResponseDefaultTypeInternal _PaginationResponse_default_instance_;
constexpr EnrollmentToken::EnrollmentToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expiration_(int64_t{0}){}
struct EnrollmentTokenDefaultTypeInternal {
  constexpr EnrollmentTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnrollmentTokenDefaultTypeInternal() {}
  union {
    EnrollmentToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnrollmentTokenDefaultTypeInternal _EnrollmentToken_default_instance_;
constexpr CreateKeyRequest::CreateKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expiration_(int64_t{0})
  , keytype_(0)
{}
struct CreateKeyRequestDefaultTypeInternal {
  constexpr CreateKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateKeyRequestDefaultTypeInternal() {}
  union {
    CreateKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateKeyRequestDefaultTypeInternal _CreateKeyRequest_default_instance_;
constexpr KeyResponse::KeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tenantid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expiration_(int64_t{0})
  , keytype_(0)

  , disabled_(false){}
struct KeyResponseDefaultTypeInternal {
  constexpr KeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyResponseDefaultTypeInternal() {}
  union {
    KeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyResponseDefaultTypeInternal _KeyResponse_default_instance_;
}  // namespace common
}  // namespace api
}  // namespace sensory
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fcommon_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2fcommon_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CompressionConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CompressionConfiguration, compressions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::TokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::TokenResponse, accesstoken_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::TokenResponse, expiresin_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::TokenResponse, keyid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::TokenResponse, tokentype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::ServiceHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::ServiceHealth, ishealthy_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::ServiceHealth, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::ServiceHealth, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::ServerHealthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::ServerHealthResponse, ishealthy_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::ServerHealthResponse, serverversion_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::ServerHealthResponse, id_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::ServerHealthResponse, services_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::ServerHealthResponse, servertype_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::ServerHealthResponse, isleader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::SystemSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::SystemSummary, cpu_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::SystemSummary, memory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CpuSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CpuSummary, user_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CpuSummary, nice_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CpuSummary, system_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CpuSummary, idle_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CpuSummary, iowait_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CpuSummary, irq_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CpuSummary, softirq_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CpuSummary, steal_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CpuSummary, guest_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CpuSummary, guestnice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::MemorySummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::MemorySummary, memtotal_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::MemorySummary, memfree_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::MemorySummary, memavailable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::GenericClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::GenericClient, clientid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::GenericClient, secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::TenantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::TenantResponse, id_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::TenantResponse, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::TenantResponse, createdat_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::TenantResponse, updatedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationOptions, ordering_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationOptions, decending_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationOptions, pageindex_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationOptions, pagesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationResponse, ordering_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationResponse, decending_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationResponse, possibleorderings_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationResponse, totalcount_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationResponse, pagesize_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationResponse, prevpageindex_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationResponse, currentpageindex_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::PaginationResponse, nextpageindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::EnrollmentToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::EnrollmentToken, token_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::EnrollmentToken, expiration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CreateKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CreateKeyRequest, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CreateKeyRequest, keytype_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CreateKeyRequest, value_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::CreateKeyRequest, expiration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::KeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::KeyResponse, id_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::KeyResponse, name_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::KeyResponse, keytype_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::KeyResponse, expiration_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::KeyResponse, tenantid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::common::KeyResponse, disabled_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sensory::api::common::CompressionConfiguration)},
  { 7, -1, -1, sizeof(::sensory::api::common::TokenResponse)},
  { 17, -1, -1, sizeof(::sensory::api::common::ServiceHealth)},
  { 26, -1, -1, sizeof(::sensory::api::common::ServerHealthResponse)},
  { 38, -1, -1, sizeof(::sensory::api::common::SystemSummary)},
  { 46, -1, -1, sizeof(::sensory::api::common::CpuSummary)},
  { 62, -1, -1, sizeof(::sensory::api::common::MemorySummary)},
  { 71, -1, -1, sizeof(::sensory::api::common::GenericClient)},
  { 79, -1, -1, sizeof(::sensory::api::common::TenantResponse)},
  { 89, -1, -1, sizeof(::sensory::api::common::PaginationOptions)},
  { 99, -1, -1, sizeof(::sensory::api::common::PaginationResponse)},
  { 113, -1, -1, sizeof(::sensory::api::common::EnrollmentToken)},
  { 121, -1, -1, sizeof(::sensory::api::common::CreateKeyRequest)},
  { 131, -1, -1, sizeof(::sensory::api::common::KeyResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_CompressionConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_TokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_ServiceHealth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_ServerHealthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_SystemSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_CpuSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_MemorySummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_GenericClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_TenantResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_PaginationOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_PaginationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_EnrollmentToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_CreateKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::common::_KeyResponse_default_instance_),
};

const char descriptor_table_protodef_common_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023common/common.proto\022\022sensory.api.commo"
  "n\032\027validate/validate.proto\032\037google/proto"
  "buf/timestamp.proto\"U\n\030CompressionConfig"
  "uration\0229\n\014compressions\030\001 \003(\0162#.sensory."
  "api.common.CompressionType\"Y\n\rTokenRespo"
  "nse\022\023\n\013accessToken\030\001 \001(\t\022\021\n\texpiresIn\030\002 "
  "\001(\005\022\r\n\005keyId\030\003 \001(\t\022\021\n\ttokenType\030\004 \001(\t\"A\n"
  "\rServiceHealth\022\021\n\tisHealthy\030\001 \001(\010\022\014\n\004nam"
  "e\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"\307\001\n\024ServerHealt"
  "hResponse\022\021\n\tisHealthy\030\001 \001(\010\022\025\n\rserverVe"
  "rsion\030\002 \001(\t\022\n\n\002id\030\003 \001(\t\0223\n\010services\030\004 \003("
  "\0132!.sensory.api.common.ServiceHealth\0222\n\n"
  "serverType\030\005 \001(\0162\036.sensory.api.common.Se"
  "rverType\022\020\n\010isLeader\030\006 \001(\010\"\203\001\n\rSystemSum"
  "mary\0225\n\003cpu\030\001 \001(\0132\036.sensory.api.common.C"
  "puSummaryB\010\372B\005\212\001\002\020\001\022;\n\006memory\030\002 \001(\0132!.se"
  "nsory.api.common.MemorySummaryB\010\372B\005\212\001\002\020\001"
  "\"\245\001\n\nCpuSummary\022\014\n\004user\030\001 \001(\004\022\014\n\004nice\030\002 "
  "\001(\004\022\016\n\006system\030\003 \001(\004\022\014\n\004idle\030\004 \001(\004\022\016\n\006ioW"
  "ait\030\005 \001(\004\022\013\n\003irq\030\006 \001(\004\022\017\n\007softIrq\030\007 \001(\004\022"
  "\r\n\005steal\030\010 \001(\004\022\r\n\005guest\030\t \001(\004\022\021\n\tguestNi"
  "ce\030\n \001(\004\"H\n\rMemorySummary\022\020\n\010memTotal\030\001 "
  "\001(\004\022\017\n\007memFree\030\002 \001(\004\022\024\n\014memAvailable\030\003 \001"
  "(\004\"D\n\rGenericClient\022\032\n\010clientId\030\001 \001(\tB\010\372"
  "B\005r\003\260\001\001\022\027\n\006secret\030\002 \001(\tB\007\372B\004r\002\020\n\"\210\001\n\016Ten"
  "antResponse\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022-\n"
  "\tcreatedAt\030\003 \001(\0132\032.google.protobuf.Times"
  "tamp\022-\n\tupdatedAt\030\004 \001(\0132\032.google.protobu"
  "f.Timestamp\"]\n\021PaginationOptions\022\020\n\010orde"
  "ring\030\001 \001(\t\022\021\n\tdecending\030\002 \001(\010\022\021\n\tpageInd"
  "ex\030\003 \001(\005\022\020\n\010pageSize\030\004 \001(\005\"\302\001\n\022Paginatio"
  "nResponse\022\020\n\010ordering\030\001 \001(\t\022\021\n\tdecending"
  "\030\002 \001(\010\022\031\n\021possibleOrderings\030\003 \003(\t\022\022\n\ntot"
  "alCount\030\004 \001(\003\022\020\n\010pageSize\030\005 \001(\005\022\025\n\rprevP"
  "ageIndex\030\006 \001(\005\022\030\n\020currentPageIndex\030\007 \001(\005"
  "\022\025\n\rnextPageIndex\030\010 \001(\005\"4\n\017EnrollmentTok"
  "en\022\r\n\005token\030\001 \001(\014\022\022\n\nexpiration\030\002 \001(\003\"\206\001"
  "\n\020CreateKeyRequest\022\027\n\004name\030\001 \001(\tB\t\372B\006r\004\020"
  "\001\030\177\0226\n\007keyType\030\002 \001(\0162\033.sensory.api.commo"
  "n.KeyTypeB\010\372B\005\202\001\002\020\001\022\r\n\005value\030\003 \001(\t\022\022\n\nex"
  "piration\030\004 \001(\003\"\215\001\n\013KeyResponse\022\n\n\002id\030\001 \001"
  "(\t\022\014\n\004name\030\002 \001(\t\022,\n\007keyType\030\003 \001(\0162\033.sens"
  "ory.api.common.KeyType\022\022\n\nexpiration\030\004 \001"
  "(\003\022\020\n\010tenantId\030\005 \001(\t\022\020\n\010disabled\030\006 \001(\010*\026"
  "\n\004Void\022\016\n\nVOID_VALUE\020\000*Q\n\007KeyType\022\016\n\nPUB"
  "LIC_KEY\020\000\022\026\n\022PUBLIC_KEY_ED25519\020\001\022\021\n\rSHA"
  "RED_SECRET\020\003\022\013\n\007AES_256\020\004*4\n\013FeatureFlag"
  "\022\014\n\010TSSV_ALL\020\000\022\n\n\006TS_ALL\020\001\022\013\n\007TNL_ALL\020\002*"
  "\271\004\n\tModelType\022\013\n\007UNKNOWN\020\000\022$\n VOICE_BIOM"
  "ETRIC_TEXT_INDEPENDENT\020\001\022\034\n\030VOICE_BIOMET"
  "RIC_WAKEWORD\020\002\022\030\n\024VOICE_EVENT_WAKEWORD\020\003"
  "\022\034\n\030VOICE_TRANSCRIBE_GRAMMAR\020\004\022\'\n#VOICE_"
  "TRANSCRIBE_COMMAND_AND_SEARCH\020\005\022(\n$VOICE"
  "_RECOGNITION_ACTIVITY_DETECTION\020\006\022\033\n\027VOI"
  "CE_FEATURE_EXTRACTOR\020\007\022\"\n\036VOICE_BIOMETRI"
  "C_LIVENESS_DIGIT\020\010\022\"\n\036VOICE_BIOMETRIC_TE"
  "XT_DEPENDENT\020\t\022\023\n\017VOICE_SYNTHESIS\020\n\022\032\n\026S"
  "OUND_EVENT_ENROLLABLE\020d\022\034\n\030SOUND_EVENT_R"
  "EVALIDATION\020e\022\025\n\021SOUND_EVENT_FIXED\020f\022\025\n\021"
  "SOUND_SCENE_FIXED\020g\022\023\n\016FACE_BIOMETRIC\020\311\001"
  "\022\025\n\020FACE_RECOGNITION\020\312\001\022\027\n\022OBJECT_RECOGN"
  "ITION\020\313\001\022\024\n\017IMAGE_TRANSFORM\020\314\001\022\023\n\016FACE_E"
  "MBEDDING\020\315\001*J\n\016TechnologyType\022\013\n\007NOT_SET"
  "\020\000\022\010\n\004TSSV\020\001\022\006\n\002TS\020\002\022\007\n\003TNL\020\003\022\007\n\003STT\020\004\022\007"
  "\n\003TTS\020\005*&\n\017CompressionType\022\023\n\017IMAGE_GRAY"
  "SCALE\020\000*|\n\nClientType\022\013\n\007INVALID\020\000\022\n\n\006DE"
  "VICE\020\001\022\013\n\007CLUSTER\020\002\022\010\n\004USER\020\003\022\016\n\nSUPER_U"
  "SER\020\004\022\020\n\014BILLING_USER\020\005\022\022\n\016READ_ONLY_USE"
  "R\020\006\022\010\n\004ROOT\020d*g\n\016UsageEventType\022\022\n\016AUTHE"
  "NTICATION\020\000\022\017\n\013RECOGNITION\020\001\022\016\n\nENROLLME"
  "NT\020\002\022\r\n\tSYNTHESIS\020\003\022\021\n\rTRANSCRIPTION\020\004*\037"
  "\n\nServerType\022\t\n\005TITAN\020\000\022\006\n\002IO\020\001Bv\n\032ai.se"
  "nsorycloud.api.commonB\025SensoryApiCommonP"
  "rotoP\001Z8gitlab.com/sensory-cloud/server/"
  "titan.git/pkg/api/common\242\002\004SENGb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fcommon_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fcommon_2eproto = {
  false, false, 2999, descriptor_table_protodef_common_2fcommon_2eproto, "common/common.proto", 
  &descriptor_table_common_2fcommon_2eproto_once, descriptor_table_common_2fcommon_2eproto_deps, 2, 14,
  schemas, file_default_instances, TableStruct_common_2fcommon_2eproto::offsets,
  file_level_metadata_common_2fcommon_2eproto, file_level_enum_descriptors_common_2fcommon_2eproto, file_level_service_descriptors_common_2fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_common_2fcommon_2eproto_getter() {
  return &descriptor_table_common_2fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2fcommon_2eproto(&descriptor_table_common_2fcommon_2eproto);
namespace sensory {
namespace api {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Void_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[0];
}
bool Void_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[1];
}
bool KeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeatureFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[2];
}
bool FeatureFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[3];
}
bool ModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 100:
    case 101:
    case 102:
    case 103:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TechnologyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[4];
}
bool TechnologyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[5];
}
bool CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[6];
}
bool ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsageEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[7];
}
bool UsageEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[8];
}
bool ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CompressionConfiguration::_Internal {
 public:
};

CompressionConfiguration::CompressionConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  compressions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.CompressionConfiguration)
}
CompressionConfiguration::CompressionConfiguration(const CompressionConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      compressions_(from.compressions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.CompressionConfiguration)
}

void CompressionConfiguration::SharedCtor() {
}

CompressionConfiguration::~CompressionConfiguration() {
  // @@protoc_insertion_point(destructor:sensory.api.common.CompressionConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompressionConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CompressionConfiguration::ArenaDtor(void* object) {
  CompressionConfiguration* _this = reinterpret_cast< CompressionConfiguration* >(object);
  (void)_this;
}
void CompressionConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompressionConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompressionConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.CompressionConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compressions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompressionConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensory.api.common.CompressionType compressions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_compressions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_compressions(static_cast<::sensory::api::common::CompressionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompressionConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.CompressionConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensory.api.common.CompressionType compressions = 1;
  {
    int byte_size = _compressions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, compressions_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.CompressionConfiguration)
  return target;
}

size_t CompressionConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.CompressionConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensory.api.common.CompressionType compressions = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_compressions_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_compressions(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _compressions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompressionConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompressionConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompressionConfiguration::GetClassData() const { return &_class_data_; }

void CompressionConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CompressionConfiguration *>(to)->MergeFrom(
      static_cast<const CompressionConfiguration &>(from));
}


void CompressionConfiguration::MergeFrom(const CompressionConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.CompressionConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compressions_.MergeFrom(from.compressions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompressionConfiguration::CopyFrom(const CompressionConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.CompressionConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressionConfiguration::IsInitialized() const {
  return true;
}

void CompressionConfiguration::InternalSwap(CompressionConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  compressions_.InternalSwap(&other->compressions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompressionConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[0]);
}

// ===================================================================

class TokenResponse::_Internal {
 public:
};

TokenResponse::TokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.TokenResponse)
}
TokenResponse::TokenResponse(const TokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accesstoken().empty()) {
    accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accesstoken(), 
      GetArenaForAllocation());
  }
  keyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keyid().empty()) {
    keyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_keyid(), 
      GetArenaForAllocation());
  }
  tokentype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tokentype().empty()) {
    tokentype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tokentype(), 
      GetArenaForAllocation());
  }
  expiresin_ = from.expiresin_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.TokenResponse)
}

void TokenResponse::SharedCtor() {
accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
keyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tokentype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
expiresin_ = 0;
}

TokenResponse::~TokenResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.common.TokenResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  accesstoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokentype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenResponse::ArenaDtor(void* object) {
  TokenResponse* _this = reinterpret_cast< TokenResponse* >(object);
  (void)_this;
}
void TokenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.TokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accesstoken_.ClearToEmpty();
  keyid_.ClearToEmpty();
  tokentype_.ClearToEmpty();
  expiresin_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string accessToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.TokenResponse.accessToken"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 expiresIn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expiresin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string keyId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_keyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.TokenResponse.keyId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tokenType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tokentype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.TokenResponse.tokenType"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.TokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string accessToken = 1;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.TokenResponse.accessToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_accesstoken(), target);
  }

  // int32 expiresIn = 2;
  if (this->_internal_expiresin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_expiresin(), target);
  }

  // string keyId = 3;
  if (!this->_internal_keyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_keyid().data(), static_cast<int>(this->_internal_keyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.TokenResponse.keyId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_keyid(), target);
  }

  // string tokenType = 4;
  if (!this->_internal_tokentype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tokentype().data(), static_cast<int>(this->_internal_tokentype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.TokenResponse.tokenType");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tokentype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.TokenResponse)
  return target;
}

size_t TokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.TokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 1;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string keyId = 3;
  if (!this->_internal_keyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_keyid());
  }

  // string tokenType = 4;
  if (!this->_internal_tokentype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tokentype());
  }

  // int32 expiresIn = 2;
  if (this->_internal_expiresin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_expiresin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TokenResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenResponse::GetClassData() const { return &_class_data_; }

void TokenResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TokenResponse *>(to)->MergeFrom(
      static_cast<const TokenResponse &>(from));
}


void TokenResponse::MergeFrom(const TokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.TokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_keyid().empty()) {
    _internal_set_keyid(from._internal_keyid());
  }
  if (!from._internal_tokentype().empty()) {
    _internal_set_tokentype(from._internal_tokentype());
  }
  if (from._internal_expiresin() != 0) {
    _internal_set_expiresin(from._internal_expiresin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenResponse::CopyFrom(const TokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.TokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenResponse::IsInitialized() const {
  return true;
}

void TokenResponse::InternalSwap(TokenResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &accesstoken_, lhs_arena,
      &other->accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &keyid_, lhs_arena,
      &other->keyid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tokentype_, lhs_arena,
      &other->tokentype_, rhs_arena
  );
  swap(expiresin_, other->expiresin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[1]);
}

// ===================================================================

class ServiceHealth::_Internal {
 public:
};

ServiceHealth::ServiceHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.ServiceHealth)
}
ServiceHealth::ServiceHealth(const ServiceHealth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ishealthy_ = from.ishealthy_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.ServiceHealth)
}

void ServiceHealth::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ishealthy_ = false;
}

ServiceHealth::~ServiceHealth() {
  // @@protoc_insertion_point(destructor:sensory.api.common.ServiceHealth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceHealth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceHealth::ArenaDtor(void* object) {
  ServiceHealth* _this = reinterpret_cast< ServiceHealth* >(object);
  (void)_this;
}
void ServiceHealth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceHealth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.ServiceHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  message_.ClearToEmpty();
  ishealthy_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceHealth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isHealthy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ishealthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.ServiceHealth.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.ServiceHealth.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceHealth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.ServiceHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isHealthy = 1;
  if (this->_internal_ishealthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ishealthy(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.ServiceHealth.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.ServiceHealth.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.ServiceHealth)
  return target;
}

size_t ServiceHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.ServiceHealth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool isHealthy = 1;
  if (this->_internal_ishealthy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceHealth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceHealth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceHealth::GetClassData() const { return &_class_data_; }

void ServiceHealth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceHealth *>(to)->MergeFrom(
      static_cast<const ServiceHealth &>(from));
}


void ServiceHealth::MergeFrom(const ServiceHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.ServiceHealth)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_ishealthy() != 0) {
    _internal_set_ishealthy(from._internal_ishealthy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceHealth::CopyFrom(const ServiceHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.ServiceHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceHealth::IsInitialized() const {
  return true;
}

void ServiceHealth::InternalSwap(ServiceHealth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(ishealthy_, other->ishealthy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceHealth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[2]);
}

// ===================================================================

class ServerHealthResponse::_Internal {
 public:
};

ServerHealthResponse::ServerHealthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  services_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.ServerHealthResponse)
}
ServerHealthResponse::ServerHealthResponse(const ServerHealthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      services_(from.services_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverversion().empty()) {
    serverversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverversion(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ishealthy_, &from.ishealthy_,
    static_cast<size_t>(reinterpret_cast<char*>(&servertype_) -
    reinterpret_cast<char*>(&ishealthy_)) + sizeof(servertype_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.ServerHealthResponse)
}

void ServerHealthResponse::SharedCtor() {
serverversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ishealthy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&servertype_) -
    reinterpret_cast<char*>(&ishealthy_)) + sizeof(servertype_));
}

ServerHealthResponse::~ServerHealthResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.common.ServerHealthResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerHealthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serverversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerHealthResponse::ArenaDtor(void* object) {
  ServerHealthResponse* _this = reinterpret_cast< ServerHealthResponse* >(object);
  (void)_this;
}
void ServerHealthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerHealthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerHealthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.ServerHealthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  serverversion_.ClearToEmpty();
  id_.ClearToEmpty();
  ::memset(&ishealthy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servertype_) -
      reinterpret_cast<char*>(&ishealthy_)) + sizeof(servertype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerHealthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isHealthy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ishealthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serverVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serverversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.ServerHealthResponse.serverVersion"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.ServerHealthResponse.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sensory.api.common.ServiceHealth services = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.common.ServerType serverType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_servertype(static_cast<::sensory::api::common::ServerType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool isLeader = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isleader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerHealthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.ServerHealthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isHealthy = 1;
  if (this->_internal_ishealthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ishealthy(), target);
  }

  // string serverVersion = 2;
  if (!this->_internal_serverversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverversion().data(), static_cast<int>(this->_internal_serverversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.ServerHealthResponse.serverVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serverversion(), target);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.ServerHealthResponse.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // repeated .sensory.api.common.ServiceHealth services = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_services_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_services(i), target, stream);
  }

  // .sensory.api.common.ServerType serverType = 5;
  if (this->_internal_servertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_servertype(), target);
  }

  // bool isLeader = 6;
  if (this->_internal_isleader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isleader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.ServerHealthResponse)
  return target;
}

size_t ServerHealthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.ServerHealthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensory.api.common.ServiceHealth services = 4;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string serverVersion = 2;
  if (!this->_internal_serverversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverversion());
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool isHealthy = 1;
  if (this->_internal_ishealthy() != 0) {
    total_size += 1 + 1;
  }

  // bool isLeader = 6;
  if (this->_internal_isleader() != 0) {
    total_size += 1 + 1;
  }

  // .sensory.api.common.ServerType serverType = 5;
  if (this->_internal_servertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_servertype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerHealthResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerHealthResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerHealthResponse::GetClassData() const { return &_class_data_; }

void ServerHealthResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerHealthResponse *>(to)->MergeFrom(
      static_cast<const ServerHealthResponse &>(from));
}


void ServerHealthResponse::MergeFrom(const ServerHealthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.ServerHealthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (!from._internal_serverversion().empty()) {
    _internal_set_serverversion(from._internal_serverversion());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_ishealthy() != 0) {
    _internal_set_ishealthy(from._internal_ishealthy());
  }
  if (from._internal_isleader() != 0) {
    _internal_set_isleader(from._internal_isleader());
  }
  if (from._internal_servertype() != 0) {
    _internal_set_servertype(from._internal_servertype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerHealthResponse::CopyFrom(const ServerHealthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.ServerHealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHealthResponse::IsInitialized() const {
  return true;
}

void ServerHealthResponse::InternalSwap(ServerHealthResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  services_.InternalSwap(&other->services_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serverversion_, lhs_arena,
      &other->serverversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerHealthResponse, servertype_)
      + sizeof(ServerHealthResponse::servertype_)
      - PROTOBUF_FIELD_OFFSET(ServerHealthResponse, ishealthy_)>(
          reinterpret_cast<char*>(&ishealthy_),
          reinterpret_cast<char*>(&other->ishealthy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerHealthResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[3]);
}

// ===================================================================

class SystemSummary::_Internal {
 public:
  static const ::sensory::api::common::CpuSummary& cpu(const SystemSummary* msg);
  static const ::sensory::api::common::MemorySummary& memory(const SystemSummary* msg);
};

const ::sensory::api::common::CpuSummary&
SystemSummary::_Internal::cpu(const SystemSummary* msg) {
  return *msg->cpu_;
}
const ::sensory::api::common::MemorySummary&
SystemSummary::_Internal::memory(const SystemSummary* msg) {
  return *msg->memory_;
}
SystemSummary::SystemSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.SystemSummary)
}
SystemSummary::SystemSummary(const SystemSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cpu()) {
    cpu_ = new ::sensory::api::common::CpuSummary(*from.cpu_);
  } else {
    cpu_ = nullptr;
  }
  if (from._internal_has_memory()) {
    memory_ = new ::sensory::api::common::MemorySummary(*from.memory_);
  } else {
    memory_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.SystemSummary)
}

void SystemSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpu_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memory_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(memory_));
}

SystemSummary::~SystemSummary() {
  // @@protoc_insertion_point(destructor:sensory.api.common.SystemSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SystemSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cpu_;
  if (this != internal_default_instance()) delete memory_;
}

void SystemSummary::ArenaDtor(void* object) {
  SystemSummary* _this = reinterpret_cast< SystemSummary* >(object);
  (void)_this;
}
void SystemSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SystemSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.SystemSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && cpu_ != nullptr) {
    delete cpu_;
  }
  cpu_ = nullptr;
  if (GetArenaForAllocation() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensory.api.common.CpuSummary cpu = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.common.MemorySummary memory = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.SystemSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensory.api.common.CpuSummary cpu = 1 [(.validate.rules) = {
  if (this->_internal_has_cpu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cpu(this), target, stream);
  }

  // .sensory.api.common.MemorySummary memory = 2 [(.validate.rules) = {
  if (this->_internal_has_memory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::memory(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.SystemSummary)
  return target;
}

size_t SystemSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.SystemSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensory.api.common.CpuSummary cpu = 1 [(.validate.rules) = {
  if (this->_internal_has_cpu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpu_);
  }

  // .sensory.api.common.MemorySummary memory = 2 [(.validate.rules) = {
  if (this->_internal_has_memory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memory_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SystemSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemSummary::GetClassData() const { return &_class_data_; }

void SystemSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SystemSummary *>(to)->MergeFrom(
      static_cast<const SystemSummary &>(from));
}


void SystemSummary::MergeFrom(const SystemSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.SystemSummary)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cpu()) {
    _internal_mutable_cpu()->::sensory::api::common::CpuSummary::MergeFrom(from._internal_cpu());
  }
  if (from._internal_has_memory()) {
    _internal_mutable_memory()->::sensory::api::common::MemorySummary::MergeFrom(from._internal_memory());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemSummary::CopyFrom(const SystemSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.SystemSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSummary::IsInitialized() const {
  return true;
}

void SystemSummary::InternalSwap(SystemSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemSummary, memory_)
      + sizeof(SystemSummary::memory_)
      - PROTOBUF_FIELD_OFFSET(SystemSummary, cpu_)>(
          reinterpret_cast<char*>(&cpu_),
          reinterpret_cast<char*>(&other->cpu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[4]);
}

// ===================================================================

class CpuSummary::_Internal {
 public:
};

CpuSummary::CpuSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.CpuSummary)
}
CpuSummary::CpuSummary(const CpuSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_, &from.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&guestnice_) -
    reinterpret_cast<char*>(&user_)) + sizeof(guestnice_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.CpuSummary)
}

void CpuSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&guestnice_) -
    reinterpret_cast<char*>(&user_)) + sizeof(guestnice_));
}

CpuSummary::~CpuSummary() {
  // @@protoc_insertion_point(destructor:sensory.api.common.CpuSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CpuSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CpuSummary::ArenaDtor(void* object) {
  CpuSummary* _this = reinterpret_cast< CpuSummary* >(object);
  (void)_this;
}
void CpuSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpuSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CpuSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.CpuSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guestnice_) -
      reinterpret_cast<char*>(&user_)) + sizeof(guestnice_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 system = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 idle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ioWait = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          iowait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 irq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          irq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 softIrq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          softirq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 steal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          steal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guest = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          guest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guestNice = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          guestnice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.CpuSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user(), target);
  }

  // uint64 nice = 2;
  if (this->_internal_nice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nice(), target);
  }

  // uint64 system = 3;
  if (this->_internal_system() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_system(), target);
  }

  // uint64 idle = 4;
  if (this->_internal_idle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_idle(), target);
  }

  // uint64 ioWait = 5;
  if (this->_internal_iowait() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_iowait(), target);
  }

  // uint64 irq = 6;
  if (this->_internal_irq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_irq(), target);
  }

  // uint64 softIrq = 7;
  if (this->_internal_softirq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_softirq(), target);
  }

  // uint64 steal = 8;
  if (this->_internal_steal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_steal(), target);
  }

  // uint64 guest = 9;
  if (this->_internal_guest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_guest(), target);
  }

  // uint64 guestNice = 10;
  if (this->_internal_guestnice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_guestnice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.CpuSummary)
  return target;
}

size_t CpuSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.CpuSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user());
  }

  // uint64 nice = 2;
  if (this->_internal_nice() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nice());
  }

  // uint64 system = 3;
  if (this->_internal_system() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_system());
  }

  // uint64 idle = 4;
  if (this->_internal_idle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_idle());
  }

  // uint64 ioWait = 5;
  if (this->_internal_iowait() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_iowait());
  }

  // uint64 irq = 6;
  if (this->_internal_irq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_irq());
  }

  // uint64 softIrq = 7;
  if (this->_internal_softirq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_softirq());
  }

  // uint64 steal = 8;
  if (this->_internal_steal() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steal());
  }

  // uint64 guest = 9;
  if (this->_internal_guest() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_guest());
  }

  // uint64 guestNice = 10;
  if (this->_internal_guestnice() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_guestnice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CpuSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuSummary::GetClassData() const { return &_class_data_; }

void CpuSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CpuSummary *>(to)->MergeFrom(
      static_cast<const CpuSummary &>(from));
}


void CpuSummary::MergeFrom(const CpuSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.CpuSummary)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user() != 0) {
    _internal_set_user(from._internal_user());
  }
  if (from._internal_nice() != 0) {
    _internal_set_nice(from._internal_nice());
  }
  if (from._internal_system() != 0) {
    _internal_set_system(from._internal_system());
  }
  if (from._internal_idle() != 0) {
    _internal_set_idle(from._internal_idle());
  }
  if (from._internal_iowait() != 0) {
    _internal_set_iowait(from._internal_iowait());
  }
  if (from._internal_irq() != 0) {
    _internal_set_irq(from._internal_irq());
  }
  if (from._internal_softirq() != 0) {
    _internal_set_softirq(from._internal_softirq());
  }
  if (from._internal_steal() != 0) {
    _internal_set_steal(from._internal_steal());
  }
  if (from._internal_guest() != 0) {
    _internal_set_guest(from._internal_guest());
  }
  if (from._internal_guestnice() != 0) {
    _internal_set_guestnice(from._internal_guestnice());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuSummary::CopyFrom(const CpuSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.CpuSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuSummary::IsInitialized() const {
  return true;
}

void CpuSummary::InternalSwap(CpuSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuSummary, guestnice_)
      + sizeof(CpuSummary::guestnice_)
      - PROTOBUF_FIELD_OFFSET(CpuSummary, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[5]);
}

// ===================================================================

class MemorySummary::_Internal {
 public:
};

MemorySummary::MemorySummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.MemorySummary)
}
MemorySummary::MemorySummary(const MemorySummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&memtotal_, &from.memtotal_,
    static_cast<size_t>(reinterpret_cast<char*>(&memavailable_) -
    reinterpret_cast<char*>(&memtotal_)) + sizeof(memavailable_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.MemorySummary)
}

void MemorySummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&memtotal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memavailable_) -
    reinterpret_cast<char*>(&memtotal_)) + sizeof(memavailable_));
}

MemorySummary::~MemorySummary() {
  // @@protoc_insertion_point(destructor:sensory.api.common.MemorySummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemorySummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemorySummary::ArenaDtor(void* object) {
  MemorySummary* _this = reinterpret_cast< MemorySummary* >(object);
  (void)_this;
}
void MemorySummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemorySummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemorySummary::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.MemorySummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&memtotal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memavailable_) -
      reinterpret_cast<char*>(&memtotal_)) + sizeof(memavailable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemorySummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 memTotal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          memtotal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 memFree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          memfree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 memAvailable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          memavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemorySummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.MemorySummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 memTotal = 1;
  if (this->_internal_memtotal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memtotal(), target);
  }

  // uint64 memFree = 2;
  if (this->_internal_memfree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_memfree(), target);
  }

  // uint64 memAvailable = 3;
  if (this->_internal_memavailable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_memavailable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.MemorySummary)
  return target;
}

size_t MemorySummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.MemorySummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 memTotal = 1;
  if (this->_internal_memtotal() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_memtotal());
  }

  // uint64 memFree = 2;
  if (this->_internal_memfree() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_memfree());
  }

  // uint64 memAvailable = 3;
  if (this->_internal_memavailable() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_memavailable());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemorySummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemorySummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemorySummary::GetClassData() const { return &_class_data_; }

void MemorySummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemorySummary *>(to)->MergeFrom(
      static_cast<const MemorySummary &>(from));
}


void MemorySummary::MergeFrom(const MemorySummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.MemorySummary)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_memtotal() != 0) {
    _internal_set_memtotal(from._internal_memtotal());
  }
  if (from._internal_memfree() != 0) {
    _internal_set_memfree(from._internal_memfree());
  }
  if (from._internal_memavailable() != 0) {
    _internal_set_memavailable(from._internal_memavailable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemorySummary::CopyFrom(const MemorySummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.MemorySummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemorySummary::IsInitialized() const {
  return true;
}

void MemorySummary::InternalSwap(MemorySummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemorySummary, memavailable_)
      + sizeof(MemorySummary::memavailable_)
      - PROTOBUF_FIELD_OFFSET(MemorySummary, memtotal_)>(
          reinterpret_cast<char*>(&memtotal_),
          reinterpret_cast<char*>(&other->memtotal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemorySummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[6]);
}

// ===================================================================

class GenericClient::_Internal {
 public:
};

GenericClient::GenericClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.GenericClient)
}
GenericClient::GenericClient(const GenericClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArenaForAllocation());
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.GenericClient)
}

void GenericClient::SharedCtor() {
clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenericClient::~GenericClient() {
  // @@protoc_insertion_point(destructor:sensory.api.common.GenericClient)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenericClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericClient::ArenaDtor(void* object) {
  GenericClient* _this = reinterpret_cast< GenericClient* >(object);
  (void)_this;
}
void GenericClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericClient::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.GenericClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientid_.ClearToEmpty();
  secret_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientId = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.GenericClient.clientId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secret = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.GenericClient.secret"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.GenericClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1 [(.validate.rules) = {
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.GenericClient.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  // string secret = 2 [(.validate.rules) = {
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.GenericClient.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.GenericClient)
  return target;
}

size_t GenericClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.GenericClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1 [(.validate.rules) = {
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string secret = 2 [(.validate.rules) = {
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenericClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenericClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenericClient::GetClassData() const { return &_class_data_; }

void GenericClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GenericClient *>(to)->MergeFrom(
      static_cast<const GenericClient &>(from));
}


void GenericClient::MergeFrom(const GenericClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.GenericClient)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_secret().empty()) {
    _internal_set_secret(from._internal_secret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenericClient::CopyFrom(const GenericClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.GenericClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericClient::IsInitialized() const {
  return true;
}

void GenericClient::InternalSwap(GenericClient* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clientid_, lhs_arena,
      &other->clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_, lhs_arena,
      &other->secret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericClient::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[7]);
}

// ===================================================================

class TenantResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& createdat(const TenantResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updatedat(const TenantResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TenantResponse::_Internal::createdat(const TenantResponse* msg) {
  return *msg->createdat_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TenantResponse::_Internal::updatedat(const TenantResponse* msg) {
  return *msg->updatedat_;
}
void TenantResponse::clear_createdat() {
  if (GetArenaForAllocation() == nullptr && createdat_ != nullptr) {
    delete createdat_;
  }
  createdat_ = nullptr;
}
void TenantResponse::clear_updatedat() {
  if (GetArenaForAllocation() == nullptr && updatedat_ != nullptr) {
    delete updatedat_;
  }
  updatedat_ = nullptr;
}
TenantResponse::TenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.TenantResponse)
}
TenantResponse::TenantResponse(const TenantResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_createdat()) {
    createdat_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.createdat_);
  } else {
    createdat_ = nullptr;
  }
  if (from._internal_has_updatedat()) {
    updatedat_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.updatedat_);
  } else {
    updatedat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.TenantResponse)
}

void TenantResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&createdat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&updatedat_) -
    reinterpret_cast<char*>(&createdat_)) + sizeof(updatedat_));
}

TenantResponse::~TenantResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.common.TenantResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TenantResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete createdat_;
  if (this != internal_default_instance()) delete updatedat_;
}

void TenantResponse::ArenaDtor(void* object) {
  TenantResponse* _this = reinterpret_cast< TenantResponse* >(object);
  (void)_this;
}
void TenantResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TenantResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TenantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.TenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && createdat_ != nullptr) {
    delete createdat_;
  }
  createdat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && updatedat_ != nullptr) {
    delete updatedat_;
  }
  updatedat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TenantResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.TenantResponse.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.TenantResponse.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp createdAt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_createdat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updatedAt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatedat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TenantResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.TenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.TenantResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.TenantResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp createdAt = 3;
  if (this->_internal_has_createdat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::createdat(this), target, stream);
  }

  // .google.protobuf.Timestamp updatedAt = 4;
  if (this->_internal_has_updatedat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::updatedat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.TenantResponse)
  return target;
}

size_t TenantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.TenantResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp createdAt = 3;
  if (this->_internal_has_createdat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *createdat_);
  }

  // .google.protobuf.Timestamp updatedAt = 4;
  if (this->_internal_has_updatedat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updatedat_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TenantResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TenantResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TenantResponse::GetClassData() const { return &_class_data_; }

void TenantResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TenantResponse *>(to)->MergeFrom(
      static_cast<const TenantResponse &>(from));
}


void TenantResponse::MergeFrom(const TenantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.TenantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_createdat()) {
    _internal_mutable_createdat()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_createdat());
  }
  if (from._internal_has_updatedat()) {
    _internal_mutable_updatedat()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updatedat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TenantResponse::CopyFrom(const TenantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.TenantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TenantResponse::IsInitialized() const {
  return true;
}

void TenantResponse::InternalSwap(TenantResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TenantResponse, updatedat_)
      + sizeof(TenantResponse::updatedat_)
      - PROTOBUF_FIELD_OFFSET(TenantResponse, createdat_)>(
          reinterpret_cast<char*>(&createdat_),
          reinterpret_cast<char*>(&other->createdat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TenantResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[8]);
}

// ===================================================================

class PaginationOptions::_Internal {
 public:
};

PaginationOptions::PaginationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.PaginationOptions)
}
PaginationOptions::PaginationOptions(const PaginationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ordering_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ordering().empty()) {
    ordering_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ordering(), 
      GetArenaForAllocation());
  }
  ::memcpy(&decending_, &from.decending_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagesize_) -
    reinterpret_cast<char*>(&decending_)) + sizeof(pagesize_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.PaginationOptions)
}

void PaginationOptions::SharedCtor() {
ordering_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&decending_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pagesize_) -
    reinterpret_cast<char*>(&decending_)) + sizeof(pagesize_));
}

PaginationOptions::~PaginationOptions() {
  // @@protoc_insertion_point(destructor:sensory.api.common.PaginationOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PaginationOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ordering_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaginationOptions::ArenaDtor(void* object) {
  PaginationOptions* _this = reinterpret_cast< PaginationOptions* >(object);
  (void)_this;
}
void PaginationOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaginationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaginationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.PaginationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ordering_.ClearToEmpty();
  ::memset(&decending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagesize_) -
      reinterpret_cast<char*>(&decending_)) + sizeof(pagesize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaginationOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ordering = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ordering();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.PaginationOptions.ordering"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool decending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          decending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pageIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pageindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pageSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pagesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaginationOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.PaginationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ordering = 1;
  if (!this->_internal_ordering().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ordering().data(), static_cast<int>(this->_internal_ordering().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.PaginationOptions.ordering");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ordering(), target);
  }

  // bool decending = 2;
  if (this->_internal_decending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_decending(), target);
  }

  // int32 pageIndex = 3;
  if (this->_internal_pageindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pageindex(), target);
  }

  // int32 pageSize = 4;
  if (this->_internal_pagesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pagesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.PaginationOptions)
  return target;
}

size_t PaginationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.PaginationOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ordering = 1;
  if (!this->_internal_ordering().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordering());
  }

  // bool decending = 2;
  if (this->_internal_decending() != 0) {
    total_size += 1 + 1;
  }

  // int32 pageIndex = 3;
  if (this->_internal_pageindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pageindex());
  }

  // int32 pageSize = 4;
  if (this->_internal_pagesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pagesize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaginationOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaginationOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaginationOptions::GetClassData() const { return &_class_data_; }

void PaginationOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PaginationOptions *>(to)->MergeFrom(
      static_cast<const PaginationOptions &>(from));
}


void PaginationOptions::MergeFrom(const PaginationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.PaginationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ordering().empty()) {
    _internal_set_ordering(from._internal_ordering());
  }
  if (from._internal_decending() != 0) {
    _internal_set_decending(from._internal_decending());
  }
  if (from._internal_pageindex() != 0) {
    _internal_set_pageindex(from._internal_pageindex());
  }
  if (from._internal_pagesize() != 0) {
    _internal_set_pagesize(from._internal_pagesize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaginationOptions::CopyFrom(const PaginationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.PaginationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaginationOptions::IsInitialized() const {
  return true;
}

void PaginationOptions::InternalSwap(PaginationOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ordering_, lhs_arena,
      &other->ordering_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaginationOptions, pagesize_)
      + sizeof(PaginationOptions::pagesize_)
      - PROTOBUF_FIELD_OFFSET(PaginationOptions, decending_)>(
          reinterpret_cast<char*>(&decending_),
          reinterpret_cast<char*>(&other->decending_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaginationOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[9]);
}

// ===================================================================

class PaginationResponse::_Internal {
 public:
};

PaginationResponse::PaginationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  possibleorderings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.PaginationResponse)
}
PaginationResponse::PaginationResponse(const PaginationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      possibleorderings_(from.possibleorderings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ordering_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ordering().empty()) {
    ordering_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ordering(), 
      GetArenaForAllocation());
  }
  ::memcpy(&decending_, &from.decending_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextpageindex_) -
    reinterpret_cast<char*>(&decending_)) + sizeof(nextpageindex_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.PaginationResponse)
}

void PaginationResponse::SharedCtor() {
ordering_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&decending_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nextpageindex_) -
    reinterpret_cast<char*>(&decending_)) + sizeof(nextpageindex_));
}

PaginationResponse::~PaginationResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.common.PaginationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PaginationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ordering_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaginationResponse::ArenaDtor(void* object) {
  PaginationResponse* _this = reinterpret_cast< PaginationResponse* >(object);
  (void)_this;
}
void PaginationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaginationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaginationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.PaginationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  possibleorderings_.Clear();
  ordering_.ClearToEmpty();
  ::memset(&decending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextpageindex_) -
      reinterpret_cast<char*>(&decending_)) + sizeof(nextpageindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaginationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ordering = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ordering();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.PaginationResponse.ordering"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool decending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          decending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string possibleOrderings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_possibleorderings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.PaginationResponse.possibleOrderings"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 totalCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          totalcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pageSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pagesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prevPageIndex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prevpageindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 currentPageIndex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          currentpageindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nextPageIndex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          nextpageindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaginationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.PaginationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ordering = 1;
  if (!this->_internal_ordering().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ordering().data(), static_cast<int>(this->_internal_ordering().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.PaginationResponse.ordering");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ordering(), target);
  }

  // bool decending = 2;
  if (this->_internal_decending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_decending(), target);
  }

  // repeated string possibleOrderings = 3;
  for (int i = 0, n = this->_internal_possibleorderings_size(); i < n; i++) {
    const auto& s = this->_internal_possibleorderings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.PaginationResponse.possibleOrderings");
    target = stream->WriteString(3, s, target);
  }

  // int64 totalCount = 4;
  if (this->_internal_totalcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_totalcount(), target);
  }

  // int32 pageSize = 5;
  if (this->_internal_pagesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pagesize(), target);
  }

  // int32 prevPageIndex = 6;
  if (this->_internal_prevpageindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_prevpageindex(), target);
  }

  // int32 currentPageIndex = 7;
  if (this->_internal_currentpageindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_currentpageindex(), target);
  }

  // int32 nextPageIndex = 8;
  if (this->_internal_nextpageindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_nextpageindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.PaginationResponse)
  return target;
}

size_t PaginationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.PaginationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string possibleOrderings = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(possibleorderings_.size());
  for (int i = 0, n = possibleorderings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      possibleorderings_.Get(i));
  }

  // string ordering = 1;
  if (!this->_internal_ordering().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordering());
  }

  // bool decending = 2;
  if (this->_internal_decending() != 0) {
    total_size += 1 + 1;
  }

  // int32 pageSize = 5;
  if (this->_internal_pagesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pagesize());
  }

  // int64 totalCount = 4;
  if (this->_internal_totalcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_totalcount());
  }

  // int32 prevPageIndex = 6;
  if (this->_internal_prevpageindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_prevpageindex());
  }

  // int32 currentPageIndex = 7;
  if (this->_internal_currentpageindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_currentpageindex());
  }

  // int32 nextPageIndex = 8;
  if (this->_internal_nextpageindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nextpageindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaginationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaginationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaginationResponse::GetClassData() const { return &_class_data_; }

void PaginationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PaginationResponse *>(to)->MergeFrom(
      static_cast<const PaginationResponse &>(from));
}


void PaginationResponse::MergeFrom(const PaginationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.PaginationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  possibleorderings_.MergeFrom(from.possibleorderings_);
  if (!from._internal_ordering().empty()) {
    _internal_set_ordering(from._internal_ordering());
  }
  if (from._internal_decending() != 0) {
    _internal_set_decending(from._internal_decending());
  }
  if (from._internal_pagesize() != 0) {
    _internal_set_pagesize(from._internal_pagesize());
  }
  if (from._internal_totalcount() != 0) {
    _internal_set_totalcount(from._internal_totalcount());
  }
  if (from._internal_prevpageindex() != 0) {
    _internal_set_prevpageindex(from._internal_prevpageindex());
  }
  if (from._internal_currentpageindex() != 0) {
    _internal_set_currentpageindex(from._internal_currentpageindex());
  }
  if (from._internal_nextpageindex() != 0) {
    _internal_set_nextpageindex(from._internal_nextpageindex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaginationResponse::CopyFrom(const PaginationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.PaginationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaginationResponse::IsInitialized() const {
  return true;
}

void PaginationResponse::InternalSwap(PaginationResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  possibleorderings_.InternalSwap(&other->possibleorderings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ordering_, lhs_arena,
      &other->ordering_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaginationResponse, nextpageindex_)
      + sizeof(PaginationResponse::nextpageindex_)
      - PROTOBUF_FIELD_OFFSET(PaginationResponse, decending_)>(
          reinterpret_cast<char*>(&decending_),
          reinterpret_cast<char*>(&other->decending_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaginationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[10]);
}

// ===================================================================

class EnrollmentToken::_Internal {
 public:
};

EnrollmentToken::EnrollmentToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.EnrollmentToken)
}
EnrollmentToken::EnrollmentToken(const EnrollmentToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  expiration_ = from.expiration_;
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.EnrollmentToken)
}

void EnrollmentToken::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
expiration_ = int64_t{0};
}

EnrollmentToken::~EnrollmentToken() {
  // @@protoc_insertion_point(destructor:sensory.api.common.EnrollmentToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnrollmentToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnrollmentToken::ArenaDtor(void* object) {
  EnrollmentToken* _this = reinterpret_cast< EnrollmentToken* >(object);
  (void)_this;
}
void EnrollmentToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnrollmentToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnrollmentToken::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.EnrollmentToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  expiration_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnrollmentToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 expiration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollmentToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.EnrollmentToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (!this->_internal_token().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int64 expiration = 2;
  if (this->_internal_expiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_expiration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.EnrollmentToken)
  return target;
}

size_t EnrollmentToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.EnrollmentToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // int64 expiration = 2;
  if (this->_internal_expiration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_expiration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnrollmentToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnrollmentToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnrollmentToken::GetClassData() const { return &_class_data_; }

void EnrollmentToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnrollmentToken *>(to)->MergeFrom(
      static_cast<const EnrollmentToken &>(from));
}


void EnrollmentToken::MergeFrom(const EnrollmentToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.EnrollmentToken)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_expiration() != 0) {
    _internal_set_expiration(from._internal_expiration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnrollmentToken::CopyFrom(const EnrollmentToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.EnrollmentToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollmentToken::IsInitialized() const {
  return true;
}

void EnrollmentToken::InternalSwap(EnrollmentToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  swap(expiration_, other->expiration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollmentToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[11]);
}

// ===================================================================

class CreateKeyRequest::_Internal {
 public:
};

CreateKeyRequest::CreateKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.CreateKeyRequest)
}
CreateKeyRequest::CreateKeyRequest(const CreateKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&expiration_, &from.expiration_,
    static_cast<size_t>(reinterpret_cast<char*>(&keytype_) -
    reinterpret_cast<char*>(&expiration_)) + sizeof(keytype_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.CreateKeyRequest)
}

void CreateKeyRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expiration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&keytype_) -
    reinterpret_cast<char*>(&expiration_)) + sizeof(keytype_));
}

CreateKeyRequest::~CreateKeyRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.common.CreateKeyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateKeyRequest::ArenaDtor(void* object) {
  CreateKeyRequest* _this = reinterpret_cast< CreateKeyRequest* >(object);
  (void)_this;
}
void CreateKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.CreateKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  value_.ClearToEmpty();
  ::memset(&expiration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keytype_) -
      reinterpret_cast<char*>(&expiration_)) + sizeof(keytype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.CreateKeyRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.common.KeyType keyType = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_keytype(static_cast<::sensory::api::common::KeyType>(val));
        } else
          goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.CreateKeyRequest.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 expiration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.CreateKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.validate.rules) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.CreateKeyRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .sensory.api.common.KeyType keyType = 2 [(.validate.rules) = {
  if (this->_internal_keytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_keytype(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.CreateKeyRequest.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // int64 expiration = 4;
  if (this->_internal_expiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_expiration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.CreateKeyRequest)
  return target;
}

size_t CreateKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.CreateKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.validate.rules) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int64 expiration = 4;
  if (this->_internal_expiration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_expiration());
  }

  // .sensory.api.common.KeyType keyType = 2 [(.validate.rules) = {
  if (this->_internal_keytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_keytype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateKeyRequest::GetClassData() const { return &_class_data_; }

void CreateKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateKeyRequest *>(to)->MergeFrom(
      static_cast<const CreateKeyRequest &>(from));
}


void CreateKeyRequest::MergeFrom(const CreateKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.CreateKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_expiration() != 0) {
    _internal_set_expiration(from._internal_expiration());
  }
  if (from._internal_keytype() != 0) {
    _internal_set_keytype(from._internal_keytype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateKeyRequest::CopyFrom(const CreateKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.CreateKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateKeyRequest::IsInitialized() const {
  return true;
}

void CreateKeyRequest::InternalSwap(CreateKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateKeyRequest, keytype_)
      + sizeof(CreateKeyRequest::keytype_)
      - PROTOBUF_FIELD_OFFSET(CreateKeyRequest, expiration_)>(
          reinterpret_cast<char*>(&expiration_),
          reinterpret_cast<char*>(&other->expiration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateKeyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[12]);
}

// ===================================================================

class KeyResponse::_Internal {
 public:
};

KeyResponse::KeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.common.KeyResponse)
}
KeyResponse::KeyResponse(const KeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  tenantid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tenantid().empty()) {
    tenantid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tenantid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&expiration_, &from.expiration_,
    static_cast<size_t>(reinterpret_cast<char*>(&disabled_) -
    reinterpret_cast<char*>(&expiration_)) + sizeof(disabled_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.common.KeyResponse)
}

void KeyResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tenantid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expiration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disabled_) -
    reinterpret_cast<char*>(&expiration_)) + sizeof(disabled_));
}

KeyResponse::~KeyResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.common.KeyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tenantid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyResponse::ArenaDtor(void* object) {
  KeyResponse* _this = reinterpret_cast< KeyResponse* >(object);
  (void)_this;
}
void KeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.common.KeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  tenantid_.ClearToEmpty();
  ::memset(&expiration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&expiration_)) + sizeof(disabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.KeyResponse.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.KeyResponse.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensory.api.common.KeyType keyType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_keytype(static_cast<::sensory::api::common::KeyType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 expiration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tenantId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tenantid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.common.KeyResponse.tenantId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.common.KeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.KeyResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.KeyResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .sensory.api.common.KeyType keyType = 3;
  if (this->_internal_keytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_keytype(), target);
  }

  // int64 expiration = 4;
  if (this->_internal_expiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_expiration(), target);
  }

  // string tenantId = 5;
  if (!this->_internal_tenantid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tenantid().data(), static_cast<int>(this->_internal_tenantid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.common.KeyResponse.tenantId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tenantid(), target);
  }

  // bool disabled = 6;
  if (this->_internal_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.common.KeyResponse)
  return target;
}

size_t KeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.common.KeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string tenantId = 5;
  if (!this->_internal_tenantid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tenantid());
  }

  // int64 expiration = 4;
  if (this->_internal_expiration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_expiration());
  }

  // .sensory.api.common.KeyType keyType = 3;
  if (this->_internal_keytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_keytype());
  }

  // bool disabled = 6;
  if (this->_internal_disabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyResponse::GetClassData() const { return &_class_data_; }

void KeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyResponse *>(to)->MergeFrom(
      static_cast<const KeyResponse &>(from));
}


void KeyResponse::MergeFrom(const KeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.common.KeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_tenantid().empty()) {
    _internal_set_tenantid(from._internal_tenantid());
  }
  if (from._internal_expiration() != 0) {
    _internal_set_expiration(from._internal_expiration());
  }
  if (from._internal_keytype() != 0) {
    _internal_set_keytype(from._internal_keytype());
  }
  if (from._internal_disabled() != 0) {
    _internal_set_disabled(from._internal_disabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyResponse::CopyFrom(const KeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.common.KeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyResponse::IsInitialized() const {
  return true;
}

void KeyResponse::InternalSwap(KeyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tenantid_, lhs_arena,
      &other->tenantid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyResponse, disabled_)
      + sizeof(KeyResponse::disabled_)
      - PROTOBUF_FIELD_OFFSET(KeyResponse, expiration_)>(
          reinterpret_cast<char*>(&expiration_),
          reinterpret_cast<char*>(&other->expiration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensory::api::common::CompressionConfiguration* Arena::CreateMaybeMessage< ::sensory::api::common::CompressionConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::CompressionConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::TokenResponse* Arena::CreateMaybeMessage< ::sensory::api::common::TokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::TokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::ServiceHealth* Arena::CreateMaybeMessage< ::sensory::api::common::ServiceHealth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::ServiceHealth >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::ServerHealthResponse* Arena::CreateMaybeMessage< ::sensory::api::common::ServerHealthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::ServerHealthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::SystemSummary* Arena::CreateMaybeMessage< ::sensory::api::common::SystemSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::SystemSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::CpuSummary* Arena::CreateMaybeMessage< ::sensory::api::common::CpuSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::CpuSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::MemorySummary* Arena::CreateMaybeMessage< ::sensory::api::common::MemorySummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::MemorySummary >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::GenericClient* Arena::CreateMaybeMessage< ::sensory::api::common::GenericClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::GenericClient >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::TenantResponse* Arena::CreateMaybeMessage< ::sensory::api::common::TenantResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::TenantResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::PaginationOptions* Arena::CreateMaybeMessage< ::sensory::api::common::PaginationOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::PaginationOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::PaginationResponse* Arena::CreateMaybeMessage< ::sensory::api::common::PaginationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::PaginationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::EnrollmentToken* Arena::CreateMaybeMessage< ::sensory::api::common::EnrollmentToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::EnrollmentToken >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::CreateKeyRequest* Arena::CreateMaybeMessage< ::sensory::api::common::CreateKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::CreateKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::common::KeyResponse* Arena::CreateMaybeMessage< ::sensory::api::common::KeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::common::KeyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
