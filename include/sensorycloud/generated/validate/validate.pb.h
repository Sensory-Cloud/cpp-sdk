// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validate/validate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_validate_2fvalidate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_validate_2fvalidate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_validate_2fvalidate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_validate_2fvalidate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_validate_2fvalidate_2eproto;
namespace validate {
class AnyRules;
struct AnyRulesDefaultTypeInternal;
extern AnyRulesDefaultTypeInternal _AnyRules_default_instance_;
class BoolRules;
struct BoolRulesDefaultTypeInternal;
extern BoolRulesDefaultTypeInternal _BoolRules_default_instance_;
class BytesRules;
struct BytesRulesDefaultTypeInternal;
extern BytesRulesDefaultTypeInternal _BytesRules_default_instance_;
class DoubleRules;
struct DoubleRulesDefaultTypeInternal;
extern DoubleRulesDefaultTypeInternal _DoubleRules_default_instance_;
class DurationRules;
struct DurationRulesDefaultTypeInternal;
extern DurationRulesDefaultTypeInternal _DurationRules_default_instance_;
class EnumRules;
struct EnumRulesDefaultTypeInternal;
extern EnumRulesDefaultTypeInternal _EnumRules_default_instance_;
class FieldRules;
struct FieldRulesDefaultTypeInternal;
extern FieldRulesDefaultTypeInternal _FieldRules_default_instance_;
class Fixed32Rules;
struct Fixed32RulesDefaultTypeInternal;
extern Fixed32RulesDefaultTypeInternal _Fixed32Rules_default_instance_;
class Fixed64Rules;
struct Fixed64RulesDefaultTypeInternal;
extern Fixed64RulesDefaultTypeInternal _Fixed64Rules_default_instance_;
class FloatRules;
struct FloatRulesDefaultTypeInternal;
extern FloatRulesDefaultTypeInternal _FloatRules_default_instance_;
class Int32Rules;
struct Int32RulesDefaultTypeInternal;
extern Int32RulesDefaultTypeInternal _Int32Rules_default_instance_;
class Int64Rules;
struct Int64RulesDefaultTypeInternal;
extern Int64RulesDefaultTypeInternal _Int64Rules_default_instance_;
class MapRules;
struct MapRulesDefaultTypeInternal;
extern MapRulesDefaultTypeInternal _MapRules_default_instance_;
class MessageRules;
struct MessageRulesDefaultTypeInternal;
extern MessageRulesDefaultTypeInternal _MessageRules_default_instance_;
class RepeatedRules;
struct RepeatedRulesDefaultTypeInternal;
extern RepeatedRulesDefaultTypeInternal _RepeatedRules_default_instance_;
class SFixed32Rules;
struct SFixed32RulesDefaultTypeInternal;
extern SFixed32RulesDefaultTypeInternal _SFixed32Rules_default_instance_;
class SFixed64Rules;
struct SFixed64RulesDefaultTypeInternal;
extern SFixed64RulesDefaultTypeInternal _SFixed64Rules_default_instance_;
class SInt32Rules;
struct SInt32RulesDefaultTypeInternal;
extern SInt32RulesDefaultTypeInternal _SInt32Rules_default_instance_;
class SInt64Rules;
struct SInt64RulesDefaultTypeInternal;
extern SInt64RulesDefaultTypeInternal _SInt64Rules_default_instance_;
class StringRules;
struct StringRulesDefaultTypeInternal;
extern StringRulesDefaultTypeInternal _StringRules_default_instance_;
class TimestampRules;
struct TimestampRulesDefaultTypeInternal;
extern TimestampRulesDefaultTypeInternal _TimestampRules_default_instance_;
class UInt32Rules;
struct UInt32RulesDefaultTypeInternal;
extern UInt32RulesDefaultTypeInternal _UInt32Rules_default_instance_;
class UInt64Rules;
struct UInt64RulesDefaultTypeInternal;
extern UInt64RulesDefaultTypeInternal _UInt64Rules_default_instance_;
}  // namespace validate
PROTOBUF_NAMESPACE_OPEN
template<> ::validate::AnyRules* Arena::CreateMaybeMessage<::validate::AnyRules>(Arena*);
template<> ::validate::BoolRules* Arena::CreateMaybeMessage<::validate::BoolRules>(Arena*);
template<> ::validate::BytesRules* Arena::CreateMaybeMessage<::validate::BytesRules>(Arena*);
template<> ::validate::DoubleRules* Arena::CreateMaybeMessage<::validate::DoubleRules>(Arena*);
template<> ::validate::DurationRules* Arena::CreateMaybeMessage<::validate::DurationRules>(Arena*);
template<> ::validate::EnumRules* Arena::CreateMaybeMessage<::validate::EnumRules>(Arena*);
template<> ::validate::FieldRules* Arena::CreateMaybeMessage<::validate::FieldRules>(Arena*);
template<> ::validate::Fixed32Rules* Arena::CreateMaybeMessage<::validate::Fixed32Rules>(Arena*);
template<> ::validate::Fixed64Rules* Arena::CreateMaybeMessage<::validate::Fixed64Rules>(Arena*);
template<> ::validate::FloatRules* Arena::CreateMaybeMessage<::validate::FloatRules>(Arena*);
template<> ::validate::Int32Rules* Arena::CreateMaybeMessage<::validate::Int32Rules>(Arena*);
template<> ::validate::Int64Rules* Arena::CreateMaybeMessage<::validate::Int64Rules>(Arena*);
template<> ::validate::MapRules* Arena::CreateMaybeMessage<::validate::MapRules>(Arena*);
template<> ::validate::MessageRules* Arena::CreateMaybeMessage<::validate::MessageRules>(Arena*);
template<> ::validate::RepeatedRules* Arena::CreateMaybeMessage<::validate::RepeatedRules>(Arena*);
template<> ::validate::SFixed32Rules* Arena::CreateMaybeMessage<::validate::SFixed32Rules>(Arena*);
template<> ::validate::SFixed64Rules* Arena::CreateMaybeMessage<::validate::SFixed64Rules>(Arena*);
template<> ::validate::SInt32Rules* Arena::CreateMaybeMessage<::validate::SInt32Rules>(Arena*);
template<> ::validate::SInt64Rules* Arena::CreateMaybeMessage<::validate::SInt64Rules>(Arena*);
template<> ::validate::StringRules* Arena::CreateMaybeMessage<::validate::StringRules>(Arena*);
template<> ::validate::TimestampRules* Arena::CreateMaybeMessage<::validate::TimestampRules>(Arena*);
template<> ::validate::UInt32Rules* Arena::CreateMaybeMessage<::validate::UInt32Rules>(Arena*);
template<> ::validate::UInt64Rules* Arena::CreateMaybeMessage<::validate::UInt64Rules>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace validate {

enum KnownRegex : int {
  UNKNOWN = 0,
  HTTP_HEADER_NAME = 1,
  HTTP_HEADER_VALUE = 2
};
bool KnownRegex_IsValid(int value);
constexpr KnownRegex KnownRegex_MIN = UNKNOWN;
constexpr KnownRegex KnownRegex_MAX = HTTP_HEADER_VALUE;
constexpr int KnownRegex_ARRAYSIZE = KnownRegex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KnownRegex_descriptor();
template<typename T>
inline const std::string& KnownRegex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KnownRegex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KnownRegex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KnownRegex_descriptor(), enum_t_value);
}
inline bool KnownRegex_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KnownRegex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KnownRegex>(
    KnownRegex_descriptor(), name, value);
}
// ===================================================================

class FieldRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.FieldRules) */ {
 public:
  inline FieldRules() : FieldRules(nullptr) {}
  ~FieldRules() override;
  explicit constexpr FieldRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldRules(const FieldRules& from);
  FieldRules(FieldRules&& from) noexcept
    : FieldRules() {
    *this = ::std::move(from);
  }

  inline FieldRules& operator=(const FieldRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldRules& operator=(FieldRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldRules& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kFloat = 1,
    kDouble = 2,
    kInt32 = 3,
    kInt64 = 4,
    kUint32 = 5,
    kUint64 = 6,
    kSint32 = 7,
    kSint64 = 8,
    kFixed32 = 9,
    kFixed64 = 10,
    kSfixed32 = 11,
    kSfixed64 = 12,
    kBool = 13,
    kString = 14,
    kBytes = 15,
    kEnum = 16,
    kRepeated = 18,
    kMap = 19,
    kAny = 20,
    kDuration = 21,
    kTimestamp = 22,
    TYPE_NOT_SET = 0,
  };

  static inline const FieldRules* internal_default_instance() {
    return reinterpret_cast<const FieldRules*>(
               &_FieldRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FieldRules& a, FieldRules& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldRules* New() const final {
    return new FieldRules();
  }

  FieldRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.FieldRules";
  }
  protected:
  explicit FieldRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 17,
    kFloatFieldNumber = 1,
    kDoubleFieldNumber = 2,
    kInt32FieldNumber = 3,
    kInt64FieldNumber = 4,
    kUint32FieldNumber = 5,
    kUint64FieldNumber = 6,
    kSint32FieldNumber = 7,
    kSint64FieldNumber = 8,
    kFixed32FieldNumber = 9,
    kFixed64FieldNumber = 10,
    kSfixed32FieldNumber = 11,
    kSfixed64FieldNumber = 12,
    kBoolFieldNumber = 13,
    kStringFieldNumber = 14,
    kBytesFieldNumber = 15,
    kEnumFieldNumber = 16,
    kRepeatedFieldNumber = 18,
    kMapFieldNumber = 19,
    kAnyFieldNumber = 20,
    kDurationFieldNumber = 21,
    kTimestampFieldNumber = 22,
  };
  // optional .validate.MessageRules message = 17;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::validate::MessageRules& message() const;
  PROTOBUF_MUST_USE_RESULT ::validate::MessageRules* release_message();
  ::validate::MessageRules* mutable_message();
  void set_allocated_message(::validate::MessageRules* message);
  private:
  const ::validate::MessageRules& _internal_message() const;
  ::validate::MessageRules* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::validate::MessageRules* message);
  ::validate::MessageRules* unsafe_arena_release_message();

  // .validate.FloatRules float = 1;
  bool has_float_() const;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  const ::validate::FloatRules& float_() const;
  PROTOBUF_MUST_USE_RESULT ::validate::FloatRules* release_float_();
  ::validate::FloatRules* mutable_float_();
  void set_allocated_float_(::validate::FloatRules* float_);
  private:
  const ::validate::FloatRules& _internal_float_() const;
  ::validate::FloatRules* _internal_mutable_float_();
  public:
  void unsafe_arena_set_allocated_float_(
      ::validate::FloatRules* float_);
  ::validate::FloatRules* unsafe_arena_release_float_();

  // .validate.DoubleRules double = 2;
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  const ::validate::DoubleRules& double_() const;
  PROTOBUF_MUST_USE_RESULT ::validate::DoubleRules* release_double_();
  ::validate::DoubleRules* mutable_double_();
  void set_allocated_double_(::validate::DoubleRules* double_);
  private:
  const ::validate::DoubleRules& _internal_double_() const;
  ::validate::DoubleRules* _internal_mutable_double_();
  public:
  void unsafe_arena_set_allocated_double_(
      ::validate::DoubleRules* double_);
  ::validate::DoubleRules* unsafe_arena_release_double_();

  // .validate.Int32Rules int32 = 3;
  bool has_int32() const;
  private:
  bool _internal_has_int32() const;
  public:
  void clear_int32();
  const ::validate::Int32Rules& int32() const;
  PROTOBUF_MUST_USE_RESULT ::validate::Int32Rules* release_int32();
  ::validate::Int32Rules* mutable_int32();
  void set_allocated_int32(::validate::Int32Rules* int32);
  private:
  const ::validate::Int32Rules& _internal_int32() const;
  ::validate::Int32Rules* _internal_mutable_int32();
  public:
  void unsafe_arena_set_allocated_int32(
      ::validate::Int32Rules* int32);
  ::validate::Int32Rules* unsafe_arena_release_int32();

  // .validate.Int64Rules int64 = 4;
  bool has_int64() const;
  private:
  bool _internal_has_int64() const;
  public:
  void clear_int64();
  const ::validate::Int64Rules& int64() const;
  PROTOBUF_MUST_USE_RESULT ::validate::Int64Rules* release_int64();
  ::validate::Int64Rules* mutable_int64();
  void set_allocated_int64(::validate::Int64Rules* int64);
  private:
  const ::validate::Int64Rules& _internal_int64() const;
  ::validate::Int64Rules* _internal_mutable_int64();
  public:
  void unsafe_arena_set_allocated_int64(
      ::validate::Int64Rules* int64);
  ::validate::Int64Rules* unsafe_arena_release_int64();

  // .validate.UInt32Rules uint32 = 5;
  bool has_uint32() const;
  private:
  bool _internal_has_uint32() const;
  public:
  void clear_uint32();
  const ::validate::UInt32Rules& uint32() const;
  PROTOBUF_MUST_USE_RESULT ::validate::UInt32Rules* release_uint32();
  ::validate::UInt32Rules* mutable_uint32();
  void set_allocated_uint32(::validate::UInt32Rules* uint32);
  private:
  const ::validate::UInt32Rules& _internal_uint32() const;
  ::validate::UInt32Rules* _internal_mutable_uint32();
  public:
  void unsafe_arena_set_allocated_uint32(
      ::validate::UInt32Rules* uint32);
  ::validate::UInt32Rules* unsafe_arena_release_uint32();

  // .validate.UInt64Rules uint64 = 6;
  bool has_uint64() const;
  private:
  bool _internal_has_uint64() const;
  public:
  void clear_uint64();
  const ::validate::UInt64Rules& uint64() const;
  PROTOBUF_MUST_USE_RESULT ::validate::UInt64Rules* release_uint64();
  ::validate::UInt64Rules* mutable_uint64();
  void set_allocated_uint64(::validate::UInt64Rules* uint64);
  private:
  const ::validate::UInt64Rules& _internal_uint64() const;
  ::validate::UInt64Rules* _internal_mutable_uint64();
  public:
  void unsafe_arena_set_allocated_uint64(
      ::validate::UInt64Rules* uint64);
  ::validate::UInt64Rules* unsafe_arena_release_uint64();

  // .validate.SInt32Rules sint32 = 7;
  bool has_sint32() const;
  private:
  bool _internal_has_sint32() const;
  public:
  void clear_sint32();
  const ::validate::SInt32Rules& sint32() const;
  PROTOBUF_MUST_USE_RESULT ::validate::SInt32Rules* release_sint32();
  ::validate::SInt32Rules* mutable_sint32();
  void set_allocated_sint32(::validate::SInt32Rules* sint32);
  private:
  const ::validate::SInt32Rules& _internal_sint32() const;
  ::validate::SInt32Rules* _internal_mutable_sint32();
  public:
  void unsafe_arena_set_allocated_sint32(
      ::validate::SInt32Rules* sint32);
  ::validate::SInt32Rules* unsafe_arena_release_sint32();

  // .validate.SInt64Rules sint64 = 8;
  bool has_sint64() const;
  private:
  bool _internal_has_sint64() const;
  public:
  void clear_sint64();
  const ::validate::SInt64Rules& sint64() const;
  PROTOBUF_MUST_USE_RESULT ::validate::SInt64Rules* release_sint64();
  ::validate::SInt64Rules* mutable_sint64();
  void set_allocated_sint64(::validate::SInt64Rules* sint64);
  private:
  const ::validate::SInt64Rules& _internal_sint64() const;
  ::validate::SInt64Rules* _internal_mutable_sint64();
  public:
  void unsafe_arena_set_allocated_sint64(
      ::validate::SInt64Rules* sint64);
  ::validate::SInt64Rules* unsafe_arena_release_sint64();

  // .validate.Fixed32Rules fixed32 = 9;
  bool has_fixed32() const;
  private:
  bool _internal_has_fixed32() const;
  public:
  void clear_fixed32();
  const ::validate::Fixed32Rules& fixed32() const;
  PROTOBUF_MUST_USE_RESULT ::validate::Fixed32Rules* release_fixed32();
  ::validate::Fixed32Rules* mutable_fixed32();
  void set_allocated_fixed32(::validate::Fixed32Rules* fixed32);
  private:
  const ::validate::Fixed32Rules& _internal_fixed32() const;
  ::validate::Fixed32Rules* _internal_mutable_fixed32();
  public:
  void unsafe_arena_set_allocated_fixed32(
      ::validate::Fixed32Rules* fixed32);
  ::validate::Fixed32Rules* unsafe_arena_release_fixed32();

  // .validate.Fixed64Rules fixed64 = 10;
  bool has_fixed64() const;
  private:
  bool _internal_has_fixed64() const;
  public:
  void clear_fixed64();
  const ::validate::Fixed64Rules& fixed64() const;
  PROTOBUF_MUST_USE_RESULT ::validate::Fixed64Rules* release_fixed64();
  ::validate::Fixed64Rules* mutable_fixed64();
  void set_allocated_fixed64(::validate::Fixed64Rules* fixed64);
  private:
  const ::validate::Fixed64Rules& _internal_fixed64() const;
  ::validate::Fixed64Rules* _internal_mutable_fixed64();
  public:
  void unsafe_arena_set_allocated_fixed64(
      ::validate::Fixed64Rules* fixed64);
  ::validate::Fixed64Rules* unsafe_arena_release_fixed64();

  // .validate.SFixed32Rules sfixed32 = 11;
  bool has_sfixed32() const;
  private:
  bool _internal_has_sfixed32() const;
  public:
  void clear_sfixed32();
  const ::validate::SFixed32Rules& sfixed32() const;
  PROTOBUF_MUST_USE_RESULT ::validate::SFixed32Rules* release_sfixed32();
  ::validate::SFixed32Rules* mutable_sfixed32();
  void set_allocated_sfixed32(::validate::SFixed32Rules* sfixed32);
  private:
  const ::validate::SFixed32Rules& _internal_sfixed32() const;
  ::validate::SFixed32Rules* _internal_mutable_sfixed32();
  public:
  void unsafe_arena_set_allocated_sfixed32(
      ::validate::SFixed32Rules* sfixed32);
  ::validate::SFixed32Rules* unsafe_arena_release_sfixed32();

  // .validate.SFixed64Rules sfixed64 = 12;
  bool has_sfixed64() const;
  private:
  bool _internal_has_sfixed64() const;
  public:
  void clear_sfixed64();
  const ::validate::SFixed64Rules& sfixed64() const;
  PROTOBUF_MUST_USE_RESULT ::validate::SFixed64Rules* release_sfixed64();
  ::validate::SFixed64Rules* mutable_sfixed64();
  void set_allocated_sfixed64(::validate::SFixed64Rules* sfixed64);
  private:
  const ::validate::SFixed64Rules& _internal_sfixed64() const;
  ::validate::SFixed64Rules* _internal_mutable_sfixed64();
  public:
  void unsafe_arena_set_allocated_sfixed64(
      ::validate::SFixed64Rules* sfixed64);
  ::validate::SFixed64Rules* unsafe_arena_release_sfixed64();

  // .validate.BoolRules bool = 13;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  const ::validate::BoolRules& bool_() const;
  PROTOBUF_MUST_USE_RESULT ::validate::BoolRules* release_bool_();
  ::validate::BoolRules* mutable_bool_();
  void set_allocated_bool_(::validate::BoolRules* bool_);
  private:
  const ::validate::BoolRules& _internal_bool_() const;
  ::validate::BoolRules* _internal_mutable_bool_();
  public:
  void unsafe_arena_set_allocated_bool_(
      ::validate::BoolRules* bool_);
  ::validate::BoolRules* unsafe_arena_release_bool_();

  // .validate.StringRules string = 14;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const ::validate::StringRules& string() const;
  PROTOBUF_MUST_USE_RESULT ::validate::StringRules* release_string();
  ::validate::StringRules* mutable_string();
  void set_allocated_string(::validate::StringRules* string);
  private:
  const ::validate::StringRules& _internal_string() const;
  ::validate::StringRules* _internal_mutable_string();
  public:
  void unsafe_arena_set_allocated_string(
      ::validate::StringRules* string);
  ::validate::StringRules* unsafe_arena_release_string();

  // .validate.BytesRules bytes = 15;
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const ::validate::BytesRules& bytes() const;
  PROTOBUF_MUST_USE_RESULT ::validate::BytesRules* release_bytes();
  ::validate::BytesRules* mutable_bytes();
  void set_allocated_bytes(::validate::BytesRules* bytes);
  private:
  const ::validate::BytesRules& _internal_bytes() const;
  ::validate::BytesRules* _internal_mutable_bytes();
  public:
  void unsafe_arena_set_allocated_bytes(
      ::validate::BytesRules* bytes);
  ::validate::BytesRules* unsafe_arena_release_bytes();

  // .validate.EnumRules enum = 16;
  bool has_enum_() const;
  private:
  bool _internal_has_enum_() const;
  public:
  void clear_enum_();
  const ::validate::EnumRules& enum_() const;
  PROTOBUF_MUST_USE_RESULT ::validate::EnumRules* release_enum_();
  ::validate::EnumRules* mutable_enum_();
  void set_allocated_enum_(::validate::EnumRules* enum_);
  private:
  const ::validate::EnumRules& _internal_enum_() const;
  ::validate::EnumRules* _internal_mutable_enum_();
  public:
  void unsafe_arena_set_allocated_enum_(
      ::validate::EnumRules* enum_);
  ::validate::EnumRules* unsafe_arena_release_enum_();

  // .validate.RepeatedRules repeated = 18;
  bool has_repeated() const;
  private:
  bool _internal_has_repeated() const;
  public:
  void clear_repeated();
  const ::validate::RepeatedRules& repeated() const;
  PROTOBUF_MUST_USE_RESULT ::validate::RepeatedRules* release_repeated();
  ::validate::RepeatedRules* mutable_repeated();
  void set_allocated_repeated(::validate::RepeatedRules* repeated);
  private:
  const ::validate::RepeatedRules& _internal_repeated() const;
  ::validate::RepeatedRules* _internal_mutable_repeated();
  public:
  void unsafe_arena_set_allocated_repeated(
      ::validate::RepeatedRules* repeated);
  ::validate::RepeatedRules* unsafe_arena_release_repeated();

  // .validate.MapRules map = 19;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::validate::MapRules& map() const;
  PROTOBUF_MUST_USE_RESULT ::validate::MapRules* release_map();
  ::validate::MapRules* mutable_map();
  void set_allocated_map(::validate::MapRules* map);
  private:
  const ::validate::MapRules& _internal_map() const;
  ::validate::MapRules* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::validate::MapRules* map);
  ::validate::MapRules* unsafe_arena_release_map();

  // .validate.AnyRules any = 20;
  bool has_any() const;
  private:
  bool _internal_has_any() const;
  public:
  void clear_any();
  const ::validate::AnyRules& any() const;
  PROTOBUF_MUST_USE_RESULT ::validate::AnyRules* release_any();
  ::validate::AnyRules* mutable_any();
  void set_allocated_any(::validate::AnyRules* any);
  private:
  const ::validate::AnyRules& _internal_any() const;
  ::validate::AnyRules* _internal_mutable_any();
  public:
  void unsafe_arena_set_allocated_any(
      ::validate::AnyRules* any);
  ::validate::AnyRules* unsafe_arena_release_any();

  // .validate.DurationRules duration = 21;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::validate::DurationRules& duration() const;
  PROTOBUF_MUST_USE_RESULT ::validate::DurationRules* release_duration();
  ::validate::DurationRules* mutable_duration();
  void set_allocated_duration(::validate::DurationRules* duration);
  private:
  const ::validate::DurationRules& _internal_duration() const;
  ::validate::DurationRules* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::validate::DurationRules* duration);
  ::validate::DurationRules* unsafe_arena_release_duration();

  // .validate.TimestampRules timestamp = 22;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::validate::TimestampRules& timestamp() const;
  PROTOBUF_MUST_USE_RESULT ::validate::TimestampRules* release_timestamp();
  ::validate::TimestampRules* mutable_timestamp();
  void set_allocated_timestamp(::validate::TimestampRules* timestamp);
  private:
  const ::validate::TimestampRules& _internal_timestamp() const;
  ::validate::TimestampRules* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::validate::TimestampRules* timestamp);
  ::validate::TimestampRules* unsafe_arena_release_timestamp();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:validate.FieldRules)
 private:
  class _Internal;
  void set_has_float_();
  void set_has_double_();
  void set_has_int32();
  void set_has_int64();
  void set_has_uint32();
  void set_has_uint64();
  void set_has_sint32();
  void set_has_sint64();
  void set_has_fixed32();
  void set_has_fixed64();
  void set_has_sfixed32();
  void set_has_sfixed64();
  void set_has_bool_();
  void set_has_string();
  void set_has_bytes();
  void set_has_enum_();
  void set_has_repeated();
  void set_has_map();
  void set_has_any();
  void set_has_duration();
  void set_has_timestamp();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::validate::MessageRules* message_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::validate::FloatRules* float__;
    ::validate::DoubleRules* double__;
    ::validate::Int32Rules* int32_;
    ::validate::Int64Rules* int64_;
    ::validate::UInt32Rules* uint32_;
    ::validate::UInt64Rules* uint64_;
    ::validate::SInt32Rules* sint32_;
    ::validate::SInt64Rules* sint64_;
    ::validate::Fixed32Rules* fixed32_;
    ::validate::Fixed64Rules* fixed64_;
    ::validate::SFixed32Rules* sfixed32_;
    ::validate::SFixed64Rules* sfixed64_;
    ::validate::BoolRules* bool__;
    ::validate::StringRules* string_;
    ::validate::BytesRules* bytes_;
    ::validate::EnumRules* enum__;
    ::validate::RepeatedRules* repeated_;
    ::validate::MapRules* map_;
    ::validate::AnyRules* any_;
    ::validate::DurationRules* duration_;
    ::validate::TimestampRules* timestamp_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class FloatRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.FloatRules) */ {
 public:
  inline FloatRules() : FloatRules(nullptr) {}
  ~FloatRules() override;
  explicit constexpr FloatRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatRules(const FloatRules& from);
  FloatRules(FloatRules&& from) noexcept
    : FloatRules() {
    *this = ::std::move(from);
  }

  inline FloatRules& operator=(const FloatRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatRules& operator=(FloatRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatRules* internal_default_instance() {
    return reinterpret_cast<const FloatRules*>(
               &_FloatRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FloatRules& a, FloatRules& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatRules* New() const final {
    return new FloatRules();
  }

  FloatRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FloatRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.FloatRules";
  }
  protected:
  explicit FloatRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated float in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  float _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_in() const;
  void _internal_add_in(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_in();
  public:
  float in(int index) const;
  void set_in(int index, float value);
  void add_in(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_in();

  // repeated float not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  float _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_not_in() const;
  void _internal_add_not_in(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_not_in();
  public:
  float not_in(int index) const;
  void set_not_in(int index, float value);
  void add_not_in(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_not_in();

  // optional float const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  float const_() const;
  void set_const_(float value);
  private:
  float _internal_const_() const;
  void _internal_set_const_(float value);
  public:

  // optional float lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  float lt() const;
  void set_lt(float value);
  private:
  float _internal_lt() const;
  void _internal_set_lt(float value);
  public:

  // optional float lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  float lte() const;
  void set_lte(float value);
  private:
  float _internal_lte() const;
  void _internal_set_lte(float value);
  public:

  // optional float gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  float gt() const;
  void set_gt(float value);
  private:
  float _internal_gt() const;
  void _internal_set_gt(float value);
  public:

  // optional float gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  float gte() const;
  void set_gte(float value);
  private:
  float _internal_gte() const;
  void _internal_set_gte(float value);
  public:

  // @@protoc_insertion_point(class_scope:validate.FloatRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > not_in_;
  float const__;
  float lt_;
  float lte_;
  float gt_;
  float gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class DoubleRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.DoubleRules) */ {
 public:
  inline DoubleRules() : DoubleRules(nullptr) {}
  ~DoubleRules() override;
  explicit constexpr DoubleRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleRules(const DoubleRules& from);
  DoubleRules(DoubleRules&& from) noexcept
    : DoubleRules() {
    *this = ::std::move(from);
  }

  inline DoubleRules& operator=(const DoubleRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleRules& operator=(DoubleRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoubleRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleRules* internal_default_instance() {
    return reinterpret_cast<const DoubleRules*>(
               &_DoubleRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DoubleRules& a, DoubleRules& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleRules* New() const final {
    return new DoubleRules();
  }

  DoubleRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DoubleRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DoubleRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.DoubleRules";
  }
  protected:
  explicit DoubleRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated double in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  double _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_in() const;
  void _internal_add_in(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_in();
  public:
  double in(int index) const;
  void set_in(int index, double value);
  void add_in(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_in();

  // repeated double not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  double _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_not_in() const;
  void _internal_add_not_in(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_not_in();
  public:
  double not_in(int index) const;
  void set_not_in(int index, double value);
  void add_not_in(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_not_in();

  // optional double const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  double const_() const;
  void set_const_(double value);
  private:
  double _internal_const_() const;
  void _internal_set_const_(double value);
  public:

  // optional double lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  double lt() const;
  void set_lt(double value);
  private:
  double _internal_lt() const;
  void _internal_set_lt(double value);
  public:

  // optional double lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  double lte() const;
  void set_lte(double value);
  private:
  double _internal_lte() const;
  void _internal_set_lte(double value);
  public:

  // optional double gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  double gt() const;
  void set_gt(double value);
  private:
  double _internal_gt() const;
  void _internal_set_gt(double value);
  public:

  // optional double gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  double gte() const;
  void set_gte(double value);
  private:
  double _internal_gte() const;
  void _internal_set_gte(double value);
  public:

  // @@protoc_insertion_point(class_scope:validate.DoubleRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > not_in_;
  double const__;
  double lt_;
  double lte_;
  double gt_;
  double gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class Int32Rules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.Int32Rules) */ {
 public:
  inline Int32Rules() : Int32Rules(nullptr) {}
  ~Int32Rules() override;
  explicit constexpr Int32Rules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int32Rules(const Int32Rules& from);
  Int32Rules(Int32Rules&& from) noexcept
    : Int32Rules() {
    *this = ::std::move(from);
  }

  inline Int32Rules& operator=(const Int32Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Rules& operator=(Int32Rules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int32Rules& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int32Rules* internal_default_instance() {
    return reinterpret_cast<const Int32Rules*>(
               &_Int32Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Int32Rules& a, Int32Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Rules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int32Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int32Rules* New() const final {
    return new Int32Rules();
  }

  Int32Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int32Rules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int32Rules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Int32Rules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int32Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.Int32Rules";
  }
  protected:
  explicit Int32Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated int32 in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_in();

  // repeated int32 not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_not_in();

  // optional int32 const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int32 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int32 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int32 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int32 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:validate.Int32Rules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::int32 const__;
  ::PROTOBUF_NAMESPACE_ID::int32 lt_;
  ::PROTOBUF_NAMESPACE_ID::int32 lte_;
  ::PROTOBUF_NAMESPACE_ID::int32 gt_;
  ::PROTOBUF_NAMESPACE_ID::int32 gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class Int64Rules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.Int64Rules) */ {
 public:
  inline Int64Rules() : Int64Rules(nullptr) {}
  ~Int64Rules() override;
  explicit constexpr Int64Rules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Rules(const Int64Rules& from);
  Int64Rules(Int64Rules&& from) noexcept
    : Int64Rules() {
    *this = ::std::move(from);
  }

  inline Int64Rules& operator=(const Int64Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Rules& operator=(Int64Rules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64Rules& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Rules* internal_default_instance() {
    return reinterpret_cast<const Int64Rules*>(
               &_Int64Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Int64Rules& a, Int64Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Rules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int64Rules* New() const final {
    return new Int64Rules();
  }

  Int64Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int64Rules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int64Rules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Int64Rules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.Int64Rules";
  }
  protected:
  explicit Int64Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated int64 in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_in();

  // repeated int64 not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_not_in();

  // optional int64 const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int64 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int64 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int64 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int64 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int64 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:validate.Int64Rules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::int64 const__;
  ::PROTOBUF_NAMESPACE_ID::int64 lt_;
  ::PROTOBUF_NAMESPACE_ID::int64 lte_;
  ::PROTOBUF_NAMESPACE_ID::int64 gt_;
  ::PROTOBUF_NAMESPACE_ID::int64 gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class UInt32Rules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.UInt32Rules) */ {
 public:
  inline UInt32Rules() : UInt32Rules(nullptr) {}
  ~UInt32Rules() override;
  explicit constexpr UInt32Rules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UInt32Rules(const UInt32Rules& from);
  UInt32Rules(UInt32Rules&& from) noexcept
    : UInt32Rules() {
    *this = ::std::move(from);
  }

  inline UInt32Rules& operator=(const UInt32Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt32Rules& operator=(UInt32Rules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UInt32Rules& default_instance() {
    return *internal_default_instance();
  }
  static inline const UInt32Rules* internal_default_instance() {
    return reinterpret_cast<const UInt32Rules*>(
               &_UInt32Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UInt32Rules& a, UInt32Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(UInt32Rules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt32Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UInt32Rules* New() const final {
    return new UInt32Rules();
  }

  UInt32Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UInt32Rules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UInt32Rules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UInt32Rules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInt32Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.UInt32Rules";
  }
  protected:
  explicit UInt32Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated uint32 in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_in();

  // repeated uint32 not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_not_in();

  // optional uint32 const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::uint32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::uint32 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::uint32 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::uint32 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::uint32 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:validate.UInt32Rules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::uint32 const__;
  ::PROTOBUF_NAMESPACE_ID::uint32 lt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lte_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class UInt64Rules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.UInt64Rules) */ {
 public:
  inline UInt64Rules() : UInt64Rules(nullptr) {}
  ~UInt64Rules() override;
  explicit constexpr UInt64Rules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UInt64Rules(const UInt64Rules& from);
  UInt64Rules(UInt64Rules&& from) noexcept
    : UInt64Rules() {
    *this = ::std::move(from);
  }

  inline UInt64Rules& operator=(const UInt64Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt64Rules& operator=(UInt64Rules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UInt64Rules& default_instance() {
    return *internal_default_instance();
  }
  static inline const UInt64Rules* internal_default_instance() {
    return reinterpret_cast<const UInt64Rules*>(
               &_UInt64Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UInt64Rules& a, UInt64Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(UInt64Rules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt64Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UInt64Rules* New() const final {
    return new UInt64Rules();
  }

  UInt64Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UInt64Rules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UInt64Rules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UInt64Rules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInt64Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.UInt64Rules";
  }
  protected:
  explicit UInt64Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated uint64 in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_in();

  // repeated uint64 not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_not_in();

  // optional uint64 const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::uint64 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::uint64 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::uint64 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::uint64 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::uint64 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:validate.UInt64Rules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::uint64 const__;
  ::PROTOBUF_NAMESPACE_ID::uint64 lt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lte_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class SInt32Rules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.SInt32Rules) */ {
 public:
  inline SInt32Rules() : SInt32Rules(nullptr) {}
  ~SInt32Rules() override;
  explicit constexpr SInt32Rules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SInt32Rules(const SInt32Rules& from);
  SInt32Rules(SInt32Rules&& from) noexcept
    : SInt32Rules() {
    *this = ::std::move(from);
  }

  inline SInt32Rules& operator=(const SInt32Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline SInt32Rules& operator=(SInt32Rules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SInt32Rules& default_instance() {
    return *internal_default_instance();
  }
  static inline const SInt32Rules* internal_default_instance() {
    return reinterpret_cast<const SInt32Rules*>(
               &_SInt32Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SInt32Rules& a, SInt32Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(SInt32Rules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SInt32Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SInt32Rules* New() const final {
    return new SInt32Rules();
  }

  SInt32Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SInt32Rules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SInt32Rules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SInt32Rules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SInt32Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.SInt32Rules";
  }
  protected:
  explicit SInt32Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated sint32 in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_in();

  // repeated sint32 not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_not_in();

  // optional sint32 const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int32 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int32 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int32 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int32 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:validate.SInt32Rules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::int32 const__;
  ::PROTOBUF_NAMESPACE_ID::int32 lt_;
  ::PROTOBUF_NAMESPACE_ID::int32 lte_;
  ::PROTOBUF_NAMESPACE_ID::int32 gt_;
  ::PROTOBUF_NAMESPACE_ID::int32 gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class SInt64Rules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.SInt64Rules) */ {
 public:
  inline SInt64Rules() : SInt64Rules(nullptr) {}
  ~SInt64Rules() override;
  explicit constexpr SInt64Rules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SInt64Rules(const SInt64Rules& from);
  SInt64Rules(SInt64Rules&& from) noexcept
    : SInt64Rules() {
    *this = ::std::move(from);
  }

  inline SInt64Rules& operator=(const SInt64Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline SInt64Rules& operator=(SInt64Rules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SInt64Rules& default_instance() {
    return *internal_default_instance();
  }
  static inline const SInt64Rules* internal_default_instance() {
    return reinterpret_cast<const SInt64Rules*>(
               &_SInt64Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SInt64Rules& a, SInt64Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(SInt64Rules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SInt64Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SInt64Rules* New() const final {
    return new SInt64Rules();
  }

  SInt64Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SInt64Rules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SInt64Rules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SInt64Rules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SInt64Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.SInt64Rules";
  }
  protected:
  explicit SInt64Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated sint64 in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_in();

  // repeated sint64 not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_not_in();

  // optional sint64 const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int64 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sint64 lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int64 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sint64 lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int64 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sint64 gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int64 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sint64 gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int64 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:validate.SInt64Rules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::int64 const__;
  ::PROTOBUF_NAMESPACE_ID::int64 lt_;
  ::PROTOBUF_NAMESPACE_ID::int64 lte_;
  ::PROTOBUF_NAMESPACE_ID::int64 gt_;
  ::PROTOBUF_NAMESPACE_ID::int64 gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class Fixed32Rules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.Fixed32Rules) */ {
 public:
  inline Fixed32Rules() : Fixed32Rules(nullptr) {}
  ~Fixed32Rules() override;
  explicit constexpr Fixed32Rules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fixed32Rules(const Fixed32Rules& from);
  Fixed32Rules(Fixed32Rules&& from) noexcept
    : Fixed32Rules() {
    *this = ::std::move(from);
  }

  inline Fixed32Rules& operator=(const Fixed32Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fixed32Rules& operator=(Fixed32Rules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fixed32Rules& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fixed32Rules* internal_default_instance() {
    return reinterpret_cast<const Fixed32Rules*>(
               &_Fixed32Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Fixed32Rules& a, Fixed32Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(Fixed32Rules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fixed32Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fixed32Rules* New() const final {
    return new Fixed32Rules();
  }

  Fixed32Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fixed32Rules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fixed32Rules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fixed32Rules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fixed32Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.Fixed32Rules";
  }
  protected:
  explicit Fixed32Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated fixed32 in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_in();

  // repeated fixed32 not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_not_in();

  // optional fixed32 const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::uint32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::uint32 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::uint32 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::uint32 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::uint32 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:validate.Fixed32Rules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::uint32 const__;
  ::PROTOBUF_NAMESPACE_ID::uint32 lt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lte_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class Fixed64Rules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.Fixed64Rules) */ {
 public:
  inline Fixed64Rules() : Fixed64Rules(nullptr) {}
  ~Fixed64Rules() override;
  explicit constexpr Fixed64Rules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fixed64Rules(const Fixed64Rules& from);
  Fixed64Rules(Fixed64Rules&& from) noexcept
    : Fixed64Rules() {
    *this = ::std::move(from);
  }

  inline Fixed64Rules& operator=(const Fixed64Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fixed64Rules& operator=(Fixed64Rules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fixed64Rules& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fixed64Rules* internal_default_instance() {
    return reinterpret_cast<const Fixed64Rules*>(
               &_Fixed64Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Fixed64Rules& a, Fixed64Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(Fixed64Rules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fixed64Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fixed64Rules* New() const final {
    return new Fixed64Rules();
  }

  Fixed64Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fixed64Rules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fixed64Rules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fixed64Rules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fixed64Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.Fixed64Rules";
  }
  protected:
  explicit Fixed64Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated fixed64 in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_in();

  // repeated fixed64 not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_not_in();

  // optional fixed64 const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::uint64 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::uint64 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::uint64 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::uint64 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::uint64 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:validate.Fixed64Rules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::uint64 const__;
  ::PROTOBUF_NAMESPACE_ID::uint64 lt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lte_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class SFixed32Rules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.SFixed32Rules) */ {
 public:
  inline SFixed32Rules() : SFixed32Rules(nullptr) {}
  ~SFixed32Rules() override;
  explicit constexpr SFixed32Rules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SFixed32Rules(const SFixed32Rules& from);
  SFixed32Rules(SFixed32Rules&& from) noexcept
    : SFixed32Rules() {
    *this = ::std::move(from);
  }

  inline SFixed32Rules& operator=(const SFixed32Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFixed32Rules& operator=(SFixed32Rules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SFixed32Rules& default_instance() {
    return *internal_default_instance();
  }
  static inline const SFixed32Rules* internal_default_instance() {
    return reinterpret_cast<const SFixed32Rules*>(
               &_SFixed32Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SFixed32Rules& a, SFixed32Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(SFixed32Rules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SFixed32Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFixed32Rules* New() const final {
    return new SFixed32Rules();
  }

  SFixed32Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFixed32Rules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SFixed32Rules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SFixed32Rules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFixed32Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.SFixed32Rules";
  }
  protected:
  explicit SFixed32Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated sfixed32 in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_in();

  // repeated sfixed32 not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_not_in();

  // optional sfixed32 const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sfixed32 lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int32 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sfixed32 lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int32 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sfixed32 gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int32 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sfixed32 gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int32 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:validate.SFixed32Rules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::int32 const__;
  ::PROTOBUF_NAMESPACE_ID::int32 lt_;
  ::PROTOBUF_NAMESPACE_ID::int32 lte_;
  ::PROTOBUF_NAMESPACE_ID::int32 gt_;
  ::PROTOBUF_NAMESPACE_ID::int32 gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class SFixed64Rules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.SFixed64Rules) */ {
 public:
  inline SFixed64Rules() : SFixed64Rules(nullptr) {}
  ~SFixed64Rules() override;
  explicit constexpr SFixed64Rules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SFixed64Rules(const SFixed64Rules& from);
  SFixed64Rules(SFixed64Rules&& from) noexcept
    : SFixed64Rules() {
    *this = ::std::move(from);
  }

  inline SFixed64Rules& operator=(const SFixed64Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFixed64Rules& operator=(SFixed64Rules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SFixed64Rules& default_instance() {
    return *internal_default_instance();
  }
  static inline const SFixed64Rules* internal_default_instance() {
    return reinterpret_cast<const SFixed64Rules*>(
               &_SFixed64Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SFixed64Rules& a, SFixed64Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(SFixed64Rules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SFixed64Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFixed64Rules* New() const final {
    return new SFixed64Rules();
  }

  SFixed64Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFixed64Rules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SFixed64Rules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SFixed64Rules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFixed64Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.SFixed64Rules";
  }
  protected:
  explicit SFixed64Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated sfixed64 in = 6;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_in();

  // repeated sfixed64 not_in = 7;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_not_in();

  // optional sfixed64 const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int64 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sfixed64 lt = 2;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int64 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sfixed64 lte = 3;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int64 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sfixed64 gt = 4;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int64 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sfixed64 gte = 5;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int64 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:validate.SFixed64Rules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::int64 const__;
  ::PROTOBUF_NAMESPACE_ID::int64 lt_;
  ::PROTOBUF_NAMESPACE_ID::int64 lte_;
  ::PROTOBUF_NAMESPACE_ID::int64 gt_;
  ::PROTOBUF_NAMESPACE_ID::int64 gte_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class BoolRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.BoolRules) */ {
 public:
  inline BoolRules() : BoolRules(nullptr) {}
  ~BoolRules() override;
  explicit constexpr BoolRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolRules(const BoolRules& from);
  BoolRules(BoolRules&& from) noexcept
    : BoolRules() {
    *this = ::std::move(from);
  }

  inline BoolRules& operator=(const BoolRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolRules& operator=(BoolRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolRules* internal_default_instance() {
    return reinterpret_cast<const BoolRules*>(
               &_BoolRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BoolRules& a, BoolRules& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoolRules* New() const final {
    return new BoolRules();
  }

  BoolRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoolRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoolRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.BoolRules";
  }
  protected:
  explicit BoolRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstFieldNumber = 1,
  };
  // optional bool const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  bool const_() const;
  void set_const_(bool value);
  private:
  bool _internal_const_() const;
  void _internal_set_const_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:validate.BoolRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool const__;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class StringRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.StringRules) */ {
 public:
  inline StringRules() : StringRules(nullptr) {}
  ~StringRules() override;
  explicit constexpr StringRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringRules(const StringRules& from);
  StringRules(StringRules&& from) noexcept
    : StringRules() {
    *this = ::std::move(from);
  }

  inline StringRules& operator=(const StringRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringRules& operator=(StringRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringRules& default_instance() {
    return *internal_default_instance();
  }
  enum WellKnownCase {
    kEmail = 12,
    kHostname = 13,
    kIp = 14,
    kIpv4 = 15,
    kIpv6 = 16,
    kUri = 17,
    kUriRef = 18,
    kAddress = 21,
    kUuid = 22,
    kWellKnownRegex = 24,
    WELL_KNOWN_NOT_SET = 0,
  };

  static inline const StringRules* internal_default_instance() {
    return reinterpret_cast<const StringRules*>(
               &_StringRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StringRules& a, StringRules& b) {
    a.Swap(&b);
  }
  inline void Swap(StringRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringRules* New() const final {
    return new StringRules();
  }

  StringRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StringRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.StringRules";
  }
  protected:
  explicit StringRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 10,
    kNotInFieldNumber = 11,
    kConstFieldNumber = 1,
    kPatternFieldNumber = 6,
    kPrefixFieldNumber = 7,
    kSuffixFieldNumber = 8,
    kContainsFieldNumber = 9,
    kNotContainsFieldNumber = 23,
    kMinLenFieldNumber = 2,
    kMaxLenFieldNumber = 3,
    kMinBytesFieldNumber = 4,
    kMaxBytesFieldNumber = 5,
    kLenFieldNumber = 19,
    kLenBytesFieldNumber = 20,
    kStrictFieldNumber = 25,
    kEmailFieldNumber = 12,
    kHostnameFieldNumber = 13,
    kIpFieldNumber = 14,
    kIpv4FieldNumber = 15,
    kIpv6FieldNumber = 16,
    kUriFieldNumber = 17,
    kUriRefFieldNumber = 18,
    kAddressFieldNumber = 21,
    kUuidFieldNumber = 22,
    kWellKnownRegexFieldNumber = 24,
  };
  // repeated string in = 10;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  const std::string& in(int index) const;
  std::string* mutable_in(int index);
  void set_in(int index, const std::string& value);
  void set_in(int index, std::string&& value);
  void set_in(int index, const char* value);
  void set_in(int index, const char* value, size_t size);
  std::string* add_in();
  void add_in(const std::string& value);
  void add_in(std::string&& value);
  void add_in(const char* value);
  void add_in(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_in();
  private:
  const std::string& _internal_in(int index) const;
  std::string* _internal_add_in();
  public:

  // repeated string not_in = 11;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  const std::string& not_in(int index) const;
  std::string* mutable_not_in(int index);
  void set_not_in(int index, const std::string& value);
  void set_not_in(int index, std::string&& value);
  void set_not_in(int index, const char* value);
  void set_not_in(int index, const char* value, size_t size);
  std::string* add_not_in();
  void add_not_in(const std::string& value);
  void add_not_in(std::string&& value);
  void add_not_in(const char* value);
  void add_not_in(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_not_in();
  private:
  const std::string& _internal_not_in(int index) const;
  std::string* _internal_add_not_in();
  public:

  // optional string const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  const std::string& const_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_const_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_const_();
  PROTOBUF_MUST_USE_RESULT std::string* release_const_();
  void set_allocated_const_(std::string* const_);
  private:
  const std::string& _internal_const_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_const_(const std::string& value);
  std::string* _internal_mutable_const_();
  public:

  // optional string pattern = 6;
  bool has_pattern() const;
  private:
  bool _internal_has_pattern() const;
  public:
  void clear_pattern();
  const std::string& pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // optional string prefix = 7;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_MUST_USE_RESULT std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional string suffix = 8;
  bool has_suffix() const;
  private:
  bool _internal_has_suffix() const;
  public:
  void clear_suffix();
  const std::string& suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suffix();
  PROTOBUF_MUST_USE_RESULT std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // optional string contains = 9;
  bool has_contains() const;
  private:
  bool _internal_has_contains() const;
  public:
  void clear_contains();
  const std::string& contains() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contains(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contains();
  PROTOBUF_MUST_USE_RESULT std::string* release_contains();
  void set_allocated_contains(std::string* contains);
  private:
  const std::string& _internal_contains() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contains(const std::string& value);
  std::string* _internal_mutable_contains();
  public:

  // optional string not_contains = 23;
  bool has_not_contains() const;
  private:
  bool _internal_has_not_contains() const;
  public:
  void clear_not_contains();
  const std::string& not_contains() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_not_contains(ArgT0&& arg0, ArgT... args);
  std::string* mutable_not_contains();
  PROTOBUF_MUST_USE_RESULT std::string* release_not_contains();
  void set_allocated_not_contains(std::string* not_contains);
  private:
  const std::string& _internal_not_contains() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_not_contains(const std::string& value);
  std::string* _internal_mutable_not_contains();
  public:

  // optional uint64 min_len = 2;
  bool has_min_len() const;
  private:
  bool _internal_has_min_len() const;
  public:
  void clear_min_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_len() const;
  void set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_len() const;
  void _internal_set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 max_len = 3;
  bool has_max_len() const;
  private:
  bool _internal_has_max_len() const;
  public:
  void clear_max_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_len() const;
  void set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_len() const;
  void _internal_set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 min_bytes = 4;
  bool has_min_bytes() const;
  private:
  bool _internal_has_min_bytes() const;
  public:
  void clear_min_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_bytes() const;
  void set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_bytes() const;
  void _internal_set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 max_bytes = 5;
  bool has_max_bytes() const;
  private:
  bool _internal_has_max_bytes() const;
  public:
  void clear_max_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_bytes() const;
  void set_max_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_bytes() const;
  void _internal_set_max_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 len = 19;
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 len_bytes = 20;
  bool has_len_bytes() const;
  private:
  bool _internal_has_len_bytes() const;
  public:
  void clear_len_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 len_bytes() const;
  void set_len_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len_bytes() const;
  void _internal_set_len_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool strict = 25 [default = true];
  bool has_strict() const;
  private:
  bool _internal_has_strict() const;
  public:
  void clear_strict();
  bool strict() const;
  void set_strict(bool value);
  private:
  bool _internal_strict() const;
  void _internal_set_strict(bool value);
  public:

  // bool email = 12;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  bool email() const;
  void set_email(bool value);
  private:
  bool _internal_email() const;
  void _internal_set_email(bool value);
  public:

  // bool hostname = 13;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  bool hostname() const;
  void set_hostname(bool value);
  private:
  bool _internal_hostname() const;
  void _internal_set_hostname(bool value);
  public:

  // bool ip = 14;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  bool ip() const;
  void set_ip(bool value);
  private:
  bool _internal_ip() const;
  void _internal_set_ip(bool value);
  public:

  // bool ipv4 = 15;
  bool has_ipv4() const;
  private:
  bool _internal_has_ipv4() const;
  public:
  void clear_ipv4();
  bool ipv4() const;
  void set_ipv4(bool value);
  private:
  bool _internal_ipv4() const;
  void _internal_set_ipv4(bool value);
  public:

  // bool ipv6 = 16;
  bool has_ipv6() const;
  private:
  bool _internal_has_ipv6() const;
  public:
  void clear_ipv6();
  bool ipv6() const;
  void set_ipv6(bool value);
  private:
  bool _internal_ipv6() const;
  void _internal_set_ipv6(bool value);
  public:

  // bool uri = 17;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  bool uri() const;
  void set_uri(bool value);
  private:
  bool _internal_uri() const;
  void _internal_set_uri(bool value);
  public:

  // bool uri_ref = 18;
  bool has_uri_ref() const;
  private:
  bool _internal_has_uri_ref() const;
  public:
  void clear_uri_ref();
  bool uri_ref() const;
  void set_uri_ref(bool value);
  private:
  bool _internal_uri_ref() const;
  void _internal_set_uri_ref(bool value);
  public:

  // bool address = 21;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  bool address() const;
  void set_address(bool value);
  private:
  bool _internal_address() const;
  void _internal_set_address(bool value);
  public:

  // bool uuid = 22;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  bool uuid() const;
  void set_uuid(bool value);
  private:
  bool _internal_uuid() const;
  void _internal_set_uuid(bool value);
  public:

  // .validate.KnownRegex well_known_regex = 24;
  bool has_well_known_regex() const;
  private:
  bool _internal_has_well_known_regex() const;
  public:
  void clear_well_known_regex();
  ::validate::KnownRegex well_known_regex() const;
  void set_well_known_regex(::validate::KnownRegex value);
  private:
  ::validate::KnownRegex _internal_well_known_regex() const;
  void _internal_set_well_known_regex(::validate::KnownRegex value);
  public:

  void clear_well_known();
  WellKnownCase well_known_case() const;
  // @@protoc_insertion_point(class_scope:validate.StringRules)
 private:
  class _Internal;
  void set_has_email();
  void set_has_hostname();
  void set_has_ip();
  void set_has_ipv4();
  void set_has_ipv6();
  void set_has_uri();
  void set_has_uri_ref();
  void set_has_address();
  void set_has_uuid();
  void set_has_well_known_regex();

  inline bool has_well_known() const;
  inline void clear_has_well_known();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> not_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr const__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contains_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr not_contains_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_bytes_;
  bool strict_;
  union WellKnownUnion {
    constexpr WellKnownUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool email_;
    bool hostname_;
    bool ip_;
    bool ipv4_;
    bool ipv6_;
    bool uri_;
    bool uri_ref_;
    bool address_;
    bool uuid_;
    int well_known_regex_;
  } well_known_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class BytesRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.BytesRules) */ {
 public:
  inline BytesRules() : BytesRules(nullptr) {}
  ~BytesRules() override;
  explicit constexpr BytesRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BytesRules(const BytesRules& from);
  BytesRules(BytesRules&& from) noexcept
    : BytesRules() {
    *this = ::std::move(from);
  }

  inline BytesRules& operator=(const BytesRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline BytesRules& operator=(BytesRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BytesRules& default_instance() {
    return *internal_default_instance();
  }
  enum WellKnownCase {
    kIp = 10,
    kIpv4 = 11,
    kIpv6 = 12,
    WELL_KNOWN_NOT_SET = 0,
  };

  static inline const BytesRules* internal_default_instance() {
    return reinterpret_cast<const BytesRules*>(
               &_BytesRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BytesRules& a, BytesRules& b) {
    a.Swap(&b);
  }
  inline void Swap(BytesRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BytesRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BytesRules* New() const final {
    return new BytesRules();
  }

  BytesRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BytesRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BytesRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BytesRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BytesRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.BytesRules";
  }
  protected:
  explicit BytesRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 8,
    kNotInFieldNumber = 9,
    kConstFieldNumber = 1,
    kPatternFieldNumber = 4,
    kPrefixFieldNumber = 5,
    kSuffixFieldNumber = 6,
    kContainsFieldNumber = 7,
    kMinLenFieldNumber = 2,
    kMaxLenFieldNumber = 3,
    kLenFieldNumber = 13,
    kIpFieldNumber = 10,
    kIpv4FieldNumber = 11,
    kIpv6FieldNumber = 12,
  };
  // repeated bytes in = 8;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  const std::string& in(int index) const;
  std::string* mutable_in(int index);
  void set_in(int index, const std::string& value);
  void set_in(int index, std::string&& value);
  void set_in(int index, const char* value);
  void set_in(int index, const void* value, size_t size);
  std::string* add_in();
  void add_in(const std::string& value);
  void add_in(std::string&& value);
  void add_in(const char* value);
  void add_in(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_in();
  private:
  const std::string& _internal_in(int index) const;
  std::string* _internal_add_in();
  public:

  // repeated bytes not_in = 9;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  const std::string& not_in(int index) const;
  std::string* mutable_not_in(int index);
  void set_not_in(int index, const std::string& value);
  void set_not_in(int index, std::string&& value);
  void set_not_in(int index, const char* value);
  void set_not_in(int index, const void* value, size_t size);
  std::string* add_not_in();
  void add_not_in(const std::string& value);
  void add_not_in(std::string&& value);
  void add_not_in(const char* value);
  void add_not_in(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_not_in();
  private:
  const std::string& _internal_not_in(int index) const;
  std::string* _internal_add_not_in();
  public:

  // optional bytes const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  const std::string& const_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_const_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_const_();
  PROTOBUF_MUST_USE_RESULT std::string* release_const_();
  void set_allocated_const_(std::string* const_);
  private:
  const std::string& _internal_const_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_const_(const std::string& value);
  std::string* _internal_mutable_const_();
  public:

  // optional string pattern = 4;
  bool has_pattern() const;
  private:
  bool _internal_has_pattern() const;
  public:
  void clear_pattern();
  const std::string& pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // optional bytes prefix = 5;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_MUST_USE_RESULT std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional bytes suffix = 6;
  bool has_suffix() const;
  private:
  bool _internal_has_suffix() const;
  public:
  void clear_suffix();
  const std::string& suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suffix();
  PROTOBUF_MUST_USE_RESULT std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // optional bytes contains = 7;
  bool has_contains() const;
  private:
  bool _internal_has_contains() const;
  public:
  void clear_contains();
  const std::string& contains() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contains(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contains();
  PROTOBUF_MUST_USE_RESULT std::string* release_contains();
  void set_allocated_contains(std::string* contains);
  private:
  const std::string& _internal_contains() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contains(const std::string& value);
  std::string* _internal_mutable_contains();
  public:

  // optional uint64 min_len = 2;
  bool has_min_len() const;
  private:
  bool _internal_has_min_len() const;
  public:
  void clear_min_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_len() const;
  void set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_len() const;
  void _internal_set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 max_len = 3;
  bool has_max_len() const;
  private:
  bool _internal_has_max_len() const;
  public:
  void clear_max_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_len() const;
  void set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_len() const;
  void _internal_set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 len = 13;
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool ip = 10;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  bool ip() const;
  void set_ip(bool value);
  private:
  bool _internal_ip() const;
  void _internal_set_ip(bool value);
  public:

  // bool ipv4 = 11;
  bool has_ipv4() const;
  private:
  bool _internal_has_ipv4() const;
  public:
  void clear_ipv4();
  bool ipv4() const;
  void set_ipv4(bool value);
  private:
  bool _internal_ipv4() const;
  void _internal_set_ipv4(bool value);
  public:

  // bool ipv6 = 12;
  bool has_ipv6() const;
  private:
  bool _internal_has_ipv6() const;
  public:
  void clear_ipv6();
  bool ipv6() const;
  void set_ipv6(bool value);
  private:
  bool _internal_ipv6() const;
  void _internal_set_ipv6(bool value);
  public:

  void clear_well_known();
  WellKnownCase well_known_case() const;
  // @@protoc_insertion_point(class_scope:validate.BytesRules)
 private:
  class _Internal;
  void set_has_ip();
  void set_has_ipv4();
  void set_has_ipv6();

  inline bool has_well_known() const;
  inline void clear_has_well_known();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> not_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr const__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contains_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  union WellKnownUnion {
    constexpr WellKnownUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool ip_;
    bool ipv4_;
    bool ipv6_;
  } well_known_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class EnumRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.EnumRules) */ {
 public:
  inline EnumRules() : EnumRules(nullptr) {}
  ~EnumRules() override;
  explicit constexpr EnumRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnumRules(const EnumRules& from);
  EnumRules(EnumRules&& from) noexcept
    : EnumRules() {
    *this = ::std::move(from);
  }

  inline EnumRules& operator=(const EnumRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnumRules& operator=(EnumRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnumRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnumRules* internal_default_instance() {
    return reinterpret_cast<const EnumRules*>(
               &_EnumRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(EnumRules& a, EnumRules& b) {
    a.Swap(&b);
  }
  inline void Swap(EnumRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnumRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnumRules* New() const final {
    return new EnumRules();
  }

  EnumRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnumRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnumRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnumRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.EnumRules";
  }
  protected:
  explicit EnumRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 3,
    kNotInFieldNumber = 4,
    kConstFieldNumber = 1,
    kDefinedOnlyFieldNumber = 2,
  };
  // repeated int32 in = 3;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_in();

  // repeated int32 not_in = 4;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_not_in();

  // optional int32 const = 1;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool defined_only = 2;
  bool has_defined_only() const;
  private:
  bool _internal_has_defined_only() const;
  public:
  void clear_defined_only();
  bool defined_only() const;
  void set_defined_only(bool value);
  private:
  bool _internal_defined_only() const;
  void _internal_set_defined_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:validate.EnumRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::int32 const__;
  bool defined_only_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class MessageRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.MessageRules) */ {
 public:
  inline MessageRules() : MessageRules(nullptr) {}
  ~MessageRules() override;
  explicit constexpr MessageRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageRules(const MessageRules& from);
  MessageRules(MessageRules&& from) noexcept
    : MessageRules() {
    *this = ::std::move(from);
  }

  inline MessageRules& operator=(const MessageRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRules& operator=(MessageRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageRules* internal_default_instance() {
    return reinterpret_cast<const MessageRules*>(
               &_MessageRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MessageRules& a, MessageRules& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageRules* New() const final {
    return new MessageRules();
  }

  MessageRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.MessageRules";
  }
  protected:
  explicit MessageRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkipFieldNumber = 1,
    kRequiredFieldNumber = 2,
  };
  // optional bool skip = 1;
  bool has_skip() const;
  private:
  bool _internal_has_skip() const;
  public:
  void clear_skip();
  bool skip() const;
  void set_skip(bool value);
  private:
  bool _internal_skip() const;
  void _internal_set_skip(bool value);
  public:

  // optional bool required = 2;
  bool has_required() const;
  private:
  bool _internal_has_required() const;
  public:
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:validate.MessageRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool skip_;
  bool required_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class RepeatedRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.RepeatedRules) */ {
 public:
  inline RepeatedRules() : RepeatedRules(nullptr) {}
  ~RepeatedRules() override;
  explicit constexpr RepeatedRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepeatedRules(const RepeatedRules& from);
  RepeatedRules(RepeatedRules&& from) noexcept
    : RepeatedRules() {
    *this = ::std::move(from);
  }

  inline RepeatedRules& operator=(const RepeatedRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedRules& operator=(RepeatedRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepeatedRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepeatedRules* internal_default_instance() {
    return reinterpret_cast<const RepeatedRules*>(
               &_RepeatedRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RepeatedRules& a, RepeatedRules& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatedRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedRules* New() const final {
    return new RepeatedRules();
  }

  RepeatedRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepeatedRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepeatedRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.RepeatedRules";
  }
  protected:
  explicit RepeatedRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 4,
    kMinItemsFieldNumber = 1,
    kMaxItemsFieldNumber = 2,
    kUniqueFieldNumber = 3,
  };
  // optional .validate.FieldRules items = 4;
  bool has_items() const;
  private:
  bool _internal_has_items() const;
  public:
  void clear_items();
  const ::validate::FieldRules& items() const;
  PROTOBUF_MUST_USE_RESULT ::validate::FieldRules* release_items();
  ::validate::FieldRules* mutable_items();
  void set_allocated_items(::validate::FieldRules* items);
  private:
  const ::validate::FieldRules& _internal_items() const;
  ::validate::FieldRules* _internal_mutable_items();
  public:
  void unsafe_arena_set_allocated_items(
      ::validate::FieldRules* items);
  ::validate::FieldRules* unsafe_arena_release_items();

  // optional uint64 min_items = 1;
  bool has_min_items() const;
  private:
  bool _internal_has_min_items() const;
  public:
  void clear_min_items();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_items() const;
  void set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_items() const;
  void _internal_set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 max_items = 2;
  bool has_max_items() const;
  private:
  bool _internal_has_max_items() const;
  public:
  void clear_max_items();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_items() const;
  void set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_items() const;
  void _internal_set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool unique = 3;
  bool has_unique() const;
  private:
  bool _internal_has_unique() const;
  public:
  void clear_unique();
  bool unique() const;
  void set_unique(bool value);
  private:
  bool _internal_unique() const;
  void _internal_set_unique(bool value);
  public:

  // @@protoc_insertion_point(class_scope:validate.RepeatedRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::validate::FieldRules* items_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_items_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_items_;
  bool unique_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class MapRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.MapRules) */ {
 public:
  inline MapRules() : MapRules(nullptr) {}
  ~MapRules() override;
  explicit constexpr MapRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapRules(const MapRules& from);
  MapRules(MapRules&& from) noexcept
    : MapRules() {
    *this = ::std::move(from);
  }

  inline MapRules& operator=(const MapRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapRules& operator=(MapRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapRules* internal_default_instance() {
    return reinterpret_cast<const MapRules*>(
               &_MapRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MapRules& a, MapRules& b) {
    a.Swap(&b);
  }
  inline void Swap(MapRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapRules* New() const final {
    return new MapRules();
  }

  MapRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.MapRules";
  }
  protected:
  explicit MapRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 4,
    kValuesFieldNumber = 5,
    kMinPairsFieldNumber = 1,
    kMaxPairsFieldNumber = 2,
    kNoSparseFieldNumber = 3,
  };
  // optional .validate.FieldRules keys = 4;
  bool has_keys() const;
  private:
  bool _internal_has_keys() const;
  public:
  void clear_keys();
  const ::validate::FieldRules& keys() const;
  PROTOBUF_MUST_USE_RESULT ::validate::FieldRules* release_keys();
  ::validate::FieldRules* mutable_keys();
  void set_allocated_keys(::validate::FieldRules* keys);
  private:
  const ::validate::FieldRules& _internal_keys() const;
  ::validate::FieldRules* _internal_mutable_keys();
  public:
  void unsafe_arena_set_allocated_keys(
      ::validate::FieldRules* keys);
  ::validate::FieldRules* unsafe_arena_release_keys();

  // optional .validate.FieldRules values = 5;
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::validate::FieldRules& values() const;
  PROTOBUF_MUST_USE_RESULT ::validate::FieldRules* release_values();
  ::validate::FieldRules* mutable_values();
  void set_allocated_values(::validate::FieldRules* values);
  private:
  const ::validate::FieldRules& _internal_values() const;
  ::validate::FieldRules* _internal_mutable_values();
  public:
  void unsafe_arena_set_allocated_values(
      ::validate::FieldRules* values);
  ::validate::FieldRules* unsafe_arena_release_values();

  // optional uint64 min_pairs = 1;
  bool has_min_pairs() const;
  private:
  bool _internal_has_min_pairs() const;
  public:
  void clear_min_pairs();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_pairs() const;
  void set_min_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_pairs() const;
  void _internal_set_min_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 max_pairs = 2;
  bool has_max_pairs() const;
  private:
  bool _internal_has_max_pairs() const;
  public:
  void clear_max_pairs();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_pairs() const;
  void set_max_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_pairs() const;
  void _internal_set_max_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool no_sparse = 3;
  bool has_no_sparse() const;
  private:
  bool _internal_has_no_sparse() const;
  public:
  void clear_no_sparse();
  bool no_sparse() const;
  void set_no_sparse(bool value);
  private:
  bool _internal_no_sparse() const;
  void _internal_set_no_sparse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:validate.MapRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::validate::FieldRules* keys_;
  ::validate::FieldRules* values_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_pairs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_pairs_;
  bool no_sparse_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class AnyRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.AnyRules) */ {
 public:
  inline AnyRules() : AnyRules(nullptr) {}
  ~AnyRules() override;
  explicit constexpr AnyRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnyRules(const AnyRules& from);
  AnyRules(AnyRules&& from) noexcept
    : AnyRules() {
    *this = ::std::move(from);
  }

  inline AnyRules& operator=(const AnyRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyRules& operator=(AnyRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnyRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnyRules* internal_default_instance() {
    return reinterpret_cast<const AnyRules*>(
               &_AnyRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AnyRules& a, AnyRules& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyRules* New() const final {
    return new AnyRules();
  }

  AnyRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnyRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnyRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.AnyRules";
  }
  protected:
  explicit AnyRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 2,
    kNotInFieldNumber = 3,
    kRequiredFieldNumber = 1,
  };
  // repeated string in = 2;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  const std::string& in(int index) const;
  std::string* mutable_in(int index);
  void set_in(int index, const std::string& value);
  void set_in(int index, std::string&& value);
  void set_in(int index, const char* value);
  void set_in(int index, const char* value, size_t size);
  std::string* add_in();
  void add_in(const std::string& value);
  void add_in(std::string&& value);
  void add_in(const char* value);
  void add_in(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_in();
  private:
  const std::string& _internal_in(int index) const;
  std::string* _internal_add_in();
  public:

  // repeated string not_in = 3;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  const std::string& not_in(int index) const;
  std::string* mutable_not_in(int index);
  void set_not_in(int index, const std::string& value);
  void set_not_in(int index, std::string&& value);
  void set_not_in(int index, const char* value);
  void set_not_in(int index, const char* value, size_t size);
  std::string* add_not_in();
  void add_not_in(const std::string& value);
  void add_not_in(std::string&& value);
  void add_not_in(const char* value);
  void add_not_in(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_not_in();
  private:
  const std::string& _internal_not_in(int index) const;
  std::string* _internal_add_not_in();
  public:

  // optional bool required = 1;
  bool has_required() const;
  private:
  bool _internal_has_required() const;
  public:
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:validate.AnyRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> not_in_;
  bool required_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class DurationRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.DurationRules) */ {
 public:
  inline DurationRules() : DurationRules(nullptr) {}
  ~DurationRules() override;
  explicit constexpr DurationRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DurationRules(const DurationRules& from);
  DurationRules(DurationRules&& from) noexcept
    : DurationRules() {
    *this = ::std::move(from);
  }

  inline DurationRules& operator=(const DurationRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline DurationRules& operator=(DurationRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DurationRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const DurationRules* internal_default_instance() {
    return reinterpret_cast<const DurationRules*>(
               &_DurationRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DurationRules& a, DurationRules& b) {
    a.Swap(&b);
  }
  inline void Swap(DurationRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DurationRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DurationRules* New() const final {
    return new DurationRules();
  }

  DurationRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DurationRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DurationRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DurationRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DurationRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.DurationRules";
  }
  protected:
  explicit DurationRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 7,
    kNotInFieldNumber = 8,
    kConstFieldNumber = 2,
    kLtFieldNumber = 3,
    kLteFieldNumber = 4,
    kGtFieldNumber = 5,
    kGteFieldNumber = 6,
    kRequiredFieldNumber = 1,
  };
  // repeated .google.protobuf.Duration in = 7;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_in(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >*
      mutable_in();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_in(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_add_in();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Duration& in(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Duration* add_in();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >&
      in() const;

  // repeated .google.protobuf.Duration not_in = 8;
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_not_in(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >*
      mutable_not_in();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_not_in(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_add_not_in();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Duration& not_in(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Duration* add_not_in();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >&
      not_in() const;

  // optional .google.protobuf.Duration const = 2;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  const ::PROTOBUF_NAMESPACE_ID::Duration& const_() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Duration* release_const_();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_const_();
  void set_allocated_const_(::PROTOBUF_NAMESPACE_ID::Duration* const_);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_const_() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_const_();
  public:
  void unsafe_arena_set_allocated_const_(
      ::PROTOBUF_NAMESPACE_ID::Duration* const_);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_const_();

  // optional .google.protobuf.Duration lt = 3;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  const ::PROTOBUF_NAMESPACE_ID::Duration& lt() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Duration* release_lt();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_lt();
  void set_allocated_lt(::PROTOBUF_NAMESPACE_ID::Duration* lt);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_lt() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_lt();
  public:
  void unsafe_arena_set_allocated_lt(
      ::PROTOBUF_NAMESPACE_ID::Duration* lt);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_lt();

  // optional .google.protobuf.Duration lte = 4;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  const ::PROTOBUF_NAMESPACE_ID::Duration& lte() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Duration* release_lte();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_lte();
  void set_allocated_lte(::PROTOBUF_NAMESPACE_ID::Duration* lte);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_lte() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_lte();
  public:
  void unsafe_arena_set_allocated_lte(
      ::PROTOBUF_NAMESPACE_ID::Duration* lte);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_lte();

  // optional .google.protobuf.Duration gt = 5;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  const ::PROTOBUF_NAMESPACE_ID::Duration& gt() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Duration* release_gt();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_gt();
  void set_allocated_gt(::PROTOBUF_NAMESPACE_ID::Duration* gt);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_gt() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_gt();
  public:
  void unsafe_arena_set_allocated_gt(
      ::PROTOBUF_NAMESPACE_ID::Duration* gt);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_gt();

  // optional .google.protobuf.Duration gte = 6;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  const ::PROTOBUF_NAMESPACE_ID::Duration& gte() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Duration* release_gte();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_gte();
  void set_allocated_gte(::PROTOBUF_NAMESPACE_ID::Duration* gte);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_gte() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_gte();
  public:
  void unsafe_arena_set_allocated_gte(
      ::PROTOBUF_NAMESPACE_ID::Duration* gte);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_gte();

  // optional bool required = 1;
  bool has_required() const;
  private:
  bool _internal_has_required() const;
  public:
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:validate.DurationRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration > not_in_;
  ::PROTOBUF_NAMESPACE_ID::Duration* const__;
  ::PROTOBUF_NAMESPACE_ID::Duration* lt_;
  ::PROTOBUF_NAMESPACE_ID::Duration* lte_;
  ::PROTOBUF_NAMESPACE_ID::Duration* gt_;
  ::PROTOBUF_NAMESPACE_ID::Duration* gte_;
  bool required_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class TimestampRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validate.TimestampRules) */ {
 public:
  inline TimestampRules() : TimestampRules(nullptr) {}
  ~TimestampRules() override;
  explicit constexpr TimestampRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimestampRules(const TimestampRules& from);
  TimestampRules(TimestampRules&& from) noexcept
    : TimestampRules() {
    *this = ::std::move(from);
  }

  inline TimestampRules& operator=(const TimestampRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampRules& operator=(TimestampRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimestampRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimestampRules* internal_default_instance() {
    return reinterpret_cast<const TimestampRules*>(
               &_TimestampRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TimestampRules& a, TimestampRules& b) {
    a.Swap(&b);
  }
  inline void Swap(TimestampRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimestampRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimestampRules* New() const final {
    return new TimestampRules();
  }

  TimestampRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimestampRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimestampRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TimestampRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimestampRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validate.TimestampRules";
  }
  protected:
  explicit TimestampRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstFieldNumber = 2,
    kLtFieldNumber = 3,
    kLteFieldNumber = 4,
    kGtFieldNumber = 5,
    kGteFieldNumber = 6,
    kWithinFieldNumber = 9,
    kRequiredFieldNumber = 1,
    kLtNowFieldNumber = 7,
    kGtNowFieldNumber = 8,
  };
  // optional .google.protobuf.Timestamp const = 2;
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& const_() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_const_();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_const_();
  void set_allocated_const_(::PROTOBUF_NAMESPACE_ID::Timestamp* const_);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_const_() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_const_();
  public:
  void unsafe_arena_set_allocated_const_(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* const_);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_const_();

  // optional .google.protobuf.Timestamp lt = 3;
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& lt() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_lt();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lt();
  void set_allocated_lt(::PROTOBUF_NAMESPACE_ID::Timestamp* lt);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lt() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lt();
  public:
  void unsafe_arena_set_allocated_lt(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* lt);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lt();

  // optional .google.protobuf.Timestamp lte = 4;
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& lte() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_lte();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lte();
  void set_allocated_lte(::PROTOBUF_NAMESPACE_ID::Timestamp* lte);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lte() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lte();
  public:
  void unsafe_arena_set_allocated_lte(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* lte);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lte();

  // optional .google.protobuf.Timestamp gt = 5;
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& gt() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_gt();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_gt();
  void set_allocated_gt(::PROTOBUF_NAMESPACE_ID::Timestamp* gt);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_gt() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_gt();
  public:
  void unsafe_arena_set_allocated_gt(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* gt);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_gt();

  // optional .google.protobuf.Timestamp gte = 6;
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& gte() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_gte();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_gte();
  void set_allocated_gte(::PROTOBUF_NAMESPACE_ID::Timestamp* gte);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_gte() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_gte();
  public:
  void unsafe_arena_set_allocated_gte(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* gte);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_gte();

  // optional .google.protobuf.Duration within = 9;
  bool has_within() const;
  private:
  bool _internal_has_within() const;
  public:
  void clear_within();
  const ::PROTOBUF_NAMESPACE_ID::Duration& within() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Duration* release_within();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_within();
  void set_allocated_within(::PROTOBUF_NAMESPACE_ID::Duration* within);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_within() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_within();
  public:
  void unsafe_arena_set_allocated_within(
      ::PROTOBUF_NAMESPACE_ID::Duration* within);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_within();

  // optional bool required = 1;
  bool has_required() const;
  private:
  bool _internal_has_required() const;
  public:
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // optional bool lt_now = 7;
  bool has_lt_now() const;
  private:
  bool _internal_has_lt_now() const;
  public:
  void clear_lt_now();
  bool lt_now() const;
  void set_lt_now(bool value);
  private:
  bool _internal_lt_now() const;
  void _internal_set_lt_now(bool value);
  public:

  // optional bool gt_now = 8;
  bool has_gt_now() const;
  private:
  bool _internal_has_gt_now() const;
  public:
  void clear_gt_now();
  bool gt_now() const;
  void set_gt_now(bool value);
  private:
  bool _internal_gt_now() const;
  void _internal_set_gt_now(bool value);
  public:

  // @@protoc_insertion_point(class_scope:validate.TimestampRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* const__;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* lt_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* lte_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* gt_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* gte_;
  ::PROTOBUF_NAMESPACE_ID::Duration* within_;
  bool required_;
  bool lt_now_;
  bool gt_now_;
  friend struct ::TableStruct_validate_2fvalidate_2eproto;
};
// ===================================================================

static const int kDisabledFieldNumber = 1071;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  disabled;
static const int kRequiredFieldNumber = 1071;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::OneofOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  required;
static const int kRulesFieldNumber = 1071;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::validate::FieldRules >, 11, false >
  rules;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FieldRules

// optional .validate.MessageRules message = 17;
inline bool FieldRules::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool FieldRules::has_message() const {
  return _internal_has_message();
}
inline void FieldRules::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::validate::MessageRules& FieldRules::_internal_message() const {
  const ::validate::MessageRules* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::validate::MessageRules&>(
      ::validate::_MessageRules_default_instance_);
}
inline const ::validate::MessageRules& FieldRules::message() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.message)
  return _internal_message();
}
inline void FieldRules::unsafe_arena_set_allocated_message(
    ::validate::MessageRules* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.message)
}
inline ::validate::MessageRules* FieldRules::release_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::validate::MessageRules* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::validate::MessageRules* FieldRules::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.message)
  _has_bits_[0] &= ~0x00000001u;
  ::validate::MessageRules* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::validate::MessageRules* FieldRules::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::validate::MessageRules>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::validate::MessageRules* FieldRules::mutable_message() {
  ::validate::MessageRules* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.message)
  return _msg;
}
inline void FieldRules::set_allocated_message(::validate::MessageRules* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::validate::MessageRules>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.message)
}

// .validate.FloatRules float = 1;
inline bool FieldRules::_internal_has_float_() const {
  return type_case() == kFloat;
}
inline bool FieldRules::has_float_() const {
  return _internal_has_float_();
}
inline void FieldRules::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
inline void FieldRules::clear_float_() {
  if (_internal_has_float_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.float__;
    }
    clear_has_type();
  }
}
inline ::validate::FloatRules* FieldRules::release_float_() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.float)
  if (_internal_has_float_()) {
    clear_has_type();
      ::validate::FloatRules* temp = type_.float__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.float__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::FloatRules& FieldRules::_internal_float_() const {
  return _internal_has_float_()
      ? *type_.float__
      : reinterpret_cast< ::validate::FloatRules&>(::validate::_FloatRules_default_instance_);
}
inline const ::validate::FloatRules& FieldRules::float_() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.float)
  return _internal_float_();
}
inline ::validate::FloatRules* FieldRules::unsafe_arena_release_float_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.float)
  if (_internal_has_float_()) {
    clear_has_type();
    ::validate::FloatRules* temp = type_.float__;
    type_.float__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_float_(::validate::FloatRules* float_) {
  clear_type();
  if (float_) {
    set_has_float_();
    type_.float__ = float_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.float)
}
inline ::validate::FloatRules* FieldRules::_internal_mutable_float_() {
  if (!_internal_has_float_()) {
    clear_type();
    set_has_float_();
    type_.float__ = CreateMaybeMessage< ::validate::FloatRules >(GetArenaForAllocation());
  }
  return type_.float__;
}
inline ::validate::FloatRules* FieldRules::mutable_float_() {
  ::validate::FloatRules* _msg = _internal_mutable_float_();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.float)
  return _msg;
}

// .validate.DoubleRules double = 2;
inline bool FieldRules::_internal_has_double_() const {
  return type_case() == kDouble;
}
inline bool FieldRules::has_double_() const {
  return _internal_has_double_();
}
inline void FieldRules::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void FieldRules::clear_double_() {
  if (_internal_has_double_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.double__;
    }
    clear_has_type();
  }
}
inline ::validate::DoubleRules* FieldRules::release_double_() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.double)
  if (_internal_has_double_()) {
    clear_has_type();
      ::validate::DoubleRules* temp = type_.double__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.double__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::DoubleRules& FieldRules::_internal_double_() const {
  return _internal_has_double_()
      ? *type_.double__
      : reinterpret_cast< ::validate::DoubleRules&>(::validate::_DoubleRules_default_instance_);
}
inline const ::validate::DoubleRules& FieldRules::double_() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.double)
  return _internal_double_();
}
inline ::validate::DoubleRules* FieldRules::unsafe_arena_release_double_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.double)
  if (_internal_has_double_()) {
    clear_has_type();
    ::validate::DoubleRules* temp = type_.double__;
    type_.double__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_double_(::validate::DoubleRules* double_) {
  clear_type();
  if (double_) {
    set_has_double_();
    type_.double__ = double_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.double)
}
inline ::validate::DoubleRules* FieldRules::_internal_mutable_double_() {
  if (!_internal_has_double_()) {
    clear_type();
    set_has_double_();
    type_.double__ = CreateMaybeMessage< ::validate::DoubleRules >(GetArenaForAllocation());
  }
  return type_.double__;
}
inline ::validate::DoubleRules* FieldRules::mutable_double_() {
  ::validate::DoubleRules* _msg = _internal_mutable_double_();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.double)
  return _msg;
}

// .validate.Int32Rules int32 = 3;
inline bool FieldRules::_internal_has_int32() const {
  return type_case() == kInt32;
}
inline bool FieldRules::has_int32() const {
  return _internal_has_int32();
}
inline void FieldRules::set_has_int32() {
  _oneof_case_[0] = kInt32;
}
inline void FieldRules::clear_int32() {
  if (_internal_has_int32()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.int32_;
    }
    clear_has_type();
  }
}
inline ::validate::Int32Rules* FieldRules::release_int32() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.int32)
  if (_internal_has_int32()) {
    clear_has_type();
      ::validate::Int32Rules* temp = type_.int32_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.int32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::Int32Rules& FieldRules::_internal_int32() const {
  return _internal_has_int32()
      ? *type_.int32_
      : reinterpret_cast< ::validate::Int32Rules&>(::validate::_Int32Rules_default_instance_);
}
inline const ::validate::Int32Rules& FieldRules::int32() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.int32)
  return _internal_int32();
}
inline ::validate::Int32Rules* FieldRules::unsafe_arena_release_int32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.int32)
  if (_internal_has_int32()) {
    clear_has_type();
    ::validate::Int32Rules* temp = type_.int32_;
    type_.int32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_int32(::validate::Int32Rules* int32) {
  clear_type();
  if (int32) {
    set_has_int32();
    type_.int32_ = int32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.int32)
}
inline ::validate::Int32Rules* FieldRules::_internal_mutable_int32() {
  if (!_internal_has_int32()) {
    clear_type();
    set_has_int32();
    type_.int32_ = CreateMaybeMessage< ::validate::Int32Rules >(GetArenaForAllocation());
  }
  return type_.int32_;
}
inline ::validate::Int32Rules* FieldRules::mutable_int32() {
  ::validate::Int32Rules* _msg = _internal_mutable_int32();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.int32)
  return _msg;
}

// .validate.Int64Rules int64 = 4;
inline bool FieldRules::_internal_has_int64() const {
  return type_case() == kInt64;
}
inline bool FieldRules::has_int64() const {
  return _internal_has_int64();
}
inline void FieldRules::set_has_int64() {
  _oneof_case_[0] = kInt64;
}
inline void FieldRules::clear_int64() {
  if (_internal_has_int64()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.int64_;
    }
    clear_has_type();
  }
}
inline ::validate::Int64Rules* FieldRules::release_int64() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.int64)
  if (_internal_has_int64()) {
    clear_has_type();
      ::validate::Int64Rules* temp = type_.int64_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.int64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::Int64Rules& FieldRules::_internal_int64() const {
  return _internal_has_int64()
      ? *type_.int64_
      : reinterpret_cast< ::validate::Int64Rules&>(::validate::_Int64Rules_default_instance_);
}
inline const ::validate::Int64Rules& FieldRules::int64() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.int64)
  return _internal_int64();
}
inline ::validate::Int64Rules* FieldRules::unsafe_arena_release_int64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.int64)
  if (_internal_has_int64()) {
    clear_has_type();
    ::validate::Int64Rules* temp = type_.int64_;
    type_.int64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_int64(::validate::Int64Rules* int64) {
  clear_type();
  if (int64) {
    set_has_int64();
    type_.int64_ = int64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.int64)
}
inline ::validate::Int64Rules* FieldRules::_internal_mutable_int64() {
  if (!_internal_has_int64()) {
    clear_type();
    set_has_int64();
    type_.int64_ = CreateMaybeMessage< ::validate::Int64Rules >(GetArenaForAllocation());
  }
  return type_.int64_;
}
inline ::validate::Int64Rules* FieldRules::mutable_int64() {
  ::validate::Int64Rules* _msg = _internal_mutable_int64();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.int64)
  return _msg;
}

// .validate.UInt32Rules uint32 = 5;
inline bool FieldRules::_internal_has_uint32() const {
  return type_case() == kUint32;
}
inline bool FieldRules::has_uint32() const {
  return _internal_has_uint32();
}
inline void FieldRules::set_has_uint32() {
  _oneof_case_[0] = kUint32;
}
inline void FieldRules::clear_uint32() {
  if (_internal_has_uint32()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.uint32_;
    }
    clear_has_type();
  }
}
inline ::validate::UInt32Rules* FieldRules::release_uint32() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.uint32)
  if (_internal_has_uint32()) {
    clear_has_type();
      ::validate::UInt32Rules* temp = type_.uint32_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.uint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::UInt32Rules& FieldRules::_internal_uint32() const {
  return _internal_has_uint32()
      ? *type_.uint32_
      : reinterpret_cast< ::validate::UInt32Rules&>(::validate::_UInt32Rules_default_instance_);
}
inline const ::validate::UInt32Rules& FieldRules::uint32() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.uint32)
  return _internal_uint32();
}
inline ::validate::UInt32Rules* FieldRules::unsafe_arena_release_uint32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.uint32)
  if (_internal_has_uint32()) {
    clear_has_type();
    ::validate::UInt32Rules* temp = type_.uint32_;
    type_.uint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_uint32(::validate::UInt32Rules* uint32) {
  clear_type();
  if (uint32) {
    set_has_uint32();
    type_.uint32_ = uint32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.uint32)
}
inline ::validate::UInt32Rules* FieldRules::_internal_mutable_uint32() {
  if (!_internal_has_uint32()) {
    clear_type();
    set_has_uint32();
    type_.uint32_ = CreateMaybeMessage< ::validate::UInt32Rules >(GetArenaForAllocation());
  }
  return type_.uint32_;
}
inline ::validate::UInt32Rules* FieldRules::mutable_uint32() {
  ::validate::UInt32Rules* _msg = _internal_mutable_uint32();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.uint32)
  return _msg;
}

// .validate.UInt64Rules uint64 = 6;
inline bool FieldRules::_internal_has_uint64() const {
  return type_case() == kUint64;
}
inline bool FieldRules::has_uint64() const {
  return _internal_has_uint64();
}
inline void FieldRules::set_has_uint64() {
  _oneof_case_[0] = kUint64;
}
inline void FieldRules::clear_uint64() {
  if (_internal_has_uint64()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.uint64_;
    }
    clear_has_type();
  }
}
inline ::validate::UInt64Rules* FieldRules::release_uint64() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.uint64)
  if (_internal_has_uint64()) {
    clear_has_type();
      ::validate::UInt64Rules* temp = type_.uint64_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.uint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::UInt64Rules& FieldRules::_internal_uint64() const {
  return _internal_has_uint64()
      ? *type_.uint64_
      : reinterpret_cast< ::validate::UInt64Rules&>(::validate::_UInt64Rules_default_instance_);
}
inline const ::validate::UInt64Rules& FieldRules::uint64() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.uint64)
  return _internal_uint64();
}
inline ::validate::UInt64Rules* FieldRules::unsafe_arena_release_uint64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.uint64)
  if (_internal_has_uint64()) {
    clear_has_type();
    ::validate::UInt64Rules* temp = type_.uint64_;
    type_.uint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_uint64(::validate::UInt64Rules* uint64) {
  clear_type();
  if (uint64) {
    set_has_uint64();
    type_.uint64_ = uint64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.uint64)
}
inline ::validate::UInt64Rules* FieldRules::_internal_mutable_uint64() {
  if (!_internal_has_uint64()) {
    clear_type();
    set_has_uint64();
    type_.uint64_ = CreateMaybeMessage< ::validate::UInt64Rules >(GetArenaForAllocation());
  }
  return type_.uint64_;
}
inline ::validate::UInt64Rules* FieldRules::mutable_uint64() {
  ::validate::UInt64Rules* _msg = _internal_mutable_uint64();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.uint64)
  return _msg;
}

// .validate.SInt32Rules sint32 = 7;
inline bool FieldRules::_internal_has_sint32() const {
  return type_case() == kSint32;
}
inline bool FieldRules::has_sint32() const {
  return _internal_has_sint32();
}
inline void FieldRules::set_has_sint32() {
  _oneof_case_[0] = kSint32;
}
inline void FieldRules::clear_sint32() {
  if (_internal_has_sint32()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.sint32_;
    }
    clear_has_type();
  }
}
inline ::validate::SInt32Rules* FieldRules::release_sint32() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.sint32)
  if (_internal_has_sint32()) {
    clear_has_type();
      ::validate::SInt32Rules* temp = type_.sint32_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.sint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::SInt32Rules& FieldRules::_internal_sint32() const {
  return _internal_has_sint32()
      ? *type_.sint32_
      : reinterpret_cast< ::validate::SInt32Rules&>(::validate::_SInt32Rules_default_instance_);
}
inline const ::validate::SInt32Rules& FieldRules::sint32() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.sint32)
  return _internal_sint32();
}
inline ::validate::SInt32Rules* FieldRules::unsafe_arena_release_sint32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.sint32)
  if (_internal_has_sint32()) {
    clear_has_type();
    ::validate::SInt32Rules* temp = type_.sint32_;
    type_.sint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_sint32(::validate::SInt32Rules* sint32) {
  clear_type();
  if (sint32) {
    set_has_sint32();
    type_.sint32_ = sint32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.sint32)
}
inline ::validate::SInt32Rules* FieldRules::_internal_mutable_sint32() {
  if (!_internal_has_sint32()) {
    clear_type();
    set_has_sint32();
    type_.sint32_ = CreateMaybeMessage< ::validate::SInt32Rules >(GetArenaForAllocation());
  }
  return type_.sint32_;
}
inline ::validate::SInt32Rules* FieldRules::mutable_sint32() {
  ::validate::SInt32Rules* _msg = _internal_mutable_sint32();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.sint32)
  return _msg;
}

// .validate.SInt64Rules sint64 = 8;
inline bool FieldRules::_internal_has_sint64() const {
  return type_case() == kSint64;
}
inline bool FieldRules::has_sint64() const {
  return _internal_has_sint64();
}
inline void FieldRules::set_has_sint64() {
  _oneof_case_[0] = kSint64;
}
inline void FieldRules::clear_sint64() {
  if (_internal_has_sint64()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.sint64_;
    }
    clear_has_type();
  }
}
inline ::validate::SInt64Rules* FieldRules::release_sint64() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.sint64)
  if (_internal_has_sint64()) {
    clear_has_type();
      ::validate::SInt64Rules* temp = type_.sint64_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.sint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::SInt64Rules& FieldRules::_internal_sint64() const {
  return _internal_has_sint64()
      ? *type_.sint64_
      : reinterpret_cast< ::validate::SInt64Rules&>(::validate::_SInt64Rules_default_instance_);
}
inline const ::validate::SInt64Rules& FieldRules::sint64() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.sint64)
  return _internal_sint64();
}
inline ::validate::SInt64Rules* FieldRules::unsafe_arena_release_sint64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.sint64)
  if (_internal_has_sint64()) {
    clear_has_type();
    ::validate::SInt64Rules* temp = type_.sint64_;
    type_.sint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_sint64(::validate::SInt64Rules* sint64) {
  clear_type();
  if (sint64) {
    set_has_sint64();
    type_.sint64_ = sint64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.sint64)
}
inline ::validate::SInt64Rules* FieldRules::_internal_mutable_sint64() {
  if (!_internal_has_sint64()) {
    clear_type();
    set_has_sint64();
    type_.sint64_ = CreateMaybeMessage< ::validate::SInt64Rules >(GetArenaForAllocation());
  }
  return type_.sint64_;
}
inline ::validate::SInt64Rules* FieldRules::mutable_sint64() {
  ::validate::SInt64Rules* _msg = _internal_mutable_sint64();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.sint64)
  return _msg;
}

// .validate.Fixed32Rules fixed32 = 9;
inline bool FieldRules::_internal_has_fixed32() const {
  return type_case() == kFixed32;
}
inline bool FieldRules::has_fixed32() const {
  return _internal_has_fixed32();
}
inline void FieldRules::set_has_fixed32() {
  _oneof_case_[0] = kFixed32;
}
inline void FieldRules::clear_fixed32() {
  if (_internal_has_fixed32()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.fixed32_;
    }
    clear_has_type();
  }
}
inline ::validate::Fixed32Rules* FieldRules::release_fixed32() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.fixed32)
  if (_internal_has_fixed32()) {
    clear_has_type();
      ::validate::Fixed32Rules* temp = type_.fixed32_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.fixed32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::Fixed32Rules& FieldRules::_internal_fixed32() const {
  return _internal_has_fixed32()
      ? *type_.fixed32_
      : reinterpret_cast< ::validate::Fixed32Rules&>(::validate::_Fixed32Rules_default_instance_);
}
inline const ::validate::Fixed32Rules& FieldRules::fixed32() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.fixed32)
  return _internal_fixed32();
}
inline ::validate::Fixed32Rules* FieldRules::unsafe_arena_release_fixed32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.fixed32)
  if (_internal_has_fixed32()) {
    clear_has_type();
    ::validate::Fixed32Rules* temp = type_.fixed32_;
    type_.fixed32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_fixed32(::validate::Fixed32Rules* fixed32) {
  clear_type();
  if (fixed32) {
    set_has_fixed32();
    type_.fixed32_ = fixed32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.fixed32)
}
inline ::validate::Fixed32Rules* FieldRules::_internal_mutable_fixed32() {
  if (!_internal_has_fixed32()) {
    clear_type();
    set_has_fixed32();
    type_.fixed32_ = CreateMaybeMessage< ::validate::Fixed32Rules >(GetArenaForAllocation());
  }
  return type_.fixed32_;
}
inline ::validate::Fixed32Rules* FieldRules::mutable_fixed32() {
  ::validate::Fixed32Rules* _msg = _internal_mutable_fixed32();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.fixed32)
  return _msg;
}

// .validate.Fixed64Rules fixed64 = 10;
inline bool FieldRules::_internal_has_fixed64() const {
  return type_case() == kFixed64;
}
inline bool FieldRules::has_fixed64() const {
  return _internal_has_fixed64();
}
inline void FieldRules::set_has_fixed64() {
  _oneof_case_[0] = kFixed64;
}
inline void FieldRules::clear_fixed64() {
  if (_internal_has_fixed64()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.fixed64_;
    }
    clear_has_type();
  }
}
inline ::validate::Fixed64Rules* FieldRules::release_fixed64() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.fixed64)
  if (_internal_has_fixed64()) {
    clear_has_type();
      ::validate::Fixed64Rules* temp = type_.fixed64_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.fixed64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::Fixed64Rules& FieldRules::_internal_fixed64() const {
  return _internal_has_fixed64()
      ? *type_.fixed64_
      : reinterpret_cast< ::validate::Fixed64Rules&>(::validate::_Fixed64Rules_default_instance_);
}
inline const ::validate::Fixed64Rules& FieldRules::fixed64() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.fixed64)
  return _internal_fixed64();
}
inline ::validate::Fixed64Rules* FieldRules::unsafe_arena_release_fixed64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.fixed64)
  if (_internal_has_fixed64()) {
    clear_has_type();
    ::validate::Fixed64Rules* temp = type_.fixed64_;
    type_.fixed64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_fixed64(::validate::Fixed64Rules* fixed64) {
  clear_type();
  if (fixed64) {
    set_has_fixed64();
    type_.fixed64_ = fixed64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.fixed64)
}
inline ::validate::Fixed64Rules* FieldRules::_internal_mutable_fixed64() {
  if (!_internal_has_fixed64()) {
    clear_type();
    set_has_fixed64();
    type_.fixed64_ = CreateMaybeMessage< ::validate::Fixed64Rules >(GetArenaForAllocation());
  }
  return type_.fixed64_;
}
inline ::validate::Fixed64Rules* FieldRules::mutable_fixed64() {
  ::validate::Fixed64Rules* _msg = _internal_mutable_fixed64();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.fixed64)
  return _msg;
}

// .validate.SFixed32Rules sfixed32 = 11;
inline bool FieldRules::_internal_has_sfixed32() const {
  return type_case() == kSfixed32;
}
inline bool FieldRules::has_sfixed32() const {
  return _internal_has_sfixed32();
}
inline void FieldRules::set_has_sfixed32() {
  _oneof_case_[0] = kSfixed32;
}
inline void FieldRules::clear_sfixed32() {
  if (_internal_has_sfixed32()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.sfixed32_;
    }
    clear_has_type();
  }
}
inline ::validate::SFixed32Rules* FieldRules::release_sfixed32() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.sfixed32)
  if (_internal_has_sfixed32()) {
    clear_has_type();
      ::validate::SFixed32Rules* temp = type_.sfixed32_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.sfixed32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::SFixed32Rules& FieldRules::_internal_sfixed32() const {
  return _internal_has_sfixed32()
      ? *type_.sfixed32_
      : reinterpret_cast< ::validate::SFixed32Rules&>(::validate::_SFixed32Rules_default_instance_);
}
inline const ::validate::SFixed32Rules& FieldRules::sfixed32() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.sfixed32)
  return _internal_sfixed32();
}
inline ::validate::SFixed32Rules* FieldRules::unsafe_arena_release_sfixed32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.sfixed32)
  if (_internal_has_sfixed32()) {
    clear_has_type();
    ::validate::SFixed32Rules* temp = type_.sfixed32_;
    type_.sfixed32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_sfixed32(::validate::SFixed32Rules* sfixed32) {
  clear_type();
  if (sfixed32) {
    set_has_sfixed32();
    type_.sfixed32_ = sfixed32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.sfixed32)
}
inline ::validate::SFixed32Rules* FieldRules::_internal_mutable_sfixed32() {
  if (!_internal_has_sfixed32()) {
    clear_type();
    set_has_sfixed32();
    type_.sfixed32_ = CreateMaybeMessage< ::validate::SFixed32Rules >(GetArenaForAllocation());
  }
  return type_.sfixed32_;
}
inline ::validate::SFixed32Rules* FieldRules::mutable_sfixed32() {
  ::validate::SFixed32Rules* _msg = _internal_mutable_sfixed32();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.sfixed32)
  return _msg;
}

// .validate.SFixed64Rules sfixed64 = 12;
inline bool FieldRules::_internal_has_sfixed64() const {
  return type_case() == kSfixed64;
}
inline bool FieldRules::has_sfixed64() const {
  return _internal_has_sfixed64();
}
inline void FieldRules::set_has_sfixed64() {
  _oneof_case_[0] = kSfixed64;
}
inline void FieldRules::clear_sfixed64() {
  if (_internal_has_sfixed64()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.sfixed64_;
    }
    clear_has_type();
  }
}
inline ::validate::SFixed64Rules* FieldRules::release_sfixed64() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.sfixed64)
  if (_internal_has_sfixed64()) {
    clear_has_type();
      ::validate::SFixed64Rules* temp = type_.sfixed64_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.sfixed64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::SFixed64Rules& FieldRules::_internal_sfixed64() const {
  return _internal_has_sfixed64()
      ? *type_.sfixed64_
      : reinterpret_cast< ::validate::SFixed64Rules&>(::validate::_SFixed64Rules_default_instance_);
}
inline const ::validate::SFixed64Rules& FieldRules::sfixed64() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.sfixed64)
  return _internal_sfixed64();
}
inline ::validate::SFixed64Rules* FieldRules::unsafe_arena_release_sfixed64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.sfixed64)
  if (_internal_has_sfixed64()) {
    clear_has_type();
    ::validate::SFixed64Rules* temp = type_.sfixed64_;
    type_.sfixed64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_sfixed64(::validate::SFixed64Rules* sfixed64) {
  clear_type();
  if (sfixed64) {
    set_has_sfixed64();
    type_.sfixed64_ = sfixed64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.sfixed64)
}
inline ::validate::SFixed64Rules* FieldRules::_internal_mutable_sfixed64() {
  if (!_internal_has_sfixed64()) {
    clear_type();
    set_has_sfixed64();
    type_.sfixed64_ = CreateMaybeMessage< ::validate::SFixed64Rules >(GetArenaForAllocation());
  }
  return type_.sfixed64_;
}
inline ::validate::SFixed64Rules* FieldRules::mutable_sfixed64() {
  ::validate::SFixed64Rules* _msg = _internal_mutable_sfixed64();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.sfixed64)
  return _msg;
}

// .validate.BoolRules bool = 13;
inline bool FieldRules::_internal_has_bool_() const {
  return type_case() == kBool;
}
inline bool FieldRules::has_bool_() const {
  return _internal_has_bool_();
}
inline void FieldRules::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void FieldRules::clear_bool_() {
  if (_internal_has_bool_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.bool__;
    }
    clear_has_type();
  }
}
inline ::validate::BoolRules* FieldRules::release_bool_() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.bool)
  if (_internal_has_bool_()) {
    clear_has_type();
      ::validate::BoolRules* temp = type_.bool__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.bool__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::BoolRules& FieldRules::_internal_bool_() const {
  return _internal_has_bool_()
      ? *type_.bool__
      : reinterpret_cast< ::validate::BoolRules&>(::validate::_BoolRules_default_instance_);
}
inline const ::validate::BoolRules& FieldRules::bool_() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.bool)
  return _internal_bool_();
}
inline ::validate::BoolRules* FieldRules::unsafe_arena_release_bool_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.bool)
  if (_internal_has_bool_()) {
    clear_has_type();
    ::validate::BoolRules* temp = type_.bool__;
    type_.bool__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_bool_(::validate::BoolRules* bool_) {
  clear_type();
  if (bool_) {
    set_has_bool_();
    type_.bool__ = bool_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.bool)
}
inline ::validate::BoolRules* FieldRules::_internal_mutable_bool_() {
  if (!_internal_has_bool_()) {
    clear_type();
    set_has_bool_();
    type_.bool__ = CreateMaybeMessage< ::validate::BoolRules >(GetArenaForAllocation());
  }
  return type_.bool__;
}
inline ::validate::BoolRules* FieldRules::mutable_bool_() {
  ::validate::BoolRules* _msg = _internal_mutable_bool_();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.bool)
  return _msg;
}

// .validate.StringRules string = 14;
inline bool FieldRules::_internal_has_string() const {
  return type_case() == kString;
}
inline bool FieldRules::has_string() const {
  return _internal_has_string();
}
inline void FieldRules::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void FieldRules::clear_string() {
  if (_internal_has_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.string_;
    }
    clear_has_type();
  }
}
inline ::validate::StringRules* FieldRules::release_string() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.string)
  if (_internal_has_string()) {
    clear_has_type();
      ::validate::StringRules* temp = type_.string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::StringRules& FieldRules::_internal_string() const {
  return _internal_has_string()
      ? *type_.string_
      : reinterpret_cast< ::validate::StringRules&>(::validate::_StringRules_default_instance_);
}
inline const ::validate::StringRules& FieldRules::string() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.string)
  return _internal_string();
}
inline ::validate::StringRules* FieldRules::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.string)
  if (_internal_has_string()) {
    clear_has_type();
    ::validate::StringRules* temp = type_.string_;
    type_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_string(::validate::StringRules* string) {
  clear_type();
  if (string) {
    set_has_string();
    type_.string_ = string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.string)
}
inline ::validate::StringRules* FieldRules::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_type();
    set_has_string();
    type_.string_ = CreateMaybeMessage< ::validate::StringRules >(GetArenaForAllocation());
  }
  return type_.string_;
}
inline ::validate::StringRules* FieldRules::mutable_string() {
  ::validate::StringRules* _msg = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.string)
  return _msg;
}

// .validate.BytesRules bytes = 15;
inline bool FieldRules::_internal_has_bytes() const {
  return type_case() == kBytes;
}
inline bool FieldRules::has_bytes() const {
  return _internal_has_bytes();
}
inline void FieldRules::set_has_bytes() {
  _oneof_case_[0] = kBytes;
}
inline void FieldRules::clear_bytes() {
  if (_internal_has_bytes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.bytes_;
    }
    clear_has_type();
  }
}
inline ::validate::BytesRules* FieldRules::release_bytes() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.bytes)
  if (_internal_has_bytes()) {
    clear_has_type();
      ::validate::BytesRules* temp = type_.bytes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.bytes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::BytesRules& FieldRules::_internal_bytes() const {
  return _internal_has_bytes()
      ? *type_.bytes_
      : reinterpret_cast< ::validate::BytesRules&>(::validate::_BytesRules_default_instance_);
}
inline const ::validate::BytesRules& FieldRules::bytes() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.bytes)
  return _internal_bytes();
}
inline ::validate::BytesRules* FieldRules::unsafe_arena_release_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.bytes)
  if (_internal_has_bytes()) {
    clear_has_type();
    ::validate::BytesRules* temp = type_.bytes_;
    type_.bytes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_bytes(::validate::BytesRules* bytes) {
  clear_type();
  if (bytes) {
    set_has_bytes();
    type_.bytes_ = bytes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.bytes)
}
inline ::validate::BytesRules* FieldRules::_internal_mutable_bytes() {
  if (!_internal_has_bytes()) {
    clear_type();
    set_has_bytes();
    type_.bytes_ = CreateMaybeMessage< ::validate::BytesRules >(GetArenaForAllocation());
  }
  return type_.bytes_;
}
inline ::validate::BytesRules* FieldRules::mutable_bytes() {
  ::validate::BytesRules* _msg = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.bytes)
  return _msg;
}

// .validate.EnumRules enum = 16;
inline bool FieldRules::_internal_has_enum_() const {
  return type_case() == kEnum;
}
inline bool FieldRules::has_enum_() const {
  return _internal_has_enum_();
}
inline void FieldRules::set_has_enum_() {
  _oneof_case_[0] = kEnum;
}
inline void FieldRules::clear_enum_() {
  if (_internal_has_enum_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.enum__;
    }
    clear_has_type();
  }
}
inline ::validate::EnumRules* FieldRules::release_enum_() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.enum)
  if (_internal_has_enum_()) {
    clear_has_type();
      ::validate::EnumRules* temp = type_.enum__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.enum__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::EnumRules& FieldRules::_internal_enum_() const {
  return _internal_has_enum_()
      ? *type_.enum__
      : reinterpret_cast< ::validate::EnumRules&>(::validate::_EnumRules_default_instance_);
}
inline const ::validate::EnumRules& FieldRules::enum_() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.enum)
  return _internal_enum_();
}
inline ::validate::EnumRules* FieldRules::unsafe_arena_release_enum_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.enum)
  if (_internal_has_enum_()) {
    clear_has_type();
    ::validate::EnumRules* temp = type_.enum__;
    type_.enum__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_enum_(::validate::EnumRules* enum_) {
  clear_type();
  if (enum_) {
    set_has_enum_();
    type_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.enum)
}
inline ::validate::EnumRules* FieldRules::_internal_mutable_enum_() {
  if (!_internal_has_enum_()) {
    clear_type();
    set_has_enum_();
    type_.enum__ = CreateMaybeMessage< ::validate::EnumRules >(GetArenaForAllocation());
  }
  return type_.enum__;
}
inline ::validate::EnumRules* FieldRules::mutable_enum_() {
  ::validate::EnumRules* _msg = _internal_mutable_enum_();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.enum)
  return _msg;
}

// .validate.RepeatedRules repeated = 18;
inline bool FieldRules::_internal_has_repeated() const {
  return type_case() == kRepeated;
}
inline bool FieldRules::has_repeated() const {
  return _internal_has_repeated();
}
inline void FieldRules::set_has_repeated() {
  _oneof_case_[0] = kRepeated;
}
inline void FieldRules::clear_repeated() {
  if (_internal_has_repeated()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.repeated_;
    }
    clear_has_type();
  }
}
inline ::validate::RepeatedRules* FieldRules::release_repeated() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.repeated)
  if (_internal_has_repeated()) {
    clear_has_type();
      ::validate::RepeatedRules* temp = type_.repeated_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.repeated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::RepeatedRules& FieldRules::_internal_repeated() const {
  return _internal_has_repeated()
      ? *type_.repeated_
      : reinterpret_cast< ::validate::RepeatedRules&>(::validate::_RepeatedRules_default_instance_);
}
inline const ::validate::RepeatedRules& FieldRules::repeated() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.repeated)
  return _internal_repeated();
}
inline ::validate::RepeatedRules* FieldRules::unsafe_arena_release_repeated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.repeated)
  if (_internal_has_repeated()) {
    clear_has_type();
    ::validate::RepeatedRules* temp = type_.repeated_;
    type_.repeated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_repeated(::validate::RepeatedRules* repeated) {
  clear_type();
  if (repeated) {
    set_has_repeated();
    type_.repeated_ = repeated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.repeated)
}
inline ::validate::RepeatedRules* FieldRules::_internal_mutable_repeated() {
  if (!_internal_has_repeated()) {
    clear_type();
    set_has_repeated();
    type_.repeated_ = CreateMaybeMessage< ::validate::RepeatedRules >(GetArenaForAllocation());
  }
  return type_.repeated_;
}
inline ::validate::RepeatedRules* FieldRules::mutable_repeated() {
  ::validate::RepeatedRules* _msg = _internal_mutable_repeated();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.repeated)
  return _msg;
}

// .validate.MapRules map = 19;
inline bool FieldRules::_internal_has_map() const {
  return type_case() == kMap;
}
inline bool FieldRules::has_map() const {
  return _internal_has_map();
}
inline void FieldRules::set_has_map() {
  _oneof_case_[0] = kMap;
}
inline void FieldRules::clear_map() {
  if (_internal_has_map()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.map_;
    }
    clear_has_type();
  }
}
inline ::validate::MapRules* FieldRules::release_map() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.map)
  if (_internal_has_map()) {
    clear_has_type();
      ::validate::MapRules* temp = type_.map_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::MapRules& FieldRules::_internal_map() const {
  return _internal_has_map()
      ? *type_.map_
      : reinterpret_cast< ::validate::MapRules&>(::validate::_MapRules_default_instance_);
}
inline const ::validate::MapRules& FieldRules::map() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.map)
  return _internal_map();
}
inline ::validate::MapRules* FieldRules::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.map)
  if (_internal_has_map()) {
    clear_has_type();
    ::validate::MapRules* temp = type_.map_;
    type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_map(::validate::MapRules* map) {
  clear_type();
  if (map) {
    set_has_map();
    type_.map_ = map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.map)
}
inline ::validate::MapRules* FieldRules::_internal_mutable_map() {
  if (!_internal_has_map()) {
    clear_type();
    set_has_map();
    type_.map_ = CreateMaybeMessage< ::validate::MapRules >(GetArenaForAllocation());
  }
  return type_.map_;
}
inline ::validate::MapRules* FieldRules::mutable_map() {
  ::validate::MapRules* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.map)
  return _msg;
}

// .validate.AnyRules any = 20;
inline bool FieldRules::_internal_has_any() const {
  return type_case() == kAny;
}
inline bool FieldRules::has_any() const {
  return _internal_has_any();
}
inline void FieldRules::set_has_any() {
  _oneof_case_[0] = kAny;
}
inline void FieldRules::clear_any() {
  if (_internal_has_any()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.any_;
    }
    clear_has_type();
  }
}
inline ::validate::AnyRules* FieldRules::release_any() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.any)
  if (_internal_has_any()) {
    clear_has_type();
      ::validate::AnyRules* temp = type_.any_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::AnyRules& FieldRules::_internal_any() const {
  return _internal_has_any()
      ? *type_.any_
      : reinterpret_cast< ::validate::AnyRules&>(::validate::_AnyRules_default_instance_);
}
inline const ::validate::AnyRules& FieldRules::any() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.any)
  return _internal_any();
}
inline ::validate::AnyRules* FieldRules::unsafe_arena_release_any() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.any)
  if (_internal_has_any()) {
    clear_has_type();
    ::validate::AnyRules* temp = type_.any_;
    type_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_any(::validate::AnyRules* any) {
  clear_type();
  if (any) {
    set_has_any();
    type_.any_ = any;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.any)
}
inline ::validate::AnyRules* FieldRules::_internal_mutable_any() {
  if (!_internal_has_any()) {
    clear_type();
    set_has_any();
    type_.any_ = CreateMaybeMessage< ::validate::AnyRules >(GetArenaForAllocation());
  }
  return type_.any_;
}
inline ::validate::AnyRules* FieldRules::mutable_any() {
  ::validate::AnyRules* _msg = _internal_mutable_any();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.any)
  return _msg;
}

// .validate.DurationRules duration = 21;
inline bool FieldRules::_internal_has_duration() const {
  return type_case() == kDuration;
}
inline bool FieldRules::has_duration() const {
  return _internal_has_duration();
}
inline void FieldRules::set_has_duration() {
  _oneof_case_[0] = kDuration;
}
inline void FieldRules::clear_duration() {
  if (_internal_has_duration()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.duration_;
    }
    clear_has_type();
  }
}
inline ::validate::DurationRules* FieldRules::release_duration() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.duration)
  if (_internal_has_duration()) {
    clear_has_type();
      ::validate::DurationRules* temp = type_.duration_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::DurationRules& FieldRules::_internal_duration() const {
  return _internal_has_duration()
      ? *type_.duration_
      : reinterpret_cast< ::validate::DurationRules&>(::validate::_DurationRules_default_instance_);
}
inline const ::validate::DurationRules& FieldRules::duration() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.duration)
  return _internal_duration();
}
inline ::validate::DurationRules* FieldRules::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.duration)
  if (_internal_has_duration()) {
    clear_has_type();
    ::validate::DurationRules* temp = type_.duration_;
    type_.duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_duration(::validate::DurationRules* duration) {
  clear_type();
  if (duration) {
    set_has_duration();
    type_.duration_ = duration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.duration)
}
inline ::validate::DurationRules* FieldRules::_internal_mutable_duration() {
  if (!_internal_has_duration()) {
    clear_type();
    set_has_duration();
    type_.duration_ = CreateMaybeMessage< ::validate::DurationRules >(GetArenaForAllocation());
  }
  return type_.duration_;
}
inline ::validate::DurationRules* FieldRules::mutable_duration() {
  ::validate::DurationRules* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.duration)
  return _msg;
}

// .validate.TimestampRules timestamp = 22;
inline bool FieldRules::_internal_has_timestamp() const {
  return type_case() == kTimestamp;
}
inline bool FieldRules::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void FieldRules::set_has_timestamp() {
  _oneof_case_[0] = kTimestamp;
}
inline void FieldRules::clear_timestamp() {
  if (_internal_has_timestamp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.timestamp_;
    }
    clear_has_type();
  }
}
inline ::validate::TimestampRules* FieldRules::release_timestamp() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.timestamp)
  if (_internal_has_timestamp()) {
    clear_has_type();
      ::validate::TimestampRules* temp = type_.timestamp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::validate::TimestampRules& FieldRules::_internal_timestamp() const {
  return _internal_has_timestamp()
      ? *type_.timestamp_
      : reinterpret_cast< ::validate::TimestampRules&>(::validate::_TimestampRules_default_instance_);
}
inline const ::validate::TimestampRules& FieldRules::timestamp() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.timestamp)
  return _internal_timestamp();
}
inline ::validate::TimestampRules* FieldRules::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validate.FieldRules.timestamp)
  if (_internal_has_timestamp()) {
    clear_has_type();
    ::validate::TimestampRules* temp = type_.timestamp_;
    type_.timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_timestamp(::validate::TimestampRules* timestamp) {
  clear_type();
  if (timestamp) {
    set_has_timestamp();
    type_.timestamp_ = timestamp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.FieldRules.timestamp)
}
inline ::validate::TimestampRules* FieldRules::_internal_mutable_timestamp() {
  if (!_internal_has_timestamp()) {
    clear_type();
    set_has_timestamp();
    type_.timestamp_ = CreateMaybeMessage< ::validate::TimestampRules >(GetArenaForAllocation());
  }
  return type_.timestamp_;
}
inline ::validate::TimestampRules* FieldRules::mutable_timestamp() {
  ::validate::TimestampRules* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.timestamp)
  return _msg;
}

inline bool FieldRules::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void FieldRules::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline FieldRules::TypeCase FieldRules::type_case() const {
  return FieldRules::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FloatRules

// optional float const = 1;
inline bool FloatRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FloatRules::has_const_() const {
  return _internal_has_const_();
}
inline void FloatRules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float FloatRules::_internal_const_() const {
  return const__;
}
inline float FloatRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.const)
  return _internal_const_();
}
inline void FloatRules::_internal_set_const_(float value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void FloatRules::set_const_(float value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.FloatRules.const)
}

// optional float lt = 2;
inline bool FloatRules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FloatRules::has_lt() const {
  return _internal_has_lt();
}
inline void FloatRules::clear_lt() {
  lt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float FloatRules::_internal_lt() const {
  return lt_;
}
inline float FloatRules::lt() const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.lt)
  return _internal_lt();
}
inline void FloatRules::_internal_set_lt(float value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void FloatRules::set_lt(float value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.FloatRules.lt)
}

// optional float lte = 3;
inline bool FloatRules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FloatRules::has_lte() const {
  return _internal_has_lte();
}
inline void FloatRules::clear_lte() {
  lte_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float FloatRules::_internal_lte() const {
  return lte_;
}
inline float FloatRules::lte() const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.lte)
  return _internal_lte();
}
inline void FloatRules::_internal_set_lte(float value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void FloatRules::set_lte(float value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.FloatRules.lte)
}

// optional float gt = 4;
inline bool FloatRules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FloatRules::has_gt() const {
  return _internal_has_gt();
}
inline void FloatRules::clear_gt() {
  gt_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FloatRules::_internal_gt() const {
  return gt_;
}
inline float FloatRules::gt() const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.gt)
  return _internal_gt();
}
inline void FloatRules::_internal_set_gt(float value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void FloatRules::set_gt(float value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.FloatRules.gt)
}

// optional float gte = 5;
inline bool FloatRules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FloatRules::has_gte() const {
  return _internal_has_gte();
}
inline void FloatRules::clear_gte() {
  gte_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float FloatRules::_internal_gte() const {
  return gte_;
}
inline float FloatRules::gte() const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.gte)
  return _internal_gte();
}
inline void FloatRules::_internal_set_gte(float value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void FloatRules::set_gte(float value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.FloatRules.gte)
}

// repeated float in = 6;
inline int FloatRules::_internal_in_size() const {
  return in_.size();
}
inline int FloatRules::in_size() const {
  return _internal_in_size();
}
inline void FloatRules::clear_in() {
  in_.Clear();
}
inline float FloatRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline float FloatRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.in)
  return _internal_in(index);
}
inline void FloatRules::set_in(int index, float value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.FloatRules.in)
}
inline void FloatRules::_internal_add_in(float value) {
  in_.Add(value);
}
inline void FloatRules::add_in(float value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.FloatRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatRules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatRules::in() const {
  // @@protoc_insertion_point(field_list:validate.FloatRules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatRules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.FloatRules.in)
  return _internal_mutable_in();
}

// repeated float not_in = 7;
inline int FloatRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int FloatRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void FloatRules::clear_not_in() {
  not_in_.Clear();
}
inline float FloatRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline float FloatRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.not_in)
  return _internal_not_in(index);
}
inline void FloatRules::set_not_in(int index, float value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.FloatRules.not_in)
}
inline void FloatRules::_internal_add_not_in(float value) {
  not_in_.Add(value);
}
inline void FloatRules::add_not_in(float value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.FloatRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatRules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.FloatRules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatRules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.FloatRules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// DoubleRules

// optional double const = 1;
inline bool DoubleRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DoubleRules::has_const_() const {
  return _internal_has_const_();
}
inline void DoubleRules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DoubleRules::_internal_const_() const {
  return const__;
}
inline double DoubleRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.const)
  return _internal_const_();
}
inline void DoubleRules::_internal_set_const_(double value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void DoubleRules::set_const_(double value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.DoubleRules.const)
}

// optional double lt = 2;
inline bool DoubleRules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DoubleRules::has_lt() const {
  return _internal_has_lt();
}
inline void DoubleRules::clear_lt() {
  lt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DoubleRules::_internal_lt() const {
  return lt_;
}
inline double DoubleRules::lt() const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.lt)
  return _internal_lt();
}
inline void DoubleRules::_internal_set_lt(double value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void DoubleRules::set_lt(double value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.DoubleRules.lt)
}

// optional double lte = 3;
inline bool DoubleRules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DoubleRules::has_lte() const {
  return _internal_has_lte();
}
inline void DoubleRules::clear_lte() {
  lte_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double DoubleRules::_internal_lte() const {
  return lte_;
}
inline double DoubleRules::lte() const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.lte)
  return _internal_lte();
}
inline void DoubleRules::_internal_set_lte(double value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void DoubleRules::set_lte(double value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.DoubleRules.lte)
}

// optional double gt = 4;
inline bool DoubleRules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DoubleRules::has_gt() const {
  return _internal_has_gt();
}
inline void DoubleRules::clear_gt() {
  gt_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double DoubleRules::_internal_gt() const {
  return gt_;
}
inline double DoubleRules::gt() const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.gt)
  return _internal_gt();
}
inline void DoubleRules::_internal_set_gt(double value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void DoubleRules::set_gt(double value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.DoubleRules.gt)
}

// optional double gte = 5;
inline bool DoubleRules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DoubleRules::has_gte() const {
  return _internal_has_gte();
}
inline void DoubleRules::clear_gte() {
  gte_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double DoubleRules::_internal_gte() const {
  return gte_;
}
inline double DoubleRules::gte() const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.gte)
  return _internal_gte();
}
inline void DoubleRules::_internal_set_gte(double value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void DoubleRules::set_gte(double value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.DoubleRules.gte)
}

// repeated double in = 6;
inline int DoubleRules::_internal_in_size() const {
  return in_.size();
}
inline int DoubleRules::in_size() const {
  return _internal_in_size();
}
inline void DoubleRules::clear_in() {
  in_.Clear();
}
inline double DoubleRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline double DoubleRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.in)
  return _internal_in(index);
}
inline void DoubleRules::set_in(int index, double value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.DoubleRules.in)
}
inline void DoubleRules::_internal_add_in(double value) {
  in_.Add(value);
}
inline void DoubleRules::add_in(double value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.DoubleRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleRules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleRules::in() const {
  // @@protoc_insertion_point(field_list:validate.DoubleRules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleRules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.DoubleRules.in)
  return _internal_mutable_in();
}

// repeated double not_in = 7;
inline int DoubleRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int DoubleRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void DoubleRules::clear_not_in() {
  not_in_.Clear();
}
inline double DoubleRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline double DoubleRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.not_in)
  return _internal_not_in(index);
}
inline void DoubleRules::set_not_in(int index, double value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.DoubleRules.not_in)
}
inline void DoubleRules::_internal_add_not_in(double value) {
  not_in_.Add(value);
}
inline void DoubleRules::add_not_in(double value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.DoubleRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleRules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.DoubleRules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleRules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.DoubleRules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// Int32Rules

// optional int32 const = 1;
inline bool Int32Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Int32Rules::has_const_() const {
  return _internal_has_const_();
}
inline void Int32Rules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.const)
  return _internal_const_();
}
inline void Int32Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void Int32Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.Int32Rules.const)
}

// optional int32 lt = 2;
inline bool Int32Rules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Int32Rules::has_lt() const {
  return _internal_has_lt();
}
inline void Int32Rules::clear_lt() {
  lt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_lt() const {
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.lt)
  return _internal_lt();
}
inline void Int32Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void Int32Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.Int32Rules.lt)
}

// optional int32 lte = 3;
inline bool Int32Rules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Int32Rules::has_lte() const {
  return _internal_has_lte();
}
inline void Int32Rules::clear_lte() {
  lte_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_lte() const {
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.lte)
  return _internal_lte();
}
inline void Int32Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void Int32Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.Int32Rules.lte)
}

// optional int32 gt = 4;
inline bool Int32Rules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Int32Rules::has_gt() const {
  return _internal_has_gt();
}
inline void Int32Rules::clear_gt() {
  gt_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_gt() const {
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.gt)
  return _internal_gt();
}
inline void Int32Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void Int32Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.Int32Rules.gt)
}

// optional int32 gte = 5;
inline bool Int32Rules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Int32Rules::has_gte() const {
  return _internal_has_gte();
}
inline void Int32Rules::clear_gte() {
  gte_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_gte() const {
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.gte)
  return _internal_gte();
}
inline void Int32Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void Int32Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.Int32Rules.gte)
}

// repeated int32 in = 6;
inline int Int32Rules::_internal_in_size() const {
  return in_.size();
}
inline int Int32Rules::in_size() const {
  return _internal_in_size();
}
inline void Int32Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.in)
  return _internal_in(index);
}
inline void Int32Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Int32Rules.in)
}
inline void Int32Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Add(value);
}
inline void Int32Rules::add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.Int32Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.Int32Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Int32Rules.in)
  return _internal_mutable_in();
}

// repeated int32 not_in = 7;
inline int Int32Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int Int32Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void Int32Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.not_in)
  return _internal_not_in(index);
}
inline void Int32Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Int32Rules.not_in)
}
inline void Int32Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Add(value);
}
inline void Int32Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.Int32Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.Int32Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Int32Rules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// Int64Rules

// optional int64 const = 1;
inline bool Int64Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Int64Rules::has_const_() const {
  return _internal_has_const_();
}
inline void Int64Rules::clear_const_() {
  const__ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.const)
  return _internal_const_();
}
inline void Int64Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void Int64Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.Int64Rules.const)
}

// optional int64 lt = 2;
inline bool Int64Rules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Int64Rules::has_lt() const {
  return _internal_has_lt();
}
inline void Int64Rules::clear_lt() {
  lt_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_lt() const {
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.lt)
  return _internal_lt();
}
inline void Int64Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void Int64Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.Int64Rules.lt)
}

// optional int64 lte = 3;
inline bool Int64Rules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Int64Rules::has_lte() const {
  return _internal_has_lte();
}
inline void Int64Rules::clear_lte() {
  lte_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_lte() const {
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.lte)
  return _internal_lte();
}
inline void Int64Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void Int64Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.Int64Rules.lte)
}

// optional int64 gt = 4;
inline bool Int64Rules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Int64Rules::has_gt() const {
  return _internal_has_gt();
}
inline void Int64Rules::clear_gt() {
  gt_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_gt() const {
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.gt)
  return _internal_gt();
}
inline void Int64Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void Int64Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.Int64Rules.gt)
}

// optional int64 gte = 5;
inline bool Int64Rules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Int64Rules::has_gte() const {
  return _internal_has_gte();
}
inline void Int64Rules::clear_gte() {
  gte_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_gte() const {
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.gte)
  return _internal_gte();
}
inline void Int64Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void Int64Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.Int64Rules.gte)
}

// repeated int64 in = 6;
inline int Int64Rules::_internal_in_size() const {
  return in_.size();
}
inline int Int64Rules::in_size() const {
  return _internal_in_size();
}
inline void Int64Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.in)
  return _internal_in(index);
}
inline void Int64Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Int64Rules.in)
}
inline void Int64Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Add(value);
}
inline void Int64Rules::add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.Int64Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.Int64Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Int64Rules.in)
  return _internal_mutable_in();
}

// repeated int64 not_in = 7;
inline int Int64Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int Int64Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void Int64Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.not_in)
  return _internal_not_in(index);
}
inline void Int64Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Int64Rules.not_in)
}
inline void Int64Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Add(value);
}
inline void Int64Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.Int64Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.Int64Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Int64Rules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// UInt32Rules

// optional uint32 const = 1;
inline bool UInt32Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UInt32Rules::has_const_() const {
  return _internal_has_const_();
}
inline void UInt32Rules::clear_const_() {
  const__ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.const)
  return _internal_const_();
}
inline void UInt32Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void UInt32Rules::set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.const)
}

// optional uint32 lt = 2;
inline bool UInt32Rules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UInt32Rules::has_lt() const {
  return _internal_has_lt();
}
inline void UInt32Rules::clear_lt() {
  lt_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_lt() const {
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.lt)
  return _internal_lt();
}
inline void UInt32Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void UInt32Rules::set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.lt)
}

// optional uint32 lte = 3;
inline bool UInt32Rules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UInt32Rules::has_lte() const {
  return _internal_has_lte();
}
inline void UInt32Rules::clear_lte() {
  lte_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_lte() const {
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.lte)
  return _internal_lte();
}
inline void UInt32Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void UInt32Rules::set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.lte)
}

// optional uint32 gt = 4;
inline bool UInt32Rules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UInt32Rules::has_gt() const {
  return _internal_has_gt();
}
inline void UInt32Rules::clear_gt() {
  gt_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_gt() const {
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.gt)
  return _internal_gt();
}
inline void UInt32Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void UInt32Rules::set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.gt)
}

// optional uint32 gte = 5;
inline bool UInt32Rules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UInt32Rules::has_gte() const {
  return _internal_has_gte();
}
inline void UInt32Rules::clear_gte() {
  gte_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_gte() const {
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.gte)
  return _internal_gte();
}
inline void UInt32Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void UInt32Rules::set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.gte)
}

// repeated uint32 in = 6;
inline int UInt32Rules::_internal_in_size() const {
  return in_.size();
}
inline int UInt32Rules::in_size() const {
  return _internal_in_size();
}
inline void UInt32Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.in)
  return _internal_in(index);
}
inline void UInt32Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.in)
}
inline void UInt32Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  in_.Add(value);
}
inline void UInt32Rules::add_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.UInt32Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.UInt32Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.UInt32Rules.in)
  return _internal_mutable_in();
}

// repeated uint32 not_in = 7;
inline int UInt32Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int UInt32Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void UInt32Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.not_in)
  return _internal_not_in(index);
}
inline void UInt32Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.not_in)
}
inline void UInt32Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  not_in_.Add(value);
}
inline void UInt32Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.UInt32Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.UInt32Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.UInt32Rules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// UInt64Rules

// optional uint64 const = 1;
inline bool UInt64Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UInt64Rules::has_const_() const {
  return _internal_has_const_();
}
inline void UInt64Rules::clear_const_() {
  const__ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.const)
  return _internal_const_();
}
inline void UInt64Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void UInt64Rules::set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.const)
}

// optional uint64 lt = 2;
inline bool UInt64Rules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UInt64Rules::has_lt() const {
  return _internal_has_lt();
}
inline void UInt64Rules::clear_lt() {
  lt_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_lt() const {
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.lt)
  return _internal_lt();
}
inline void UInt64Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void UInt64Rules::set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.lt)
}

// optional uint64 lte = 3;
inline bool UInt64Rules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UInt64Rules::has_lte() const {
  return _internal_has_lte();
}
inline void UInt64Rules::clear_lte() {
  lte_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_lte() const {
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.lte)
  return _internal_lte();
}
inline void UInt64Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void UInt64Rules::set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.lte)
}

// optional uint64 gt = 4;
inline bool UInt64Rules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UInt64Rules::has_gt() const {
  return _internal_has_gt();
}
inline void UInt64Rules::clear_gt() {
  gt_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_gt() const {
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.gt)
  return _internal_gt();
}
inline void UInt64Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void UInt64Rules::set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.gt)
}

// optional uint64 gte = 5;
inline bool UInt64Rules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UInt64Rules::has_gte() const {
  return _internal_has_gte();
}
inline void UInt64Rules::clear_gte() {
  gte_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_gte() const {
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.gte)
  return _internal_gte();
}
inline void UInt64Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void UInt64Rules::set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.gte)
}

// repeated uint64 in = 6;
inline int UInt64Rules::_internal_in_size() const {
  return in_.size();
}
inline int UInt64Rules::in_size() const {
  return _internal_in_size();
}
inline void UInt64Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.in)
  return _internal_in(index);
}
inline void UInt64Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.in)
}
inline void UInt64Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  in_.Add(value);
}
inline void UInt64Rules::add_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.UInt64Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UInt64Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UInt64Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.UInt64Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UInt64Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UInt64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.UInt64Rules.in)
  return _internal_mutable_in();
}

// repeated uint64 not_in = 7;
inline int UInt64Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int UInt64Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void UInt64Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.not_in)
  return _internal_not_in(index);
}
inline void UInt64Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.not_in)
}
inline void UInt64Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  not_in_.Add(value);
}
inline void UInt64Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.UInt64Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UInt64Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UInt64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.UInt64Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UInt64Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UInt64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.UInt64Rules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// SInt32Rules

// optional sint32 const = 1;
inline bool SInt32Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SInt32Rules::has_const_() const {
  return _internal_has_const_();
}
inline void SInt32Rules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.const)
  return _internal_const_();
}
inline void SInt32Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void SInt32Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.const)
}

// optional sint32 lt = 2;
inline bool SInt32Rules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SInt32Rules::has_lt() const {
  return _internal_has_lt();
}
inline void SInt32Rules::clear_lt() {
  lt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_lt() const {
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.lt)
  return _internal_lt();
}
inline void SInt32Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void SInt32Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.lt)
}

// optional sint32 lte = 3;
inline bool SInt32Rules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SInt32Rules::has_lte() const {
  return _internal_has_lte();
}
inline void SInt32Rules::clear_lte() {
  lte_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_lte() const {
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.lte)
  return _internal_lte();
}
inline void SInt32Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void SInt32Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.lte)
}

// optional sint32 gt = 4;
inline bool SInt32Rules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SInt32Rules::has_gt() const {
  return _internal_has_gt();
}
inline void SInt32Rules::clear_gt() {
  gt_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_gt() const {
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.gt)
  return _internal_gt();
}
inline void SInt32Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void SInt32Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.gt)
}

// optional sint32 gte = 5;
inline bool SInt32Rules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SInt32Rules::has_gte() const {
  return _internal_has_gte();
}
inline void SInt32Rules::clear_gte() {
  gte_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_gte() const {
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.gte)
  return _internal_gte();
}
inline void SInt32Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void SInt32Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.gte)
}

// repeated sint32 in = 6;
inline int SInt32Rules::_internal_in_size() const {
  return in_.size();
}
inline int SInt32Rules::in_size() const {
  return _internal_in_size();
}
inline void SInt32Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.in)
  return _internal_in(index);
}
inline void SInt32Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.in)
}
inline void SInt32Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Add(value);
}
inline void SInt32Rules::add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.SInt32Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SInt32Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SInt32Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.SInt32Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SInt32Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SInt32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SInt32Rules.in)
  return _internal_mutable_in();
}

// repeated sint32 not_in = 7;
inline int SInt32Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int SInt32Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void SInt32Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.not_in)
  return _internal_not_in(index);
}
inline void SInt32Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.not_in)
}
inline void SInt32Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Add(value);
}
inline void SInt32Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.SInt32Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SInt32Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SInt32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.SInt32Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SInt32Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SInt32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SInt32Rules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// SInt64Rules

// optional sint64 const = 1;
inline bool SInt64Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SInt64Rules::has_const_() const {
  return _internal_has_const_();
}
inline void SInt64Rules::clear_const_() {
  const__ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.const)
  return _internal_const_();
}
inline void SInt64Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void SInt64Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.const)
}

// optional sint64 lt = 2;
inline bool SInt64Rules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SInt64Rules::has_lt() const {
  return _internal_has_lt();
}
inline void SInt64Rules::clear_lt() {
  lt_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_lt() const {
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.lt)
  return _internal_lt();
}
inline void SInt64Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void SInt64Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.lt)
}

// optional sint64 lte = 3;
inline bool SInt64Rules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SInt64Rules::has_lte() const {
  return _internal_has_lte();
}
inline void SInt64Rules::clear_lte() {
  lte_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_lte() const {
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.lte)
  return _internal_lte();
}
inline void SInt64Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void SInt64Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.lte)
}

// optional sint64 gt = 4;
inline bool SInt64Rules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SInt64Rules::has_gt() const {
  return _internal_has_gt();
}
inline void SInt64Rules::clear_gt() {
  gt_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_gt() const {
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.gt)
  return _internal_gt();
}
inline void SInt64Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void SInt64Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.gt)
}

// optional sint64 gte = 5;
inline bool SInt64Rules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SInt64Rules::has_gte() const {
  return _internal_has_gte();
}
inline void SInt64Rules::clear_gte() {
  gte_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_gte() const {
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.gte)
  return _internal_gte();
}
inline void SInt64Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void SInt64Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.gte)
}

// repeated sint64 in = 6;
inline int SInt64Rules::_internal_in_size() const {
  return in_.size();
}
inline int SInt64Rules::in_size() const {
  return _internal_in_size();
}
inline void SInt64Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.in)
  return _internal_in(index);
}
inline void SInt64Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.in)
}
inline void SInt64Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Add(value);
}
inline void SInt64Rules::add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.SInt64Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SInt64Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SInt64Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.SInt64Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SInt64Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SInt64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SInt64Rules.in)
  return _internal_mutable_in();
}

// repeated sint64 not_in = 7;
inline int SInt64Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int SInt64Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void SInt64Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.not_in)
  return _internal_not_in(index);
}
inline void SInt64Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.not_in)
}
inline void SInt64Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Add(value);
}
inline void SInt64Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.SInt64Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SInt64Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SInt64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.SInt64Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SInt64Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SInt64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SInt64Rules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// Fixed32Rules

// optional fixed32 const = 1;
inline bool Fixed32Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Fixed32Rules::has_const_() const {
  return _internal_has_const_();
}
inline void Fixed32Rules::clear_const_() {
  const__ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.const)
  return _internal_const_();
}
inline void Fixed32Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void Fixed32Rules::set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.const)
}

// optional fixed32 lt = 2;
inline bool Fixed32Rules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Fixed32Rules::has_lt() const {
  return _internal_has_lt();
}
inline void Fixed32Rules::clear_lt() {
  lt_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_lt() const {
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.lt)
  return _internal_lt();
}
inline void Fixed32Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void Fixed32Rules::set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.lt)
}

// optional fixed32 lte = 3;
inline bool Fixed32Rules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Fixed32Rules::has_lte() const {
  return _internal_has_lte();
}
inline void Fixed32Rules::clear_lte() {
  lte_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_lte() const {
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.lte)
  return _internal_lte();
}
inline void Fixed32Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void Fixed32Rules::set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.lte)
}

// optional fixed32 gt = 4;
inline bool Fixed32Rules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Fixed32Rules::has_gt() const {
  return _internal_has_gt();
}
inline void Fixed32Rules::clear_gt() {
  gt_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_gt() const {
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.gt)
  return _internal_gt();
}
inline void Fixed32Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void Fixed32Rules::set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.gt)
}

// optional fixed32 gte = 5;
inline bool Fixed32Rules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Fixed32Rules::has_gte() const {
  return _internal_has_gte();
}
inline void Fixed32Rules::clear_gte() {
  gte_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_gte() const {
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.gte)
  return _internal_gte();
}
inline void Fixed32Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void Fixed32Rules::set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.gte)
}

// repeated fixed32 in = 6;
inline int Fixed32Rules::_internal_in_size() const {
  return in_.size();
}
inline int Fixed32Rules::in_size() const {
  return _internal_in_size();
}
inline void Fixed32Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.in)
  return _internal_in(index);
}
inline void Fixed32Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.in)
}
inline void Fixed32Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  in_.Add(value);
}
inline void Fixed32Rules::add_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.Fixed32Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fixed32Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fixed32Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.Fixed32Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fixed32Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fixed32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Fixed32Rules.in)
  return _internal_mutable_in();
}

// repeated fixed32 not_in = 7;
inline int Fixed32Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int Fixed32Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void Fixed32Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.not_in)
  return _internal_not_in(index);
}
inline void Fixed32Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.not_in)
}
inline void Fixed32Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  not_in_.Add(value);
}
inline void Fixed32Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.Fixed32Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fixed32Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fixed32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.Fixed32Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fixed32Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fixed32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Fixed32Rules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// Fixed64Rules

// optional fixed64 const = 1;
inline bool Fixed64Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Fixed64Rules::has_const_() const {
  return _internal_has_const_();
}
inline void Fixed64Rules::clear_const_() {
  const__ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.const)
  return _internal_const_();
}
inline void Fixed64Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void Fixed64Rules::set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.const)
}

// optional fixed64 lt = 2;
inline bool Fixed64Rules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Fixed64Rules::has_lt() const {
  return _internal_has_lt();
}
inline void Fixed64Rules::clear_lt() {
  lt_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_lt() const {
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.lt)
  return _internal_lt();
}
inline void Fixed64Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void Fixed64Rules::set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.lt)
}

// optional fixed64 lte = 3;
inline bool Fixed64Rules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Fixed64Rules::has_lte() const {
  return _internal_has_lte();
}
inline void Fixed64Rules::clear_lte() {
  lte_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_lte() const {
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.lte)
  return _internal_lte();
}
inline void Fixed64Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void Fixed64Rules::set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.lte)
}

// optional fixed64 gt = 4;
inline bool Fixed64Rules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Fixed64Rules::has_gt() const {
  return _internal_has_gt();
}
inline void Fixed64Rules::clear_gt() {
  gt_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_gt() const {
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.gt)
  return _internal_gt();
}
inline void Fixed64Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void Fixed64Rules::set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.gt)
}

// optional fixed64 gte = 5;
inline bool Fixed64Rules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Fixed64Rules::has_gte() const {
  return _internal_has_gte();
}
inline void Fixed64Rules::clear_gte() {
  gte_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_gte() const {
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.gte)
  return _internal_gte();
}
inline void Fixed64Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void Fixed64Rules::set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.gte)
}

// repeated fixed64 in = 6;
inline int Fixed64Rules::_internal_in_size() const {
  return in_.size();
}
inline int Fixed64Rules::in_size() const {
  return _internal_in_size();
}
inline void Fixed64Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.in)
  return _internal_in(index);
}
inline void Fixed64Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.in)
}
inline void Fixed64Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  in_.Add(value);
}
inline void Fixed64Rules::add_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.Fixed64Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Fixed64Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Fixed64Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.Fixed64Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Fixed64Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Fixed64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Fixed64Rules.in)
  return _internal_mutable_in();
}

// repeated fixed64 not_in = 7;
inline int Fixed64Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int Fixed64Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void Fixed64Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.not_in)
  return _internal_not_in(index);
}
inline void Fixed64Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.not_in)
}
inline void Fixed64Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  not_in_.Add(value);
}
inline void Fixed64Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.Fixed64Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Fixed64Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Fixed64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.Fixed64Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Fixed64Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Fixed64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Fixed64Rules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// SFixed32Rules

// optional sfixed32 const = 1;
inline bool SFixed32Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SFixed32Rules::has_const_() const {
  return _internal_has_const_();
}
inline void SFixed32Rules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.const)
  return _internal_const_();
}
inline void SFixed32Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void SFixed32Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.const)
}

// optional sfixed32 lt = 2;
inline bool SFixed32Rules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SFixed32Rules::has_lt() const {
  return _internal_has_lt();
}
inline void SFixed32Rules::clear_lt() {
  lt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_lt() const {
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.lt)
  return _internal_lt();
}
inline void SFixed32Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void SFixed32Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.lt)
}

// optional sfixed32 lte = 3;
inline bool SFixed32Rules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SFixed32Rules::has_lte() const {
  return _internal_has_lte();
}
inline void SFixed32Rules::clear_lte() {
  lte_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_lte() const {
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.lte)
  return _internal_lte();
}
inline void SFixed32Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void SFixed32Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.lte)
}

// optional sfixed32 gt = 4;
inline bool SFixed32Rules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SFixed32Rules::has_gt() const {
  return _internal_has_gt();
}
inline void SFixed32Rules::clear_gt() {
  gt_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_gt() const {
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.gt)
  return _internal_gt();
}
inline void SFixed32Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void SFixed32Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.gt)
}

// optional sfixed32 gte = 5;
inline bool SFixed32Rules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SFixed32Rules::has_gte() const {
  return _internal_has_gte();
}
inline void SFixed32Rules::clear_gte() {
  gte_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_gte() const {
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.gte)
  return _internal_gte();
}
inline void SFixed32Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void SFixed32Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.gte)
}

// repeated sfixed32 in = 6;
inline int SFixed32Rules::_internal_in_size() const {
  return in_.size();
}
inline int SFixed32Rules::in_size() const {
  return _internal_in_size();
}
inline void SFixed32Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.in)
  return _internal_in(index);
}
inline void SFixed32Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.in)
}
inline void SFixed32Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Add(value);
}
inline void SFixed32Rules::add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.SFixed32Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SFixed32Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SFixed32Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.SFixed32Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SFixed32Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SFixed32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SFixed32Rules.in)
  return _internal_mutable_in();
}

// repeated sfixed32 not_in = 7;
inline int SFixed32Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int SFixed32Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void SFixed32Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.not_in)
  return _internal_not_in(index);
}
inline void SFixed32Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.not_in)
}
inline void SFixed32Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Add(value);
}
inline void SFixed32Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.SFixed32Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SFixed32Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SFixed32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.SFixed32Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SFixed32Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SFixed32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SFixed32Rules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// SFixed64Rules

// optional sfixed64 const = 1;
inline bool SFixed64Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SFixed64Rules::has_const_() const {
  return _internal_has_const_();
}
inline void SFixed64Rules::clear_const_() {
  const__ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.const)
  return _internal_const_();
}
inline void SFixed64Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void SFixed64Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.const)
}

// optional sfixed64 lt = 2;
inline bool SFixed64Rules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SFixed64Rules::has_lt() const {
  return _internal_has_lt();
}
inline void SFixed64Rules::clear_lt() {
  lt_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_lt() const {
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.lt)
  return _internal_lt();
}
inline void SFixed64Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  lt_ = value;
}
inline void SFixed64Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.lt)
}

// optional sfixed64 lte = 3;
inline bool SFixed64Rules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SFixed64Rules::has_lte() const {
  return _internal_has_lte();
}
inline void SFixed64Rules::clear_lte() {
  lte_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_lte() const {
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.lte)
  return _internal_lte();
}
inline void SFixed64Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  lte_ = value;
}
inline void SFixed64Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.lte)
}

// optional sfixed64 gt = 4;
inline bool SFixed64Rules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SFixed64Rules::has_gt() const {
  return _internal_has_gt();
}
inline void SFixed64Rules::clear_gt() {
  gt_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_gt() const {
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.gt)
  return _internal_gt();
}
inline void SFixed64Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  gt_ = value;
}
inline void SFixed64Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.gt)
}

// optional sfixed64 gte = 5;
inline bool SFixed64Rules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SFixed64Rules::has_gte() const {
  return _internal_has_gte();
}
inline void SFixed64Rules::clear_gte() {
  gte_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_gte() const {
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.gte)
  return _internal_gte();
}
inline void SFixed64Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  gte_ = value;
}
inline void SFixed64Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.gte)
}

// repeated sfixed64 in = 6;
inline int SFixed64Rules::_internal_in_size() const {
  return in_.size();
}
inline int SFixed64Rules::in_size() const {
  return _internal_in_size();
}
inline void SFixed64Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.in)
  return _internal_in(index);
}
inline void SFixed64Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.in)
}
inline void SFixed64Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Add(value);
}
inline void SFixed64Rules::add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.SFixed64Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SFixed64Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SFixed64Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.SFixed64Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SFixed64Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SFixed64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SFixed64Rules.in)
  return _internal_mutable_in();
}

// repeated sfixed64 not_in = 7;
inline int SFixed64Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int SFixed64Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void SFixed64Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.not_in)
  return _internal_not_in(index);
}
inline void SFixed64Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.not_in)
}
inline void SFixed64Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Add(value);
}
inline void SFixed64Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.SFixed64Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SFixed64Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SFixed64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.SFixed64Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SFixed64Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SFixed64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SFixed64Rules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// BoolRules

// optional bool const = 1;
inline bool BoolRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BoolRules::has_const_() const {
  return _internal_has_const_();
}
inline void BoolRules::clear_const_() {
  const__ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool BoolRules::_internal_const_() const {
  return const__;
}
inline bool BoolRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.BoolRules.const)
  return _internal_const_();
}
inline void BoolRules::_internal_set_const_(bool value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void BoolRules::set_const_(bool value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.BoolRules.const)
}

// -------------------------------------------------------------------

// StringRules

// optional string const = 1;
inline bool StringRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringRules::has_const_() const {
  return _internal_has_const_();
}
inline void StringRules::clear_const_() {
  const__.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.const)
  return _internal_const_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringRules::set_const_(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 const__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:validate.StringRules.const)
}
inline std::string* StringRules::mutable_const_() {
  std::string* _s = _internal_mutable_const_();
  // @@protoc_insertion_point(field_mutable:validate.StringRules.const)
  return _s;
}
inline const std::string& StringRules::_internal_const_() const {
  return const__.Get();
}
inline void StringRules::_internal_set_const_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  const__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StringRules::_internal_mutable_const_() {
  _has_bits_[0] |= 0x00000001u;
  return const__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StringRules::release_const_() {
  // @@protoc_insertion_point(field_release:validate.StringRules.const)
  if (!_internal_has_const_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return const__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StringRules::set_allocated_const_(std::string* const_) {
  if (const_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  const__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), const_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:validate.StringRules.const)
}

// optional uint64 len = 19;
inline bool StringRules::_internal_has_len() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool StringRules::has_len() const {
  return _internal_has_len();
}
inline void StringRules::clear_len() {
  len_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::len() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.len)
  return _internal_len();
}
inline void StringRules::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  len_ = value;
}
inline void StringRules::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.len)
}

// optional uint64 min_len = 2;
inline bool StringRules::_internal_has_min_len() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StringRules::has_min_len() const {
  return _internal_has_min_len();
}
inline void StringRules::clear_min_len() {
  min_len_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_min_len() const {
  return min_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::min_len() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.min_len)
  return _internal_min_len();
}
inline void StringRules::_internal_set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  min_len_ = value;
}
inline void StringRules::set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_len(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.min_len)
}

// optional uint64 max_len = 3;
inline bool StringRules::_internal_has_max_len() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StringRules::has_max_len() const {
  return _internal_has_max_len();
}
inline void StringRules::clear_max_len() {
  max_len_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_max_len() const {
  return max_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::max_len() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.max_len)
  return _internal_max_len();
}
inline void StringRules::_internal_set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  max_len_ = value;
}
inline void StringRules::set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_len(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.max_len)
}

// optional uint64 len_bytes = 20;
inline bool StringRules::_internal_has_len_bytes() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool StringRules::has_len_bytes() const {
  return _internal_has_len_bytes();
}
inline void StringRules::clear_len_bytes() {
  len_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_len_bytes() const {
  return len_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::len_bytes() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.len_bytes)
  return _internal_len_bytes();
}
inline void StringRules::_internal_set_len_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  len_bytes_ = value;
}
inline void StringRules::set_len_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len_bytes(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.len_bytes)
}

// optional uint64 min_bytes = 4;
inline bool StringRules::_internal_has_min_bytes() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool StringRules::has_min_bytes() const {
  return _internal_has_min_bytes();
}
inline void StringRules::clear_min_bytes() {
  min_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_min_bytes() const {
  return min_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::min_bytes() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.min_bytes)
  return _internal_min_bytes();
}
inline void StringRules::_internal_set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  min_bytes_ = value;
}
inline void StringRules::set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_bytes(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.min_bytes)
}

// optional uint64 max_bytes = 5;
inline bool StringRules::_internal_has_max_bytes() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool StringRules::has_max_bytes() const {
  return _internal_has_max_bytes();
}
inline void StringRules::clear_max_bytes() {
  max_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_max_bytes() const {
  return max_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::max_bytes() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.max_bytes)
  return _internal_max_bytes();
}
inline void StringRules::_internal_set_max_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  max_bytes_ = value;
}
inline void StringRules::set_max_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_bytes(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.max_bytes)
}

// optional string pattern = 6;
inline bool StringRules::_internal_has_pattern() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StringRules::has_pattern() const {
  return _internal_has_pattern();
}
inline void StringRules::clear_pattern() {
  pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StringRules::pattern() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.pattern)
  return _internal_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringRules::set_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:validate.StringRules.pattern)
}
inline std::string* StringRules::mutable_pattern() {
  std::string* _s = _internal_mutable_pattern();
  // @@protoc_insertion_point(field_mutable:validate.StringRules.pattern)
  return _s;
}
inline const std::string& StringRules::_internal_pattern() const {
  return pattern_.Get();
}
inline void StringRules::_internal_set_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StringRules::_internal_mutable_pattern() {
  _has_bits_[0] |= 0x00000002u;
  return pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StringRules::release_pattern() {
  // @@protoc_insertion_point(field_release:validate.StringRules.pattern)
  if (!_internal_has_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StringRules::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:validate.StringRules.pattern)
}

// optional string prefix = 7;
inline bool StringRules::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StringRules::has_prefix() const {
  return _internal_has_prefix();
}
inline void StringRules::clear_prefix() {
  prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StringRules::prefix() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringRules::set_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:validate.StringRules.prefix)
}
inline std::string* StringRules::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:validate.StringRules.prefix)
  return _s;
}
inline const std::string& StringRules::_internal_prefix() const {
  return prefix_.Get();
}
inline void StringRules::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StringRules::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000004u;
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StringRules::release_prefix() {
  // @@protoc_insertion_point(field_release:validate.StringRules.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StringRules::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:validate.StringRules.prefix)
}

// optional string suffix = 8;
inline bool StringRules::_internal_has_suffix() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StringRules::has_suffix() const {
  return _internal_has_suffix();
}
inline void StringRules::clear_suffix() {
  suffix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& StringRules::suffix() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.suffix)
  return _internal_suffix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringRules::set_suffix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:validate.StringRules.suffix)
}
inline std::string* StringRules::mutable_suffix() {
  std::string* _s = _internal_mutable_suffix();
  // @@protoc_insertion_point(field_mutable:validate.StringRules.suffix)
  return _s;
}
inline const std::string& StringRules::_internal_suffix() const {
  return suffix_.Get();
}
inline void StringRules::_internal_set_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StringRules::_internal_mutable_suffix() {
  _has_bits_[0] |= 0x00000008u;
  return suffix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StringRules::release_suffix() {
  // @@protoc_insertion_point(field_release:validate.StringRules.suffix)
  if (!_internal_has_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return suffix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StringRules::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:validate.StringRules.suffix)
}

// optional string contains = 9;
inline bool StringRules::_internal_has_contains() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StringRules::has_contains() const {
  return _internal_has_contains();
}
inline void StringRules::clear_contains() {
  contains_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& StringRules::contains() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.contains)
  return _internal_contains();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringRules::set_contains(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 contains_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:validate.StringRules.contains)
}
inline std::string* StringRules::mutable_contains() {
  std::string* _s = _internal_mutable_contains();
  // @@protoc_insertion_point(field_mutable:validate.StringRules.contains)
  return _s;
}
inline const std::string& StringRules::_internal_contains() const {
  return contains_.Get();
}
inline void StringRules::_internal_set_contains(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  contains_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StringRules::_internal_mutable_contains() {
  _has_bits_[0] |= 0x00000010u;
  return contains_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StringRules::release_contains() {
  // @@protoc_insertion_point(field_release:validate.StringRules.contains)
  if (!_internal_has_contains()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return contains_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StringRules::set_allocated_contains(std::string* contains) {
  if (contains != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  contains_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contains,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:validate.StringRules.contains)
}

// optional string not_contains = 23;
inline bool StringRules::_internal_has_not_contains() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StringRules::has_not_contains() const {
  return _internal_has_not_contains();
}
inline void StringRules::clear_not_contains() {
  not_contains_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& StringRules::not_contains() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.not_contains)
  return _internal_not_contains();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringRules::set_not_contains(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 not_contains_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:validate.StringRules.not_contains)
}
inline std::string* StringRules::mutable_not_contains() {
  std::string* _s = _internal_mutable_not_contains();
  // @@protoc_insertion_point(field_mutable:validate.StringRules.not_contains)
  return _s;
}
inline const std::string& StringRules::_internal_not_contains() const {
  return not_contains_.Get();
}
inline void StringRules::_internal_set_not_contains(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  not_contains_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StringRules::_internal_mutable_not_contains() {
  _has_bits_[0] |= 0x00000020u;
  return not_contains_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StringRules::release_not_contains() {
  // @@protoc_insertion_point(field_release:validate.StringRules.not_contains)
  if (!_internal_has_not_contains()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return not_contains_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StringRules::set_allocated_not_contains(std::string* not_contains) {
  if (not_contains != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  not_contains_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), not_contains,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:validate.StringRules.not_contains)
}

// repeated string in = 10;
inline int StringRules::_internal_in_size() const {
  return in_.size();
}
inline int StringRules::in_size() const {
  return _internal_in_size();
}
inline void StringRules::clear_in() {
  in_.Clear();
}
inline std::string* StringRules::add_in() {
  std::string* _s = _internal_add_in();
  // @@protoc_insertion_point(field_add_mutable:validate.StringRules.in)
  return _s;
}
inline const std::string& StringRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline const std::string& StringRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.StringRules.in)
  return _internal_in(index);
}
inline std::string* StringRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.StringRules.in)
  return in_.Mutable(index);
}
inline void StringRules::set_in(int index, const std::string& value) {
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.in)
}
inline void StringRules::set_in(int index, std::string&& value) {
  in_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:validate.StringRules.in)
}
inline void StringRules::set_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.StringRules.in)
}
inline void StringRules::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.StringRules.in)
}
inline std::string* StringRules::_internal_add_in() {
  return in_.Add();
}
inline void StringRules::add_in(const std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.StringRules.in)
}
inline void StringRules::add_in(std::string&& value) {
  in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.StringRules.in)
}
inline void StringRules::add_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.StringRules.in)
}
inline void StringRules::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.StringRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringRules::in() const {
  // @@protoc_insertion_point(field_list:validate.StringRules.in)
  return in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.StringRules.in)
  return &in_;
}

// repeated string not_in = 11;
inline int StringRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int StringRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void StringRules::clear_not_in() {
  not_in_.Clear();
}
inline std::string* StringRules::add_not_in() {
  std::string* _s = _internal_add_not_in();
  // @@protoc_insertion_point(field_add_mutable:validate.StringRules.not_in)
  return _s;
}
inline const std::string& StringRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline const std::string& StringRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.StringRules.not_in)
  return _internal_not_in(index);
}
inline std::string* StringRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.StringRules.not_in)
  return not_in_.Mutable(index);
}
inline void StringRules::set_not_in(int index, const std::string& value) {
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.not_in)
}
inline void StringRules::set_not_in(int index, std::string&& value) {
  not_in_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:validate.StringRules.not_in)
}
inline void StringRules::set_not_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.StringRules.not_in)
}
inline void StringRules::set_not_in(int index, const char* value, size_t size) {
  not_in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.StringRules.not_in)
}
inline std::string* StringRules::_internal_add_not_in() {
  return not_in_.Add();
}
inline void StringRules::add_not_in(const std::string& value) {
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.StringRules.not_in)
}
inline void StringRules::add_not_in(std::string&& value) {
  not_in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.StringRules.not_in)
}
inline void StringRules::add_not_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.StringRules.not_in)
}
inline void StringRules::add_not_in(const char* value, size_t size) {
  not_in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.StringRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.StringRules.not_in)
  return not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.StringRules.not_in)
  return &not_in_;
}

// bool email = 12;
inline bool StringRules::_internal_has_email() const {
  return well_known_case() == kEmail;
}
inline bool StringRules::has_email() const {
  return _internal_has_email();
}
inline void StringRules::set_has_email() {
  _oneof_case_[0] = kEmail;
}
inline void StringRules::clear_email() {
  if (_internal_has_email()) {
    well_known_.email_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_email() const {
  if (_internal_has_email()) {
    return well_known_.email_;
  }
  return false;
}
inline void StringRules::_internal_set_email(bool value) {
  if (!_internal_has_email()) {
    clear_well_known();
    set_has_email();
  }
  well_known_.email_ = value;
}
inline bool StringRules::email() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.email)
  return _internal_email();
}
inline void StringRules::set_email(bool value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.email)
}

// bool hostname = 13;
inline bool StringRules::_internal_has_hostname() const {
  return well_known_case() == kHostname;
}
inline bool StringRules::has_hostname() const {
  return _internal_has_hostname();
}
inline void StringRules::set_has_hostname() {
  _oneof_case_[0] = kHostname;
}
inline void StringRules::clear_hostname() {
  if (_internal_has_hostname()) {
    well_known_.hostname_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_hostname() const {
  if (_internal_has_hostname()) {
    return well_known_.hostname_;
  }
  return false;
}
inline void StringRules::_internal_set_hostname(bool value) {
  if (!_internal_has_hostname()) {
    clear_well_known();
    set_has_hostname();
  }
  well_known_.hostname_ = value;
}
inline bool StringRules::hostname() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.hostname)
  return _internal_hostname();
}
inline void StringRules::set_hostname(bool value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.hostname)
}

// bool ip = 14;
inline bool StringRules::_internal_has_ip() const {
  return well_known_case() == kIp;
}
inline bool StringRules::has_ip() const {
  return _internal_has_ip();
}
inline void StringRules::set_has_ip() {
  _oneof_case_[0] = kIp;
}
inline void StringRules::clear_ip() {
  if (_internal_has_ip()) {
    well_known_.ip_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ip() const {
  if (_internal_has_ip()) {
    return well_known_.ip_;
  }
  return false;
}
inline void StringRules::_internal_set_ip(bool value) {
  if (!_internal_has_ip()) {
    clear_well_known();
    set_has_ip();
  }
  well_known_.ip_ = value;
}
inline bool StringRules::ip() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.ip)
  return _internal_ip();
}
inline void StringRules::set_ip(bool value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.ip)
}

// bool ipv4 = 15;
inline bool StringRules::_internal_has_ipv4() const {
  return well_known_case() == kIpv4;
}
inline bool StringRules::has_ipv4() const {
  return _internal_has_ipv4();
}
inline void StringRules::set_has_ipv4() {
  _oneof_case_[0] = kIpv4;
}
inline void StringRules::clear_ipv4() {
  if (_internal_has_ipv4()) {
    well_known_.ipv4_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ipv4() const {
  if (_internal_has_ipv4()) {
    return well_known_.ipv4_;
  }
  return false;
}
inline void StringRules::_internal_set_ipv4(bool value) {
  if (!_internal_has_ipv4()) {
    clear_well_known();
    set_has_ipv4();
  }
  well_known_.ipv4_ = value;
}
inline bool StringRules::ipv4() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.ipv4)
  return _internal_ipv4();
}
inline void StringRules::set_ipv4(bool value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.ipv4)
}

// bool ipv6 = 16;
inline bool StringRules::_internal_has_ipv6() const {
  return well_known_case() == kIpv6;
}
inline bool StringRules::has_ipv6() const {
  return _internal_has_ipv6();
}
inline void StringRules::set_has_ipv6() {
  _oneof_case_[0] = kIpv6;
}
inline void StringRules::clear_ipv6() {
  if (_internal_has_ipv6()) {
    well_known_.ipv6_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ipv6() const {
  if (_internal_has_ipv6()) {
    return well_known_.ipv6_;
  }
  return false;
}
inline void StringRules::_internal_set_ipv6(bool value) {
  if (!_internal_has_ipv6()) {
    clear_well_known();
    set_has_ipv6();
  }
  well_known_.ipv6_ = value;
}
inline bool StringRules::ipv6() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.ipv6)
  return _internal_ipv6();
}
inline void StringRules::set_ipv6(bool value) {
  _internal_set_ipv6(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.ipv6)
}

// bool uri = 17;
inline bool StringRules::_internal_has_uri() const {
  return well_known_case() == kUri;
}
inline bool StringRules::has_uri() const {
  return _internal_has_uri();
}
inline void StringRules::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void StringRules::clear_uri() {
  if (_internal_has_uri()) {
    well_known_.uri_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_uri() const {
  if (_internal_has_uri()) {
    return well_known_.uri_;
  }
  return false;
}
inline void StringRules::_internal_set_uri(bool value) {
  if (!_internal_has_uri()) {
    clear_well_known();
    set_has_uri();
  }
  well_known_.uri_ = value;
}
inline bool StringRules::uri() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.uri)
  return _internal_uri();
}
inline void StringRules::set_uri(bool value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.uri)
}

// bool uri_ref = 18;
inline bool StringRules::_internal_has_uri_ref() const {
  return well_known_case() == kUriRef;
}
inline bool StringRules::has_uri_ref() const {
  return _internal_has_uri_ref();
}
inline void StringRules::set_has_uri_ref() {
  _oneof_case_[0] = kUriRef;
}
inline void StringRules::clear_uri_ref() {
  if (_internal_has_uri_ref()) {
    well_known_.uri_ref_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_uri_ref() const {
  if (_internal_has_uri_ref()) {
    return well_known_.uri_ref_;
  }
  return false;
}
inline void StringRules::_internal_set_uri_ref(bool value) {
  if (!_internal_has_uri_ref()) {
    clear_well_known();
    set_has_uri_ref();
  }
  well_known_.uri_ref_ = value;
}
inline bool StringRules::uri_ref() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.uri_ref)
  return _internal_uri_ref();
}
inline void StringRules::set_uri_ref(bool value) {
  _internal_set_uri_ref(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.uri_ref)
}

// bool address = 21;
inline bool StringRules::_internal_has_address() const {
  return well_known_case() == kAddress;
}
inline bool StringRules::has_address() const {
  return _internal_has_address();
}
inline void StringRules::set_has_address() {
  _oneof_case_[0] = kAddress;
}
inline void StringRules::clear_address() {
  if (_internal_has_address()) {
    well_known_.address_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_address() const {
  if (_internal_has_address()) {
    return well_known_.address_;
  }
  return false;
}
inline void StringRules::_internal_set_address(bool value) {
  if (!_internal_has_address()) {
    clear_well_known();
    set_has_address();
  }
  well_known_.address_ = value;
}
inline bool StringRules::address() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.address)
  return _internal_address();
}
inline void StringRules::set_address(bool value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.address)
}

// bool uuid = 22;
inline bool StringRules::_internal_has_uuid() const {
  return well_known_case() == kUuid;
}
inline bool StringRules::has_uuid() const {
  return _internal_has_uuid();
}
inline void StringRules::set_has_uuid() {
  _oneof_case_[0] = kUuid;
}
inline void StringRules::clear_uuid() {
  if (_internal_has_uuid()) {
    well_known_.uuid_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_uuid() const {
  if (_internal_has_uuid()) {
    return well_known_.uuid_;
  }
  return false;
}
inline void StringRules::_internal_set_uuid(bool value) {
  if (!_internal_has_uuid()) {
    clear_well_known();
    set_has_uuid();
  }
  well_known_.uuid_ = value;
}
inline bool StringRules::uuid() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.uuid)
  return _internal_uuid();
}
inline void StringRules::set_uuid(bool value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.uuid)
}

// .validate.KnownRegex well_known_regex = 24;
inline bool StringRules::_internal_has_well_known_regex() const {
  return well_known_case() == kWellKnownRegex;
}
inline bool StringRules::has_well_known_regex() const {
  return _internal_has_well_known_regex();
}
inline void StringRules::set_has_well_known_regex() {
  _oneof_case_[0] = kWellKnownRegex;
}
inline void StringRules::clear_well_known_regex() {
  if (_internal_has_well_known_regex()) {
    well_known_.well_known_regex_ = 0;
    clear_has_well_known();
  }
}
inline ::validate::KnownRegex StringRules::_internal_well_known_regex() const {
  if (_internal_has_well_known_regex()) {
    return static_cast< ::validate::KnownRegex >(well_known_.well_known_regex_);
  }
  return static_cast< ::validate::KnownRegex >(0);
}
inline ::validate::KnownRegex StringRules::well_known_regex() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.well_known_regex)
  return _internal_well_known_regex();
}
inline void StringRules::_internal_set_well_known_regex(::validate::KnownRegex value) {
  assert(::validate::KnownRegex_IsValid(value));
  if (!_internal_has_well_known_regex()) {
    clear_well_known();
    set_has_well_known_regex();
  }
  well_known_.well_known_regex_ = value;
}
inline void StringRules::set_well_known_regex(::validate::KnownRegex value) {
  _internal_set_well_known_regex(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.well_known_regex)
}

// optional bool strict = 25 [default = true];
inline bool StringRules::_internal_has_strict() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool StringRules::has_strict() const {
  return _internal_has_strict();
}
inline void StringRules::clear_strict() {
  strict_ = true;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool StringRules::_internal_strict() const {
  return strict_;
}
inline bool StringRules::strict() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.strict)
  return _internal_strict();
}
inline void StringRules::_internal_set_strict(bool value) {
  _has_bits_[0] |= 0x00001000u;
  strict_ = value;
}
inline void StringRules::set_strict(bool value) {
  _internal_set_strict(value);
  // @@protoc_insertion_point(field_set:validate.StringRules.strict)
}

inline bool StringRules::has_well_known() const {
  return well_known_case() != WELL_KNOWN_NOT_SET;
}
inline void StringRules::clear_has_well_known() {
  _oneof_case_[0] = WELL_KNOWN_NOT_SET;
}
inline StringRules::WellKnownCase StringRules::well_known_case() const {
  return StringRules::WellKnownCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BytesRules

// optional bytes const = 1;
inline bool BytesRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BytesRules::has_const_() const {
  return _internal_has_const_();
}
inline void BytesRules::clear_const_() {
  const__.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BytesRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.const)
  return _internal_const_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BytesRules::set_const_(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 const__.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:validate.BytesRules.const)
}
inline std::string* BytesRules::mutable_const_() {
  std::string* _s = _internal_mutable_const_();
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.const)
  return _s;
}
inline const std::string& BytesRules::_internal_const_() const {
  return const__.Get();
}
inline void BytesRules::_internal_set_const_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  const__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BytesRules::_internal_mutable_const_() {
  _has_bits_[0] |= 0x00000001u;
  return const__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BytesRules::release_const_() {
  // @@protoc_insertion_point(field_release:validate.BytesRules.const)
  if (!_internal_has_const_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return const__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BytesRules::set_allocated_const_(std::string* const_) {
  if (const_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  const__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), const_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:validate.BytesRules.const)
}

// optional uint64 len = 13;
inline bool BytesRules::_internal_has_len() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BytesRules::has_len() const {
  return _internal_has_len();
}
inline void BytesRules::clear_len() {
  len_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::len() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.len)
  return _internal_len();
}
inline void BytesRules::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  len_ = value;
}
inline void BytesRules::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.len)
}

// optional uint64 min_len = 2;
inline bool BytesRules::_internal_has_min_len() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BytesRules::has_min_len() const {
  return _internal_has_min_len();
}
inline void BytesRules::clear_min_len() {
  min_len_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::_internal_min_len() const {
  return min_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::min_len() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.min_len)
  return _internal_min_len();
}
inline void BytesRules::_internal_set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  min_len_ = value;
}
inline void BytesRules::set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_len(value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.min_len)
}

// optional uint64 max_len = 3;
inline bool BytesRules::_internal_has_max_len() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BytesRules::has_max_len() const {
  return _internal_has_max_len();
}
inline void BytesRules::clear_max_len() {
  max_len_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::_internal_max_len() const {
  return max_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::max_len() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.max_len)
  return _internal_max_len();
}
inline void BytesRules::_internal_set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  max_len_ = value;
}
inline void BytesRules::set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_len(value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.max_len)
}

// optional string pattern = 4;
inline bool BytesRules::_internal_has_pattern() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BytesRules::has_pattern() const {
  return _internal_has_pattern();
}
inline void BytesRules::clear_pattern() {
  pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BytesRules::pattern() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.pattern)
  return _internal_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BytesRules::set_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:validate.BytesRules.pattern)
}
inline std::string* BytesRules::mutable_pattern() {
  std::string* _s = _internal_mutable_pattern();
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.pattern)
  return _s;
}
inline const std::string& BytesRules::_internal_pattern() const {
  return pattern_.Get();
}
inline void BytesRules::_internal_set_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BytesRules::_internal_mutable_pattern() {
  _has_bits_[0] |= 0x00000002u;
  return pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BytesRules::release_pattern() {
  // @@protoc_insertion_point(field_release:validate.BytesRules.pattern)
  if (!_internal_has_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BytesRules::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:validate.BytesRules.pattern)
}

// optional bytes prefix = 5;
inline bool BytesRules::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BytesRules::has_prefix() const {
  return _internal_has_prefix();
}
inline void BytesRules::clear_prefix() {
  prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BytesRules::prefix() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BytesRules::set_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 prefix_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:validate.BytesRules.prefix)
}
inline std::string* BytesRules::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.prefix)
  return _s;
}
inline const std::string& BytesRules::_internal_prefix() const {
  return prefix_.Get();
}
inline void BytesRules::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BytesRules::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000004u;
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BytesRules::release_prefix() {
  // @@protoc_insertion_point(field_release:validate.BytesRules.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BytesRules::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:validate.BytesRules.prefix)
}

// optional bytes suffix = 6;
inline bool BytesRules::_internal_has_suffix() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BytesRules::has_suffix() const {
  return _internal_has_suffix();
}
inline void BytesRules::clear_suffix() {
  suffix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BytesRules::suffix() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.suffix)
  return _internal_suffix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BytesRules::set_suffix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 suffix_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:validate.BytesRules.suffix)
}
inline std::string* BytesRules::mutable_suffix() {
  std::string* _s = _internal_mutable_suffix();
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.suffix)
  return _s;
}
inline const std::string& BytesRules::_internal_suffix() const {
  return suffix_.Get();
}
inline void BytesRules::_internal_set_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BytesRules::_internal_mutable_suffix() {
  _has_bits_[0] |= 0x00000008u;
  return suffix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BytesRules::release_suffix() {
  // @@protoc_insertion_point(field_release:validate.BytesRules.suffix)
  if (!_internal_has_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return suffix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BytesRules::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:validate.BytesRules.suffix)
}

// optional bytes contains = 7;
inline bool BytesRules::_internal_has_contains() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BytesRules::has_contains() const {
  return _internal_has_contains();
}
inline void BytesRules::clear_contains() {
  contains_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& BytesRules::contains() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.contains)
  return _internal_contains();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BytesRules::set_contains(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 contains_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:validate.BytesRules.contains)
}
inline std::string* BytesRules::mutable_contains() {
  std::string* _s = _internal_mutable_contains();
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.contains)
  return _s;
}
inline const std::string& BytesRules::_internal_contains() const {
  return contains_.Get();
}
inline void BytesRules::_internal_set_contains(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  contains_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BytesRules::_internal_mutable_contains() {
  _has_bits_[0] |= 0x00000010u;
  return contains_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BytesRules::release_contains() {
  // @@protoc_insertion_point(field_release:validate.BytesRules.contains)
  if (!_internal_has_contains()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return contains_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BytesRules::set_allocated_contains(std::string* contains) {
  if (contains != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  contains_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contains,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:validate.BytesRules.contains)
}

// repeated bytes in = 8;
inline int BytesRules::_internal_in_size() const {
  return in_.size();
}
inline int BytesRules::in_size() const {
  return _internal_in_size();
}
inline void BytesRules::clear_in() {
  in_.Clear();
}
inline std::string* BytesRules::add_in() {
  std::string* _s = _internal_add_in();
  // @@protoc_insertion_point(field_add_mutable:validate.BytesRules.in)
  return _s;
}
inline const std::string& BytesRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline const std::string& BytesRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.in)
  return _internal_in(index);
}
inline std::string* BytesRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.in)
  return in_.Mutable(index);
}
inline void BytesRules::set_in(int index, const std::string& value) {
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.in)
}
inline void BytesRules::set_in(int index, std::string&& value) {
  in_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:validate.BytesRules.in)
}
inline void BytesRules::set_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.BytesRules.in)
}
inline void BytesRules::set_in(int index, const void* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.BytesRules.in)
}
inline std::string* BytesRules::_internal_add_in() {
  return in_.Add();
}
inline void BytesRules::add_in(const std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.BytesRules.in)
}
inline void BytesRules::add_in(std::string&& value) {
  in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.BytesRules.in)
}
inline void BytesRules::add_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.BytesRules.in)
}
inline void BytesRules::add_in(const void* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.BytesRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BytesRules::in() const {
  // @@protoc_insertion_point(field_list:validate.BytesRules.in)
  return in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BytesRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.BytesRules.in)
  return &in_;
}

// repeated bytes not_in = 9;
inline int BytesRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int BytesRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void BytesRules::clear_not_in() {
  not_in_.Clear();
}
inline std::string* BytesRules::add_not_in() {
  std::string* _s = _internal_add_not_in();
  // @@protoc_insertion_point(field_add_mutable:validate.BytesRules.not_in)
  return _s;
}
inline const std::string& BytesRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline const std::string& BytesRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.not_in)
  return _internal_not_in(index);
}
inline std::string* BytesRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.not_in)
  return not_in_.Mutable(index);
}
inline void BytesRules::set_not_in(int index, const std::string& value) {
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.not_in)
}
inline void BytesRules::set_not_in(int index, std::string&& value) {
  not_in_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:validate.BytesRules.not_in)
}
inline void BytesRules::set_not_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.BytesRules.not_in)
}
inline void BytesRules::set_not_in(int index, const void* value, size_t size) {
  not_in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.BytesRules.not_in)
}
inline std::string* BytesRules::_internal_add_not_in() {
  return not_in_.Add();
}
inline void BytesRules::add_not_in(const std::string& value) {
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.BytesRules.not_in)
}
inline void BytesRules::add_not_in(std::string&& value) {
  not_in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.BytesRules.not_in)
}
inline void BytesRules::add_not_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.BytesRules.not_in)
}
inline void BytesRules::add_not_in(const void* value, size_t size) {
  not_in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.BytesRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BytesRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.BytesRules.not_in)
  return not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BytesRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.BytesRules.not_in)
  return &not_in_;
}

// bool ip = 10;
inline bool BytesRules::_internal_has_ip() const {
  return well_known_case() == kIp;
}
inline bool BytesRules::has_ip() const {
  return _internal_has_ip();
}
inline void BytesRules::set_has_ip() {
  _oneof_case_[0] = kIp;
}
inline void BytesRules::clear_ip() {
  if (_internal_has_ip()) {
    well_known_.ip_ = false;
    clear_has_well_known();
  }
}
inline bool BytesRules::_internal_ip() const {
  if (_internal_has_ip()) {
    return well_known_.ip_;
  }
  return false;
}
inline void BytesRules::_internal_set_ip(bool value) {
  if (!_internal_has_ip()) {
    clear_well_known();
    set_has_ip();
  }
  well_known_.ip_ = value;
}
inline bool BytesRules::ip() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.ip)
  return _internal_ip();
}
inline void BytesRules::set_ip(bool value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.ip)
}

// bool ipv4 = 11;
inline bool BytesRules::_internal_has_ipv4() const {
  return well_known_case() == kIpv4;
}
inline bool BytesRules::has_ipv4() const {
  return _internal_has_ipv4();
}
inline void BytesRules::set_has_ipv4() {
  _oneof_case_[0] = kIpv4;
}
inline void BytesRules::clear_ipv4() {
  if (_internal_has_ipv4()) {
    well_known_.ipv4_ = false;
    clear_has_well_known();
  }
}
inline bool BytesRules::_internal_ipv4() const {
  if (_internal_has_ipv4()) {
    return well_known_.ipv4_;
  }
  return false;
}
inline void BytesRules::_internal_set_ipv4(bool value) {
  if (!_internal_has_ipv4()) {
    clear_well_known();
    set_has_ipv4();
  }
  well_known_.ipv4_ = value;
}
inline bool BytesRules::ipv4() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.ipv4)
  return _internal_ipv4();
}
inline void BytesRules::set_ipv4(bool value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.ipv4)
}

// bool ipv6 = 12;
inline bool BytesRules::_internal_has_ipv6() const {
  return well_known_case() == kIpv6;
}
inline bool BytesRules::has_ipv6() const {
  return _internal_has_ipv6();
}
inline void BytesRules::set_has_ipv6() {
  _oneof_case_[0] = kIpv6;
}
inline void BytesRules::clear_ipv6() {
  if (_internal_has_ipv6()) {
    well_known_.ipv6_ = false;
    clear_has_well_known();
  }
}
inline bool BytesRules::_internal_ipv6() const {
  if (_internal_has_ipv6()) {
    return well_known_.ipv6_;
  }
  return false;
}
inline void BytesRules::_internal_set_ipv6(bool value) {
  if (!_internal_has_ipv6()) {
    clear_well_known();
    set_has_ipv6();
  }
  well_known_.ipv6_ = value;
}
inline bool BytesRules::ipv6() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.ipv6)
  return _internal_ipv6();
}
inline void BytesRules::set_ipv6(bool value) {
  _internal_set_ipv6(value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.ipv6)
}

inline bool BytesRules::has_well_known() const {
  return well_known_case() != WELL_KNOWN_NOT_SET;
}
inline void BytesRules::clear_has_well_known() {
  _oneof_case_[0] = WELL_KNOWN_NOT_SET;
}
inline BytesRules::WellKnownCase BytesRules::well_known_case() const {
  return BytesRules::WellKnownCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EnumRules

// optional int32 const = 1;
inline bool EnumRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EnumRules::has_const_() const {
  return _internal_has_const_();
}
inline void EnumRules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.EnumRules.const)
  return _internal_const_();
}
inline void EnumRules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void EnumRules::set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:validate.EnumRules.const)
}

// optional bool defined_only = 2;
inline bool EnumRules::_internal_has_defined_only() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EnumRules::has_defined_only() const {
  return _internal_has_defined_only();
}
inline void EnumRules::clear_defined_only() {
  defined_only_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool EnumRules::_internal_defined_only() const {
  return defined_only_;
}
inline bool EnumRules::defined_only() const {
  // @@protoc_insertion_point(field_get:validate.EnumRules.defined_only)
  return _internal_defined_only();
}
inline void EnumRules::_internal_set_defined_only(bool value) {
  _has_bits_[0] |= 0x00000002u;
  defined_only_ = value;
}
inline void EnumRules::set_defined_only(bool value) {
  _internal_set_defined_only(value);
  // @@protoc_insertion_point(field_set:validate.EnumRules.defined_only)
}

// repeated int32 in = 3;
inline int EnumRules::_internal_in_size() const {
  return in_.size();
}
inline int EnumRules::in_size() const {
  return _internal_in_size();
}
inline void EnumRules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.EnumRules.in)
  return _internal_in(index);
}
inline void EnumRules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.EnumRules.in)
}
inline void EnumRules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Add(value);
}
inline void EnumRules::add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:validate.EnumRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnumRules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnumRules::in() const {
  // @@protoc_insertion_point(field_list:validate.EnumRules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnumRules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnumRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.EnumRules.in)
  return _internal_mutable_in();
}

// repeated int32 not_in = 4;
inline int EnumRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int EnumRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void EnumRules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.EnumRules.not_in)
  return _internal_not_in(index);
}
inline void EnumRules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.EnumRules.not_in)
}
inline void EnumRules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Add(value);
}
inline void EnumRules::add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:validate.EnumRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnumRules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnumRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.EnumRules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnumRules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnumRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.EnumRules.not_in)
  return _internal_mutable_not_in();
}

// -------------------------------------------------------------------

// MessageRules

// optional bool skip = 1;
inline bool MessageRules::_internal_has_skip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageRules::has_skip() const {
  return _internal_has_skip();
}
inline void MessageRules::clear_skip() {
  skip_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MessageRules::_internal_skip() const {
  return skip_;
}
inline bool MessageRules::skip() const {
  // @@protoc_insertion_point(field_get:validate.MessageRules.skip)
  return _internal_skip();
}
inline void MessageRules::_internal_set_skip(bool value) {
  _has_bits_[0] |= 0x00000001u;
  skip_ = value;
}
inline void MessageRules::set_skip(bool value) {
  _internal_set_skip(value);
  // @@protoc_insertion_point(field_set:validate.MessageRules.skip)
}

// optional bool required = 2;
inline bool MessageRules::_internal_has_required() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MessageRules::has_required() const {
  return _internal_has_required();
}
inline void MessageRules::clear_required() {
  required_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MessageRules::_internal_required() const {
  return required_;
}
inline bool MessageRules::required() const {
  // @@protoc_insertion_point(field_get:validate.MessageRules.required)
  return _internal_required();
}
inline void MessageRules::_internal_set_required(bool value) {
  _has_bits_[0] |= 0x00000002u;
  required_ = value;
}
inline void MessageRules::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:validate.MessageRules.required)
}

// -------------------------------------------------------------------

// RepeatedRules

// optional uint64 min_items = 1;
inline bool RepeatedRules::_internal_has_min_items() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RepeatedRules::has_min_items() const {
  return _internal_has_min_items();
}
inline void RepeatedRules::clear_min_items() {
  min_items_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RepeatedRules::_internal_min_items() const {
  return min_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RepeatedRules::min_items() const {
  // @@protoc_insertion_point(field_get:validate.RepeatedRules.min_items)
  return _internal_min_items();
}
inline void RepeatedRules::_internal_set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  min_items_ = value;
}
inline void RepeatedRules::set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_items(value);
  // @@protoc_insertion_point(field_set:validate.RepeatedRules.min_items)
}

// optional uint64 max_items = 2;
inline bool RepeatedRules::_internal_has_max_items() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RepeatedRules::has_max_items() const {
  return _internal_has_max_items();
}
inline void RepeatedRules::clear_max_items() {
  max_items_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RepeatedRules::_internal_max_items() const {
  return max_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RepeatedRules::max_items() const {
  // @@protoc_insertion_point(field_get:validate.RepeatedRules.max_items)
  return _internal_max_items();
}
inline void RepeatedRules::_internal_set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  max_items_ = value;
}
inline void RepeatedRules::set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_items(value);
  // @@protoc_insertion_point(field_set:validate.RepeatedRules.max_items)
}

// optional bool unique = 3;
inline bool RepeatedRules::_internal_has_unique() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RepeatedRules::has_unique() const {
  return _internal_has_unique();
}
inline void RepeatedRules::clear_unique() {
  unique_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool RepeatedRules::_internal_unique() const {
  return unique_;
}
inline bool RepeatedRules::unique() const {
  // @@protoc_insertion_point(field_get:validate.RepeatedRules.unique)
  return _internal_unique();
}
inline void RepeatedRules::_internal_set_unique(bool value) {
  _has_bits_[0] |= 0x00000008u;
  unique_ = value;
}
inline void RepeatedRules::set_unique(bool value) {
  _internal_set_unique(value);
  // @@protoc_insertion_point(field_set:validate.RepeatedRules.unique)
}

// optional .validate.FieldRules items = 4;
inline bool RepeatedRules::_internal_has_items() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || items_ != nullptr);
  return value;
}
inline bool RepeatedRules::has_items() const {
  return _internal_has_items();
}
inline void RepeatedRules::clear_items() {
  if (items_ != nullptr) items_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::validate::FieldRules& RepeatedRules::_internal_items() const {
  const ::validate::FieldRules* p = items_;
  return p != nullptr ? *p : reinterpret_cast<const ::validate::FieldRules&>(
      ::validate::_FieldRules_default_instance_);
}
inline const ::validate::FieldRules& RepeatedRules::items() const {
  // @@protoc_insertion_point(field_get:validate.RepeatedRules.items)
  return _internal_items();
}
inline void RepeatedRules::unsafe_arena_set_allocated_items(
    ::validate::FieldRules* items) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(items_);
  }
  items_ = items;
  if (items) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.RepeatedRules.items)
}
inline ::validate::FieldRules* RepeatedRules::release_items() {
  _has_bits_[0] &= ~0x00000001u;
  ::validate::FieldRules* temp = items_;
  items_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::validate::FieldRules* RepeatedRules::unsafe_arena_release_items() {
  // @@protoc_insertion_point(field_release:validate.RepeatedRules.items)
  _has_bits_[0] &= ~0x00000001u;
  ::validate::FieldRules* temp = items_;
  items_ = nullptr;
  return temp;
}
inline ::validate::FieldRules* RepeatedRules::_internal_mutable_items() {
  _has_bits_[0] |= 0x00000001u;
  if (items_ == nullptr) {
    auto* p = CreateMaybeMessage<::validate::FieldRules>(GetArenaForAllocation());
    items_ = p;
  }
  return items_;
}
inline ::validate::FieldRules* RepeatedRules::mutable_items() {
  ::validate::FieldRules* _msg = _internal_mutable_items();
  // @@protoc_insertion_point(field_mutable:validate.RepeatedRules.items)
  return _msg;
}
inline void RepeatedRules::set_allocated_items(::validate::FieldRules* items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete items_;
  }
  if (items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::validate::FieldRules>::GetOwningArena(items);
    if (message_arena != submessage_arena) {
      items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, items, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  items_ = items;
  // @@protoc_insertion_point(field_set_allocated:validate.RepeatedRules.items)
}

// -------------------------------------------------------------------

// MapRules

// optional uint64 min_pairs = 1;
inline bool MapRules::_internal_has_min_pairs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MapRules::has_min_pairs() const {
  return _internal_has_min_pairs();
}
inline void MapRules::clear_min_pairs() {
  min_pairs_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapRules::_internal_min_pairs() const {
  return min_pairs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapRules::min_pairs() const {
  // @@protoc_insertion_point(field_get:validate.MapRules.min_pairs)
  return _internal_min_pairs();
}
inline void MapRules::_internal_set_min_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  min_pairs_ = value;
}
inline void MapRules::set_min_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_pairs(value);
  // @@protoc_insertion_point(field_set:validate.MapRules.min_pairs)
}

// optional uint64 max_pairs = 2;
inline bool MapRules::_internal_has_max_pairs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MapRules::has_max_pairs() const {
  return _internal_has_max_pairs();
}
inline void MapRules::clear_max_pairs() {
  max_pairs_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapRules::_internal_max_pairs() const {
  return max_pairs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapRules::max_pairs() const {
  // @@protoc_insertion_point(field_get:validate.MapRules.max_pairs)
  return _internal_max_pairs();
}
inline void MapRules::_internal_set_max_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  max_pairs_ = value;
}
inline void MapRules::set_max_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_pairs(value);
  // @@protoc_insertion_point(field_set:validate.MapRules.max_pairs)
}

// optional bool no_sparse = 3;
inline bool MapRules::_internal_has_no_sparse() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MapRules::has_no_sparse() const {
  return _internal_has_no_sparse();
}
inline void MapRules::clear_no_sparse() {
  no_sparse_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool MapRules::_internal_no_sparse() const {
  return no_sparse_;
}
inline bool MapRules::no_sparse() const {
  // @@protoc_insertion_point(field_get:validate.MapRules.no_sparse)
  return _internal_no_sparse();
}
inline void MapRules::_internal_set_no_sparse(bool value) {
  _has_bits_[0] |= 0x00000010u;
  no_sparse_ = value;
}
inline void MapRules::set_no_sparse(bool value) {
  _internal_set_no_sparse(value);
  // @@protoc_insertion_point(field_set:validate.MapRules.no_sparse)
}

// optional .validate.FieldRules keys = 4;
inline bool MapRules::_internal_has_keys() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || keys_ != nullptr);
  return value;
}
inline bool MapRules::has_keys() const {
  return _internal_has_keys();
}
inline void MapRules::clear_keys() {
  if (keys_ != nullptr) keys_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::validate::FieldRules& MapRules::_internal_keys() const {
  const ::validate::FieldRules* p = keys_;
  return p != nullptr ? *p : reinterpret_cast<const ::validate::FieldRules&>(
      ::validate::_FieldRules_default_instance_);
}
inline const ::validate::FieldRules& MapRules::keys() const {
  // @@protoc_insertion_point(field_get:validate.MapRules.keys)
  return _internal_keys();
}
inline void MapRules::unsafe_arena_set_allocated_keys(
    ::validate::FieldRules* keys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keys_);
  }
  keys_ = keys;
  if (keys) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.MapRules.keys)
}
inline ::validate::FieldRules* MapRules::release_keys() {
  _has_bits_[0] &= ~0x00000001u;
  ::validate::FieldRules* temp = keys_;
  keys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::validate::FieldRules* MapRules::unsafe_arena_release_keys() {
  // @@protoc_insertion_point(field_release:validate.MapRules.keys)
  _has_bits_[0] &= ~0x00000001u;
  ::validate::FieldRules* temp = keys_;
  keys_ = nullptr;
  return temp;
}
inline ::validate::FieldRules* MapRules::_internal_mutable_keys() {
  _has_bits_[0] |= 0x00000001u;
  if (keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::validate::FieldRules>(GetArenaForAllocation());
    keys_ = p;
  }
  return keys_;
}
inline ::validate::FieldRules* MapRules::mutable_keys() {
  ::validate::FieldRules* _msg = _internal_mutable_keys();
  // @@protoc_insertion_point(field_mutable:validate.MapRules.keys)
  return _msg;
}
inline void MapRules::set_allocated_keys(::validate::FieldRules* keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete keys_;
  }
  if (keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::validate::FieldRules>::GetOwningArena(keys);
    if (message_arena != submessage_arena) {
      keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keys, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keys_ = keys;
  // @@protoc_insertion_point(field_set_allocated:validate.MapRules.keys)
}

// optional .validate.FieldRules values = 5;
inline bool MapRules::_internal_has_values() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || values_ != nullptr);
  return value;
}
inline bool MapRules::has_values() const {
  return _internal_has_values();
}
inline void MapRules::clear_values() {
  if (values_ != nullptr) values_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::validate::FieldRules& MapRules::_internal_values() const {
  const ::validate::FieldRules* p = values_;
  return p != nullptr ? *p : reinterpret_cast<const ::validate::FieldRules&>(
      ::validate::_FieldRules_default_instance_);
}
inline const ::validate::FieldRules& MapRules::values() const {
  // @@protoc_insertion_point(field_get:validate.MapRules.values)
  return _internal_values();
}
inline void MapRules::unsafe_arena_set_allocated_values(
    ::validate::FieldRules* values) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(values_);
  }
  values_ = values;
  if (values) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.MapRules.values)
}
inline ::validate::FieldRules* MapRules::release_values() {
  _has_bits_[0] &= ~0x00000002u;
  ::validate::FieldRules* temp = values_;
  values_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::validate::FieldRules* MapRules::unsafe_arena_release_values() {
  // @@protoc_insertion_point(field_release:validate.MapRules.values)
  _has_bits_[0] &= ~0x00000002u;
  ::validate::FieldRules* temp = values_;
  values_ = nullptr;
  return temp;
}
inline ::validate::FieldRules* MapRules::_internal_mutable_values() {
  _has_bits_[0] |= 0x00000002u;
  if (values_ == nullptr) {
    auto* p = CreateMaybeMessage<::validate::FieldRules>(GetArenaForAllocation());
    values_ = p;
  }
  return values_;
}
inline ::validate::FieldRules* MapRules::mutable_values() {
  ::validate::FieldRules* _msg = _internal_mutable_values();
  // @@protoc_insertion_point(field_mutable:validate.MapRules.values)
  return _msg;
}
inline void MapRules::set_allocated_values(::validate::FieldRules* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete values_;
  }
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::validate::FieldRules>::GetOwningArena(values);
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  values_ = values;
  // @@protoc_insertion_point(field_set_allocated:validate.MapRules.values)
}

// -------------------------------------------------------------------

// AnyRules

// optional bool required = 1;
inline bool AnyRules::_internal_has_required() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnyRules::has_required() const {
  return _internal_has_required();
}
inline void AnyRules::clear_required() {
  required_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AnyRules::_internal_required() const {
  return required_;
}
inline bool AnyRules::required() const {
  // @@protoc_insertion_point(field_get:validate.AnyRules.required)
  return _internal_required();
}
inline void AnyRules::_internal_set_required(bool value) {
  _has_bits_[0] |= 0x00000001u;
  required_ = value;
}
inline void AnyRules::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:validate.AnyRules.required)
}

// repeated string in = 2;
inline int AnyRules::_internal_in_size() const {
  return in_.size();
}
inline int AnyRules::in_size() const {
  return _internal_in_size();
}
inline void AnyRules::clear_in() {
  in_.Clear();
}
inline std::string* AnyRules::add_in() {
  std::string* _s = _internal_add_in();
  // @@protoc_insertion_point(field_add_mutable:validate.AnyRules.in)
  return _s;
}
inline const std::string& AnyRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline const std::string& AnyRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.AnyRules.in)
  return _internal_in(index);
}
inline std::string* AnyRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.AnyRules.in)
  return in_.Mutable(index);
}
inline void AnyRules::set_in(int index, const std::string& value) {
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:validate.AnyRules.in)
}
inline void AnyRules::set_in(int index, std::string&& value) {
  in_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:validate.AnyRules.in)
}
inline void AnyRules::set_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.AnyRules.in)
}
inline void AnyRules::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.AnyRules.in)
}
inline std::string* AnyRules::_internal_add_in() {
  return in_.Add();
}
inline void AnyRules::add_in(const std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.AnyRules.in)
}
inline void AnyRules::add_in(std::string&& value) {
  in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.AnyRules.in)
}
inline void AnyRules::add_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.AnyRules.in)
}
inline void AnyRules::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.AnyRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AnyRules::in() const {
  // @@protoc_insertion_point(field_list:validate.AnyRules.in)
  return in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AnyRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.AnyRules.in)
  return &in_;
}

// repeated string not_in = 3;
inline int AnyRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int AnyRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void AnyRules::clear_not_in() {
  not_in_.Clear();
}
inline std::string* AnyRules::add_not_in() {
  std::string* _s = _internal_add_not_in();
  // @@protoc_insertion_point(field_add_mutable:validate.AnyRules.not_in)
  return _s;
}
inline const std::string& AnyRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline const std::string& AnyRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.AnyRules.not_in)
  return _internal_not_in(index);
}
inline std::string* AnyRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.AnyRules.not_in)
  return not_in_.Mutable(index);
}
inline void AnyRules::set_not_in(int index, const std::string& value) {
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:validate.AnyRules.not_in)
}
inline void AnyRules::set_not_in(int index, std::string&& value) {
  not_in_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:validate.AnyRules.not_in)
}
inline void AnyRules::set_not_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.AnyRules.not_in)
}
inline void AnyRules::set_not_in(int index, const char* value, size_t size) {
  not_in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.AnyRules.not_in)
}
inline std::string* AnyRules::_internal_add_not_in() {
  return not_in_.Add();
}
inline void AnyRules::add_not_in(const std::string& value) {
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.AnyRules.not_in)
}
inline void AnyRules::add_not_in(std::string&& value) {
  not_in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.AnyRules.not_in)
}
inline void AnyRules::add_not_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.AnyRules.not_in)
}
inline void AnyRules::add_not_in(const char* value, size_t size) {
  not_in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.AnyRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AnyRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.AnyRules.not_in)
  return not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AnyRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.AnyRules.not_in)
  return &not_in_;
}

// -------------------------------------------------------------------

// DurationRules

// optional bool required = 1;
inline bool DurationRules::_internal_has_required() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DurationRules::has_required() const {
  return _internal_has_required();
}
inline void DurationRules::clear_required() {
  required_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool DurationRules::_internal_required() const {
  return required_;
}
inline bool DurationRules::required() const {
  // @@protoc_insertion_point(field_get:validate.DurationRules.required)
  return _internal_required();
}
inline void DurationRules::_internal_set_required(bool value) {
  _has_bits_[0] |= 0x00000020u;
  required_ = value;
}
inline void DurationRules::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:validate.DurationRules.required)
}

// optional .google.protobuf.Duration const = 2;
inline bool DurationRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || const__ != nullptr);
  return value;
}
inline bool DurationRules::has_const_() const {
  return _internal_has_const_();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_const_() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = const__;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.DurationRules.const)
  return _internal_const_();
}
inline void DurationRules::unsafe_arena_set_allocated_const_(
    ::PROTOBUF_NAMESPACE_ID::Duration* const_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(const__);
  }
  const__ = const_;
  if (const_) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.DurationRules.const)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::release_const_() {
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = const__;
  const__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::unsafe_arena_release_const_() {
  // @@protoc_insertion_point(field_release:validate.DurationRules.const)
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = const__;
  const__ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_mutable_const_() {
  _has_bits_[0] |= 0x00000001u;
  if (const__ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    const__ = p;
  }
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_const_() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_const_();
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.const)
  return _msg;
}
inline void DurationRules::set_allocated_const_(::PROTOBUF_NAMESPACE_ID::Duration* const_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(const__);
  }
  if (const_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(const_));
    if (message_arena != submessage_arena) {
      const_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, const_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  const__ = const_;
  // @@protoc_insertion_point(field_set_allocated:validate.DurationRules.const)
}

// optional .google.protobuf.Duration lt = 3;
inline bool DurationRules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lt_ != nullptr);
  return value;
}
inline bool DurationRules::has_lt() const {
  return _internal_has_lt();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_lt() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = lt_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::lt() const {
  // @@protoc_insertion_point(field_get:validate.DurationRules.lt)
  return _internal_lt();
}
inline void DurationRules::unsafe_arena_set_allocated_lt(
    ::PROTOBUF_NAMESPACE_ID::Duration* lt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lt_);
  }
  lt_ = lt;
  if (lt) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.DurationRules.lt)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::release_lt() {
  _has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = lt_;
  lt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::unsafe_arena_release_lt() {
  // @@protoc_insertion_point(field_release:validate.DurationRules.lt)
  _has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = lt_;
  lt_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_mutable_lt() {
  _has_bits_[0] |= 0x00000002u;
  if (lt_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    lt_ = p;
  }
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_lt() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_lt();
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.lt)
  return _msg;
}
inline void DurationRules::set_allocated_lt(::PROTOBUF_NAMESPACE_ID::Duration* lt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lt_);
  }
  if (lt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lt));
    if (message_arena != submessage_arena) {
      lt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lt_ = lt;
  // @@protoc_insertion_point(field_set_allocated:validate.DurationRules.lt)
}

// optional .google.protobuf.Duration lte = 4;
inline bool DurationRules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || lte_ != nullptr);
  return value;
}
inline bool DurationRules::has_lte() const {
  return _internal_has_lte();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_lte() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = lte_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::lte() const {
  // @@protoc_insertion_point(field_get:validate.DurationRules.lte)
  return _internal_lte();
}
inline void DurationRules::unsafe_arena_set_allocated_lte(
    ::PROTOBUF_NAMESPACE_ID::Duration* lte) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lte_);
  }
  lte_ = lte;
  if (lte) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.DurationRules.lte)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::release_lte() {
  _has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = lte_;
  lte_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::unsafe_arena_release_lte() {
  // @@protoc_insertion_point(field_release:validate.DurationRules.lte)
  _has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = lte_;
  lte_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_mutable_lte() {
  _has_bits_[0] |= 0x00000004u;
  if (lte_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    lte_ = p;
  }
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_lte() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_lte();
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.lte)
  return _msg;
}
inline void DurationRules::set_allocated_lte(::PROTOBUF_NAMESPACE_ID::Duration* lte) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lte_);
  }
  if (lte) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lte));
    if (message_arena != submessage_arena) {
      lte = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lte, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lte_ = lte;
  // @@protoc_insertion_point(field_set_allocated:validate.DurationRules.lte)
}

// optional .google.protobuf.Duration gt = 5;
inline bool DurationRules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || gt_ != nullptr);
  return value;
}
inline bool DurationRules::has_gt() const {
  return _internal_has_gt();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_gt() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = gt_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::gt() const {
  // @@protoc_insertion_point(field_get:validate.DurationRules.gt)
  return _internal_gt();
}
inline void DurationRules::unsafe_arena_set_allocated_gt(
    ::PROTOBUF_NAMESPACE_ID::Duration* gt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gt_);
  }
  gt_ = gt;
  if (gt) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.DurationRules.gt)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::release_gt() {
  _has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = gt_;
  gt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::unsafe_arena_release_gt() {
  // @@protoc_insertion_point(field_release:validate.DurationRules.gt)
  _has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = gt_;
  gt_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_mutable_gt() {
  _has_bits_[0] |= 0x00000008u;
  if (gt_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    gt_ = p;
  }
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_gt() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_gt();
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.gt)
  return _msg;
}
inline void DurationRules::set_allocated_gt(::PROTOBUF_NAMESPACE_ID::Duration* gt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gt_);
  }
  if (gt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gt));
    if (message_arena != submessage_arena) {
      gt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gt_ = gt;
  // @@protoc_insertion_point(field_set_allocated:validate.DurationRules.gt)
}

// optional .google.protobuf.Duration gte = 6;
inline bool DurationRules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || gte_ != nullptr);
  return value;
}
inline bool DurationRules::has_gte() const {
  return _internal_has_gte();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_gte() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = gte_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::gte() const {
  // @@protoc_insertion_point(field_get:validate.DurationRules.gte)
  return _internal_gte();
}
inline void DurationRules::unsafe_arena_set_allocated_gte(
    ::PROTOBUF_NAMESPACE_ID::Duration* gte) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gte_);
  }
  gte_ = gte;
  if (gte) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.DurationRules.gte)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::release_gte() {
  _has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = gte_;
  gte_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::unsafe_arena_release_gte() {
  // @@protoc_insertion_point(field_release:validate.DurationRules.gte)
  _has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = gte_;
  gte_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_mutable_gte() {
  _has_bits_[0] |= 0x00000010u;
  if (gte_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    gte_ = p;
  }
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_gte() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_gte();
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.gte)
  return _msg;
}
inline void DurationRules::set_allocated_gte(::PROTOBUF_NAMESPACE_ID::Duration* gte) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gte_);
  }
  if (gte) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gte));
    if (message_arena != submessage_arena) {
      gte = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gte, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  gte_ = gte;
  // @@protoc_insertion_point(field_set_allocated:validate.DurationRules.gte)
}

// repeated .google.protobuf.Duration in = 7;
inline int DurationRules::_internal_in_size() const {
  return in_.size();
}
inline int DurationRules::in_size() const {
  return _internal_in_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.in)
  return in_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >*
DurationRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.DurationRules.in)
  return &in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.DurationRules.in)
  return _internal_in(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_add_in() {
  return in_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::add_in() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _add = _internal_add_in();
  // @@protoc_insertion_point(field_add:validate.DurationRules.in)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >&
DurationRules::in() const {
  // @@protoc_insertion_point(field_list:validate.DurationRules.in)
  return in_;
}

// repeated .google.protobuf.Duration not_in = 8;
inline int DurationRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int DurationRules::not_in_size() const {
  return _internal_not_in_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.not_in)
  return not_in_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >*
DurationRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.DurationRules.not_in)
  return &not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DurationRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.DurationRules.not_in)
  return _internal_not_in(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_add_not_in() {
  return not_in_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DurationRules::add_not_in() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _add = _internal_add_not_in();
  // @@protoc_insertion_point(field_add:validate.DurationRules.not_in)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >&
DurationRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.DurationRules.not_in)
  return not_in_;
}

// -------------------------------------------------------------------

// TimestampRules

// optional bool required = 1;
inline bool TimestampRules::_internal_has_required() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TimestampRules::has_required() const {
  return _internal_has_required();
}
inline void TimestampRules::clear_required() {
  required_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TimestampRules::_internal_required() const {
  return required_;
}
inline bool TimestampRules::required() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.required)
  return _internal_required();
}
inline void TimestampRules::_internal_set_required(bool value) {
  _has_bits_[0] |= 0x00000040u;
  required_ = value;
}
inline void TimestampRules::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:validate.TimestampRules.required)
}

// optional .google.protobuf.Timestamp const = 2;
inline bool TimestampRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || const__ != nullptr);
  return value;
}
inline bool TimestampRules::has_const_() const {
  return _internal_has_const_();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::_internal_const_() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = const__;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.const)
  return _internal_const_();
}
inline void TimestampRules::unsafe_arena_set_allocated_const_(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* const_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(const__);
  }
  const__ = const_;
  if (const_) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.TimestampRules.const)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::release_const_() {
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = const__;
  const__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::unsafe_arena_release_const_() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.const)
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = const__;
  const__ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::_internal_mutable_const_() {
  _has_bits_[0] |= 0x00000001u;
  if (const__ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    const__ = p;
  }
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::mutable_const_() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_const_();
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.const)
  return _msg;
}
inline void TimestampRules::set_allocated_const_(::PROTOBUF_NAMESPACE_ID::Timestamp* const_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(const__);
  }
  if (const_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(const_));
    if (message_arena != submessage_arena) {
      const_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, const_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  const__ = const_;
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.const)
}

// optional .google.protobuf.Timestamp lt = 3;
inline bool TimestampRules::_internal_has_lt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lt_ != nullptr);
  return value;
}
inline bool TimestampRules::has_lt() const {
  return _internal_has_lt();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::_internal_lt() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = lt_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::lt() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.lt)
  return _internal_lt();
}
inline void TimestampRules::unsafe_arena_set_allocated_lt(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lt_);
  }
  lt_ = lt;
  if (lt) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.TimestampRules.lt)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::release_lt() {
  _has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = lt_;
  lt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::unsafe_arena_release_lt() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.lt)
  _has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = lt_;
  lt_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::_internal_mutable_lt() {
  _has_bits_[0] |= 0x00000002u;
  if (lt_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    lt_ = p;
  }
  return lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::mutable_lt() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_lt();
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.lt)
  return _msg;
}
inline void TimestampRules::set_allocated_lt(::PROTOBUF_NAMESPACE_ID::Timestamp* lt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lt_);
  }
  if (lt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lt));
    if (message_arena != submessage_arena) {
      lt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lt_ = lt;
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.lt)
}

// optional .google.protobuf.Timestamp lte = 4;
inline bool TimestampRules::_internal_has_lte() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || lte_ != nullptr);
  return value;
}
inline bool TimestampRules::has_lte() const {
  return _internal_has_lte();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::_internal_lte() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = lte_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::lte() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.lte)
  return _internal_lte();
}
inline void TimestampRules::unsafe_arena_set_allocated_lte(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lte) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lte_);
  }
  lte_ = lte;
  if (lte) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.TimestampRules.lte)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::release_lte() {
  _has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = lte_;
  lte_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::unsafe_arena_release_lte() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.lte)
  _has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = lte_;
  lte_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::_internal_mutable_lte() {
  _has_bits_[0] |= 0x00000004u;
  if (lte_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    lte_ = p;
  }
  return lte_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::mutable_lte() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_lte();
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.lte)
  return _msg;
}
inline void TimestampRules::set_allocated_lte(::PROTOBUF_NAMESPACE_ID::Timestamp* lte) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lte_);
  }
  if (lte) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lte));
    if (message_arena != submessage_arena) {
      lte = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lte, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lte_ = lte;
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.lte)
}

// optional .google.protobuf.Timestamp gt = 5;
inline bool TimestampRules::_internal_has_gt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || gt_ != nullptr);
  return value;
}
inline bool TimestampRules::has_gt() const {
  return _internal_has_gt();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::_internal_gt() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = gt_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::gt() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.gt)
  return _internal_gt();
}
inline void TimestampRules::unsafe_arena_set_allocated_gt(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* gt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gt_);
  }
  gt_ = gt;
  if (gt) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.TimestampRules.gt)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::release_gt() {
  _has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = gt_;
  gt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::unsafe_arena_release_gt() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.gt)
  _has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = gt_;
  gt_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::_internal_mutable_gt() {
  _has_bits_[0] |= 0x00000008u;
  if (gt_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    gt_ = p;
  }
  return gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::mutable_gt() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_gt();
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.gt)
  return _msg;
}
inline void TimestampRules::set_allocated_gt(::PROTOBUF_NAMESPACE_ID::Timestamp* gt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gt_);
  }
  if (gt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gt));
    if (message_arena != submessage_arena) {
      gt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gt_ = gt;
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.gt)
}

// optional .google.protobuf.Timestamp gte = 6;
inline bool TimestampRules::_internal_has_gte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || gte_ != nullptr);
  return value;
}
inline bool TimestampRules::has_gte() const {
  return _internal_has_gte();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::_internal_gte() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = gte_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::gte() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.gte)
  return _internal_gte();
}
inline void TimestampRules::unsafe_arena_set_allocated_gte(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* gte) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gte_);
  }
  gte_ = gte;
  if (gte) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.TimestampRules.gte)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::release_gte() {
  _has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = gte_;
  gte_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::unsafe_arena_release_gte() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.gte)
  _has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = gte_;
  gte_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::_internal_mutable_gte() {
  _has_bits_[0] |= 0x00000010u;
  if (gte_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    gte_ = p;
  }
  return gte_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::mutable_gte() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_gte();
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.gte)
  return _msg;
}
inline void TimestampRules::set_allocated_gte(::PROTOBUF_NAMESPACE_ID::Timestamp* gte) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gte_);
  }
  if (gte) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gte));
    if (message_arena != submessage_arena) {
      gte = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gte, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  gte_ = gte;
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.gte)
}

// optional bool lt_now = 7;
inline bool TimestampRules::_internal_has_lt_now() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TimestampRules::has_lt_now() const {
  return _internal_has_lt_now();
}
inline void TimestampRules::clear_lt_now() {
  lt_now_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TimestampRules::_internal_lt_now() const {
  return lt_now_;
}
inline bool TimestampRules::lt_now() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.lt_now)
  return _internal_lt_now();
}
inline void TimestampRules::_internal_set_lt_now(bool value) {
  _has_bits_[0] |= 0x00000080u;
  lt_now_ = value;
}
inline void TimestampRules::set_lt_now(bool value) {
  _internal_set_lt_now(value);
  // @@protoc_insertion_point(field_set:validate.TimestampRules.lt_now)
}

// optional bool gt_now = 8;
inline bool TimestampRules::_internal_has_gt_now() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TimestampRules::has_gt_now() const {
  return _internal_has_gt_now();
}
inline void TimestampRules::clear_gt_now() {
  gt_now_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TimestampRules::_internal_gt_now() const {
  return gt_now_;
}
inline bool TimestampRules::gt_now() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.gt_now)
  return _internal_gt_now();
}
inline void TimestampRules::_internal_set_gt_now(bool value) {
  _has_bits_[0] |= 0x00000100u;
  gt_now_ = value;
}
inline void TimestampRules::set_gt_now(bool value) {
  _internal_set_gt_now(value);
  // @@protoc_insertion_point(field_set:validate.TimestampRules.gt_now)
}

// optional .google.protobuf.Duration within = 9;
inline bool TimestampRules::_internal_has_within() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || within_ != nullptr);
  return value;
}
inline bool TimestampRules::has_within() const {
  return _internal_has_within();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TimestampRules::_internal_within() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = within_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TimestampRules::within() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.within)
  return _internal_within();
}
inline void TimestampRules::unsafe_arena_set_allocated_within(
    ::PROTOBUF_NAMESPACE_ID::Duration* within) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(within_);
  }
  within_ = within;
  if (within) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validate.TimestampRules.within)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimestampRules::release_within() {
  _has_bits_[0] &= ~0x00000020u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = within_;
  within_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimestampRules::unsafe_arena_release_within() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.within)
  _has_bits_[0] &= ~0x00000020u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = within_;
  within_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimestampRules::_internal_mutable_within() {
  _has_bits_[0] |= 0x00000020u;
  if (within_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    within_ = p;
  }
  return within_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimestampRules::mutable_within() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_within();
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.within)
  return _msg;
}
inline void TimestampRules::set_allocated_within(::PROTOBUF_NAMESPACE_ID::Duration* within) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(within_);
  }
  if (within) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(within));
    if (message_arena != submessage_arena) {
      within = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, within, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  within_ = within;
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.within)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace validate

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::validate::KnownRegex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::validate::KnownRegex>() {
  return ::validate::KnownRegex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_validate_2fvalidate_2eproto
