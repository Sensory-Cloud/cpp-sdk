// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/event/event.proto

#include "sensorycloud/protoc/v1/event/event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensory {
namespace api {
namespace v1 {
namespace event {
constexpr PublishUsageEventsRequest::PublishUsageEventsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_(){}
struct PublishUsageEventsRequestDefaultTypeInternal {
  constexpr PublishUsageEventsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishUsageEventsRequestDefaultTypeInternal() {}
  union {
    PublishUsageEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishUsageEventsRequestDefaultTypeInternal _PublishUsageEventsRequest_default_instance_;
constexpr UsageEvent::UsageEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clientid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , route_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(nullptr)
  , duration_(int64_t{0})
  , type_(0)
{}
struct UsageEventDefaultTypeInternal {
  constexpr UsageEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UsageEventDefaultTypeInternal() {}
  union {
    UsageEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UsageEventDefaultTypeInternal _UsageEvent_default_instance_;
constexpr PublishUsageEventsResponse::PublishUsageEventsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PublishUsageEventsResponseDefaultTypeInternal {
  constexpr PublishUsageEventsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishUsageEventsResponseDefaultTypeInternal() {}
  union {
    PublishUsageEventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishUsageEventsResponseDefaultTypeInternal _PublishUsageEventsResponse_default_instance_;
}  // namespace event
}  // namespace v1
}  // namespace api
}  // namespace sensory
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_v1_2fevent_2fevent_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_v1_2fevent_2fevent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_v1_2fevent_2fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_v1_2fevent_2fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::event::PublishUsageEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::event::PublishUsageEventsRequest, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::event::UsageEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::event::UsageEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::event::UsageEvent, duration_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::event::UsageEvent, id_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::event::UsageEvent, clientid_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::event::UsageEvent, type_),
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::event::UsageEvent, route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::v1::event::PublishUsageEventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensory::api::v1::event::PublishUsageEventsRequest)},
  { 6, -1, sizeof(::sensory::api::v1::event::UsageEvent)},
  { 17, -1, sizeof(::sensory::api::v1::event::PublishUsageEventsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::event::_PublishUsageEventsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::event::_UsageEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::v1::event::_PublishUsageEventsResponse_default_instance_),
};

const char descriptor_table_protodef_v1_2fevent_2fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024v1/event/event.proto\022\024sensory.api.v1.e"
  "vent\032\037google/protobuf/timestamp.proto\032\027v"
  "alidate/validate.proto\032\023common/common.pr"
  "oto\"M\n\031PublishUsageEventsRequest\0220\n\006even"
  "ts\030\001 \003(\0132 .sensory.api.v1.event.UsageEve"
  "nt\"\352\001\n\nUsageEvent\0227\n\ttimestamp\030\001 \001(\0132\032.g"
  "oogle.protobuf.TimestampB\010\372B\005\262\001\002\010\001\022\031\n\010du"
  "ration\030\002 \001(\003B\007\372B\004\"\002 \000\022\024\n\002id\030\003 \001(\tB\010\372B\005r\003"
  "\260\001\001\022\033\n\010clientId\030\004 \001(\tB\t\372B\006r\004\020\001\030\177\022:\n\004type"
  "\030\005 \001(\0162\".sensory.api.common.UsageEventTy"
  "peB\010\372B\005\202\001\002\020\001\022\031\n\005route\030\006 \001(\tB\n\372B\007r\005\020\001\030\377\003\""
  "\034\n\032PublishUsageEventsResponse2\211\001\n\014EventS"
  "ervice\022y\n\022PublishUsageEvents\022/.sensory.a"
  "pi.v1.event.PublishUsageEventsRequest\0320."
  "sensory.api.v1.event.PublishUsageEventsR"
  "esponse\"\000Bo\n\027io.sensory.api.v1.eventB\026Se"
  "nsoryApiV1EventProtoP\001Z:gitlab.com/senso"
  "ry-cloud/server/titan.git/pkg/api/v1/eve"
  "ntb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_v1_2fevent_2fevent_2eproto_deps[3] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_validate_2fvalidate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_v1_2fevent_2fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fevent_2fevent_2eproto = {
  false, false, 730, descriptor_table_protodef_v1_2fevent_2fevent_2eproto, "v1/event/event.proto", 
  &descriptor_table_v1_2fevent_2fevent_2eproto_once, descriptor_table_v1_2fevent_2fevent_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_v1_2fevent_2fevent_2eproto::offsets,
  file_level_metadata_v1_2fevent_2fevent_2eproto, file_level_enum_descriptors_v1_2fevent_2fevent_2eproto, file_level_service_descriptors_v1_2fevent_2fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_v1_2fevent_2fevent_2eproto_getter() {
  return &descriptor_table_v1_2fevent_2fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_v1_2fevent_2fevent_2eproto(&descriptor_table_v1_2fevent_2fevent_2eproto);
namespace sensory {
namespace api {
namespace v1 {
namespace event {

// ===================================================================

class PublishUsageEventsRequest::_Internal {
 public:
};

PublishUsageEventsRequest::PublishUsageEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.event.PublishUsageEventsRequest)
}
PublishUsageEventsRequest::PublishUsageEventsRequest(const PublishUsageEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.event.PublishUsageEventsRequest)
}

inline void PublishUsageEventsRequest::SharedCtor() {
}

PublishUsageEventsRequest::~PublishUsageEventsRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.event.PublishUsageEventsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishUsageEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishUsageEventsRequest::ArenaDtor(void* object) {
  PublishUsageEventsRequest* _this = reinterpret_cast< PublishUsageEventsRequest* >(object);
  (void)_this;
}
void PublishUsageEventsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishUsageEventsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishUsageEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.event.PublishUsageEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishUsageEventsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensory.api.v1.event.UsageEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishUsageEventsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.event.PublishUsageEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensory.api.v1.event.UsageEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.event.PublishUsageEventsRequest)
  return target;
}

size_t PublishUsageEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.event.PublishUsageEventsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensory.api.v1.event.UsageEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishUsageEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishUsageEventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishUsageEventsRequest::GetClassData() const { return &_class_data_; }

void PublishUsageEventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PublishUsageEventsRequest *>(to)->MergeFrom(
      static_cast<const PublishUsageEventsRequest &>(from));
}


void PublishUsageEventsRequest::MergeFrom(const PublishUsageEventsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.event.PublishUsageEventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishUsageEventsRequest::CopyFrom(const PublishUsageEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.event.PublishUsageEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishUsageEventsRequest::IsInitialized() const {
  return true;
}

void PublishUsageEventsRequest::InternalSwap(PublishUsageEventsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishUsageEventsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fevent_2fevent_2eproto_getter, &descriptor_table_v1_2fevent_2fevent_2eproto_once,
      file_level_metadata_v1_2fevent_2fevent_2eproto[0]);
}

// ===================================================================

class UsageEvent::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const UsageEvent* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
UsageEvent::_Internal::timestamp(const UsageEvent* msg) {
  return *msg->timestamp_;
}
void UsageEvent::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
UsageEvent::UsageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.event.UsageEvent)
}
UsageEvent::UsageEvent(const UsageEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArenaForAllocation());
  }
  route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_route().empty()) {
    route_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_route(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.event.UsageEvent)
}

inline void UsageEvent::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
}

UsageEvent::~UsageEvent() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.event.UsageEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UsageEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void UsageEvent::ArenaDtor(void* object) {
  UsageEvent* _this = reinterpret_cast< UsageEvent* >(object);
  (void)_this;
}
void UsageEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UsageEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UsageEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.event.UsageEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  clientid_.ClearToEmpty();
  route_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsageEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1 [(.validate.rules) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 duration = 2 [(.validate.rules) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3 [(.validate.rules) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.event.UsageEvent.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientId = 4 [(.validate.rules) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.event.UsageEvent.clientId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensory.api.common.UsageEventType type = 5 [(.validate.rules) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sensory::api::common::UsageEventType>(val));
        } else goto handle_unusual;
        continue;
      // string route = 6 [(.validate.rules) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_route();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensory.api.v1.event.UsageEvent.route"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsageEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.event.UsageEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1 [(.validate.rules) = {
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // int64 duration = 2 [(.validate.rules) = {
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_duration(), target);
  }

  // string id = 3 [(.validate.rules) = {
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.event.UsageEvent.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // string clientId = 4 [(.validate.rules) = {
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.event.UsageEvent.clientId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clientid(), target);
  }

  // .sensory.api.common.UsageEventType type = 5 [(.validate.rules) = {
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // string route = 6 [(.validate.rules) = {
  if (!this->_internal_route().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route().data(), static_cast<int>(this->_internal_route().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensory.api.v1.event.UsageEvent.route");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_route(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.event.UsageEvent)
  return target;
}

size_t UsageEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.event.UsageEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 3 [(.validate.rules) = {
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string clientId = 4 [(.validate.rules) = {
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string route = 6 [(.validate.rules) = {
  if (!this->_internal_route().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route());
  }

  // .google.protobuf.Timestamp timestamp = 1 [(.validate.rules) = {
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int64 duration = 2 [(.validate.rules) = {
  if (this->_internal_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_duration());
  }

  // .sensory.api.common.UsageEventType type = 5 [(.validate.rules) = {
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsageEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UsageEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsageEvent::GetClassData() const { return &_class_data_; }

void UsageEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UsageEvent *>(to)->MergeFrom(
      static_cast<const UsageEvent &>(from));
}


void UsageEvent::MergeFrom(const UsageEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.event.UsageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_clientid().empty()) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_route().empty()) {
    _internal_set_route(from._internal_route());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsageEvent::CopyFrom(const UsageEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.event.UsageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsageEvent::IsInitialized() const {
  return true;
}

void UsageEvent::InternalSwap(UsageEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clientid_, GetArenaForAllocation(),
      &other->clientid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &route_, GetArenaForAllocation(),
      &other->route_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UsageEvent, type_)
      + sizeof(UsageEvent::type_)
      - PROTOBUF_FIELD_OFFSET(UsageEvent, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UsageEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fevent_2fevent_2eproto_getter, &descriptor_table_v1_2fevent_2fevent_2eproto_once,
      file_level_metadata_v1_2fevent_2fevent_2eproto[1]);
}

// ===================================================================

class PublishUsageEventsResponse::_Internal {
 public:
};

PublishUsageEventsResponse::PublishUsageEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.v1.event.PublishUsageEventsResponse)
}
PublishUsageEventsResponse::PublishUsageEventsResponse(const PublishUsageEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.v1.event.PublishUsageEventsResponse)
}

inline void PublishUsageEventsResponse::SharedCtor() {
}

PublishUsageEventsResponse::~PublishUsageEventsResponse() {
  // @@protoc_insertion_point(destructor:sensory.api.v1.event.PublishUsageEventsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishUsageEventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishUsageEventsResponse::ArenaDtor(void* object) {
  PublishUsageEventsResponse* _this = reinterpret_cast< PublishUsageEventsResponse* >(object);
  (void)_this;
}
void PublishUsageEventsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishUsageEventsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishUsageEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.v1.event.PublishUsageEventsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishUsageEventsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishUsageEventsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.v1.event.PublishUsageEventsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.v1.event.PublishUsageEventsResponse)
  return target;
}

size_t PublishUsageEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.v1.event.PublishUsageEventsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishUsageEventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishUsageEventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishUsageEventsResponse::GetClassData() const { return &_class_data_; }

void PublishUsageEventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PublishUsageEventsResponse *>(to)->MergeFrom(
      static_cast<const PublishUsageEventsResponse &>(from));
}


void PublishUsageEventsResponse::MergeFrom(const PublishUsageEventsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.v1.event.PublishUsageEventsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishUsageEventsResponse::CopyFrom(const PublishUsageEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.v1.event.PublishUsageEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishUsageEventsResponse::IsInitialized() const {
  return true;
}

void PublishUsageEventsResponse::InternalSwap(PublishUsageEventsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishUsageEventsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fevent_2fevent_2eproto_getter, &descriptor_table_v1_2fevent_2fevent_2eproto_once,
      file_level_metadata_v1_2fevent_2fevent_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace event
}  // namespace v1
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensory::api::v1::event::PublishUsageEventsRequest* Arena::CreateMaybeMessage< ::sensory::api::v1::event::PublishUsageEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::event::PublishUsageEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::event::UsageEvent* Arena::CreateMaybeMessage< ::sensory::api::v1::event::UsageEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::event::UsageEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::sensory::api::v1::event::PublishUsageEventsResponse* Arena::CreateMaybeMessage< ::sensory::api::v1::event::PublishUsageEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::v1::event::PublishUsageEventsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
