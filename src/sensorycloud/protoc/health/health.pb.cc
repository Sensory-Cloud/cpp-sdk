// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: health/health.proto

#include "sensorycloud/protoc/health/health.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensory {
namespace api {
namespace health {
constexpr HealthRequest::HealthRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HealthRequestDefaultTypeInternal {
  constexpr HealthRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HealthRequestDefaultTypeInternal() {}
  union {
    HealthRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HealthRequestDefaultTypeInternal _HealthRequest_default_instance_;
}  // namespace health
}  // namespace api
}  // namespace sensory
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_health_2fhealth_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_health_2fhealth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_health_2fhealth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_health_2fhealth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensory::api::health::HealthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensory::api::health::HealthRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensory::api::health::_HealthRequest_default_instance_),
};

const char descriptor_table_protodef_health_2fhealth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023health/health.proto\022\022sensory.api.healt"
  "h\032\023common/common.proto\"\017\n\rHealthRequest2"
  "k\n\rHealthService\022Z\n\tGetHealth\022!.sensory."
  "api.health.HealthRequest\032(.sensory.api.c"
  "ommon.ServerHealthResponse\"\000Bj\n\025io.senso"
  "ry.api.healthB\025SensoryApiHealthProtoP\001Z8"
  "gitlab.com/sensory-cloud/server/titan.gi"
  "t/pkg/api/healthb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_health_2fhealth_2eproto_deps[1] = {
  &::descriptor_table_common_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_health_2fhealth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_health_2fhealth_2eproto = {
  false, false, 304, descriptor_table_protodef_health_2fhealth_2eproto, "health/health.proto", 
  &descriptor_table_health_2fhealth_2eproto_once, descriptor_table_health_2fhealth_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_health_2fhealth_2eproto::offsets,
  file_level_metadata_health_2fhealth_2eproto, file_level_enum_descriptors_health_2fhealth_2eproto, file_level_service_descriptors_health_2fhealth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_health_2fhealth_2eproto_getter() {
  return &descriptor_table_health_2fhealth_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_health_2fhealth_2eproto(&descriptor_table_health_2fhealth_2eproto);
namespace sensory {
namespace api {
namespace health {

// ===================================================================

class HealthRequest::_Internal {
 public:
};

HealthRequest::HealthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensory.api.health.HealthRequest)
}
HealthRequest::HealthRequest(const HealthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensory.api.health.HealthRequest)
}

inline void HealthRequest::SharedCtor() {
}

HealthRequest::~HealthRequest() {
  // @@protoc_insertion_point(destructor:sensory.api.health.HealthRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HealthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HealthRequest::ArenaDtor(void* object) {
  HealthRequest* _this = reinterpret_cast< HealthRequest* >(object);
  (void)_this;
}
void HealthRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HealthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensory.api.health.HealthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensory.api.health.HealthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensory.api.health.HealthRequest)
  return target;
}

size_t HealthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensory.api.health.HealthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HealthRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthRequest::GetClassData() const { return &_class_data_; }

void HealthRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HealthRequest *>(to)->MergeFrom(
      static_cast<const HealthRequest &>(from));
}


void HealthRequest::MergeFrom(const HealthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensory.api.health.HealthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthRequest::CopyFrom(const HealthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensory.api.health.HealthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthRequest::IsInitialized() const {
  return true;
}

void HealthRequest::InternalSwap(HealthRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_health_2fhealth_2eproto_getter, &descriptor_table_health_2fhealth_2eproto_once,
      file_level_metadata_health_2fhealth_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace health
}  // namespace api
}  // namespace sensory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensory::api::health::HealthRequest* Arena::CreateMaybeMessage< ::sensory::api::health::HealthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensory::api::health::HealthRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
