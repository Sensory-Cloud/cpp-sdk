// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/management/enrollment.proto

#include "sensorycloud/generated/v1/management/enrollment.pb.h"
#include "sensorycloud/generated/v1/management/enrollment.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sensory {
namespace api {
namespace v1 {
namespace management {

static const char* EnrollmentService_method_names[] = {
  "/sensory.api.v1.management.EnrollmentService/GetEnrollments",
  "/sensory.api.v1.management.EnrollmentService/GetEnrollmentGroups",
  "/sensory.api.v1.management.EnrollmentService/CreateEnrollmentGroup",
  "/sensory.api.v1.management.EnrollmentService/AppendEnrollmentGroup",
  "/sensory.api.v1.management.EnrollmentService/DeleteEnrollment",
  "/sensory.api.v1.management.EnrollmentService/DeleteEnrollmentGroup",
};

std::unique_ptr< EnrollmentService::Stub> EnrollmentService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EnrollmentService::Stub> stub(new EnrollmentService::Stub(channel, options));
  return stub;
}

EnrollmentService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetEnrollments_(EnrollmentService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEnrollmentGroups_(EnrollmentService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateEnrollmentGroup_(EnrollmentService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AppendEnrollmentGroup_(EnrollmentService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteEnrollment_(EnrollmentService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteEnrollmentGroup_(EnrollmentService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EnrollmentService::Stub::GetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::sensory::api::v1::management::GetEnrollmentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEnrollments_, context, request, response);
}

void EnrollmentService::Stub::async::GetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEnrollments_, context, request, response, std::move(f));
}

void EnrollmentService::Stub::async::GetEnrollments(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEnrollments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentsResponse>* EnrollmentService::Stub::PrepareAsyncGetEnrollmentsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::GetEnrollmentsResponse, ::sensory::api::v1::management::GetEnrollmentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEnrollments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentsResponse>* EnrollmentService::Stub::AsyncGetEnrollmentsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEnrollmentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnrollmentService::Stub::GetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentGroupsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEnrollmentGroups_, context, request, response);
}

void EnrollmentService::Stub::async::GetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentGroupsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEnrollmentGroups_, context, request, response, std::move(f));
}

void EnrollmentService::Stub::async::GetEnrollmentGroups(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEnrollmentGroups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>* EnrollmentService::Stub::PrepareAsyncGetEnrollmentGroupsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::GetEnrollmentGroupsResponse, ::sensory::api::v1::management::GetEnrollmentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEnrollmentGroups_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::GetEnrollmentGroupsResponse>* EnrollmentService::Stub::AsyncGetEnrollmentGroupsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEnrollmentGroupsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnrollmentService::Stub::CreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::CreateEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateEnrollmentGroup_, context, request, response);
}

void EnrollmentService::Stub::async::CreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::CreateEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateEnrollmentGroup_, context, request, response, std::move(f));
}

void EnrollmentService::Stub::async::CreateEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateEnrollmentGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* EnrollmentService::Stub::PrepareAsyncCreateEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::EnrollmentGroupResponse, ::sensory::api::v1::management::CreateEnrollmentGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateEnrollmentGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* EnrollmentService::Stub::AsyncCreateEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateEnrollmentGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnrollmentService::Stub::AppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::AppendEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AppendEnrollmentGroup_, context, request, response);
}

void EnrollmentService::Stub::async::AppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::AppendEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEnrollmentGroup_, context, request, response, std::move(f));
}

void EnrollmentService::Stub::async::AppendEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEnrollmentGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* EnrollmentService::Stub::PrepareAsyncAppendEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::EnrollmentGroupResponse, ::sensory::api::v1::management::AppendEnrollmentGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AppendEnrollmentGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* EnrollmentService::Stub::AsyncAppendEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendEnrollmentGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnrollmentService::Stub::DeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::sensory::api::v1::management::EnrollmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::DeleteEnrollmentRequest, ::sensory::api::v1::management::EnrollmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteEnrollment_, context, request, response);
}

void EnrollmentService::Stub::async::DeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest* request, ::sensory::api::v1::management::EnrollmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::DeleteEnrollmentRequest, ::sensory::api::v1::management::EnrollmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteEnrollment_, context, request, response, std::move(f));
}

void EnrollmentService::Stub::async::DeleteEnrollment(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest* request, ::sensory::api::v1::management::EnrollmentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteEnrollment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentResponse>* EnrollmentService::Stub::PrepareAsyncDeleteEnrollmentRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::EnrollmentResponse, ::sensory::api::v1::management::DeleteEnrollmentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteEnrollment_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentResponse>* EnrollmentService::Stub::AsyncDeleteEnrollmentRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteEnrollmentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnrollmentService::Stub::DeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::management::DeleteEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteEnrollmentGroup_, context, request, response);
}

void EnrollmentService::Stub::async::DeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::management::DeleteEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteEnrollmentGroup_, context, request, response, std::move(f));
}

void EnrollmentService::Stub::async::DeleteEnrollmentGroup(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteEnrollmentGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* EnrollmentService::Stub::PrepareAsyncDeleteEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::management::EnrollmentGroupResponse, ::sensory::api::v1::management::DeleteEnrollmentGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteEnrollmentGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::management::EnrollmentGroupResponse>* EnrollmentService::Stub::AsyncDeleteEnrollmentGroupRaw(::grpc::ClientContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteEnrollmentGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

EnrollmentService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnrollmentService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnrollmentService::Service, ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnrollmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::GetEnrollmentsRequest* req,
             ::sensory::api::v1::management::GetEnrollmentsResponse* resp) {
               return service->GetEnrollments(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnrollmentService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnrollmentService::Service, ::sensory::api::v1::management::GetEnrollmentsRequest, ::sensory::api::v1::management::GetEnrollmentGroupsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnrollmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::GetEnrollmentsRequest* req,
             ::sensory::api::v1::management::GetEnrollmentGroupsResponse* resp) {
               return service->GetEnrollmentGroups(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnrollmentService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnrollmentService::Service, ::sensory::api::v1::management::CreateEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnrollmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* req,
             ::sensory::api::v1::management::EnrollmentGroupResponse* resp) {
               return service->CreateEnrollmentGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnrollmentService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnrollmentService::Service, ::sensory::api::v1::management::AppendEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnrollmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* req,
             ::sensory::api::v1::management::EnrollmentGroupResponse* resp) {
               return service->AppendEnrollmentGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnrollmentService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnrollmentService::Service, ::sensory::api::v1::management::DeleteEnrollmentRequest, ::sensory::api::v1::management::EnrollmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnrollmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::DeleteEnrollmentRequest* req,
             ::sensory::api::v1::management::EnrollmentResponse* resp) {
               return service->DeleteEnrollment(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnrollmentService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnrollmentService::Service, ::sensory::api::v1::management::DeleteEnrollmentGroupRequest, ::sensory::api::v1::management::EnrollmentGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnrollmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* req,
             ::sensory::api::v1::management::EnrollmentGroupResponse* resp) {
               return service->DeleteEnrollmentGroup(ctx, req, resp);
             }, this)));
}

EnrollmentService::Service::~Service() {
}

::grpc::Status EnrollmentService::Service::GetEnrollments(::grpc::ServerContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnrollmentService::Service::GetEnrollmentGroups(::grpc::ServerContext* context, const ::sensory::api::v1::management::GetEnrollmentsRequest* request, ::sensory::api::v1::management::GetEnrollmentGroupsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnrollmentService::Service::CreateEnrollmentGroup(::grpc::ServerContext* context, const ::sensory::api::v1::management::CreateEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnrollmentService::Service::AppendEnrollmentGroup(::grpc::ServerContext* context, const ::sensory::api::v1::management::AppendEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnrollmentService::Service::DeleteEnrollment(::grpc::ServerContext* context, const ::sensory::api::v1::management::DeleteEnrollmentRequest* request, ::sensory::api::v1::management::EnrollmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnrollmentService::Service::DeleteEnrollmentGroup(::grpc::ServerContext* context, const ::sensory::api::v1::management::DeleteEnrollmentGroupRequest* request, ::sensory::api::v1::management::EnrollmentGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sensory
}  // namespace api
}  // namespace v1
}  // namespace management

