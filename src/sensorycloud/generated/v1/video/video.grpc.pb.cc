// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/video/video.proto

#include "sensorycloud/generated/v1/video/video.pb.h"
#include "sensorycloud/generated/v1/video/video.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sensory {
namespace api {
namespace v1 {
namespace video {

static const char* VideoModels_method_names[] = {
  "/sensory.api.v1.video.VideoModels/GetModels",
};

std::unique_ptr< VideoModels::Stub> VideoModels::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VideoModels::Stub> stub(new VideoModels::Stub(channel, options));
  return stub;
}

VideoModels::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetModels_(VideoModels_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VideoModels::Stub::GetModels(::grpc::ClientContext* context, const ::sensory::api::v1::video::GetModelsRequest& request, ::sensory::api::v1::video::GetModelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensory::api::v1::video::GetModelsRequest, ::sensory::api::v1::video::GetModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModels_, context, request, response);
}

void VideoModels::Stub::async::GetModels(::grpc::ClientContext* context, const ::sensory::api::v1::video::GetModelsRequest* request, ::sensory::api::v1::video::GetModelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensory::api::v1::video::GetModelsRequest, ::sensory::api::v1::video::GetModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModels_, context, request, response, std::move(f));
}

void VideoModels::Stub::async::GetModels(::grpc::ClientContext* context, const ::sensory::api::v1::video::GetModelsRequest* request, ::sensory::api::v1::video::GetModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::video::GetModelsResponse>* VideoModels::Stub::PrepareAsyncGetModelsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::video::GetModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensory::api::v1::video::GetModelsResponse, ::sensory::api::v1::video::GetModelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensory::api::v1::video::GetModelsResponse>* VideoModels::Stub::AsyncGetModelsRaw(::grpc::ClientContext* context, const ::sensory::api::v1::video::GetModelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

VideoModels::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VideoModels_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VideoModels::Service, ::sensory::api::v1::video::GetModelsRequest, ::sensory::api::v1::video::GetModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VideoModels::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensory::api::v1::video::GetModelsRequest* req,
             ::sensory::api::v1::video::GetModelsResponse* resp) {
               return service->GetModels(ctx, req, resp);
             }, this)));
}

VideoModels::Service::~Service() {
}

::grpc::Status VideoModels::Service::GetModels(::grpc::ServerContext* context, const ::sensory::api::v1::video::GetModelsRequest* request, ::sensory::api::v1::video::GetModelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* VideoBiometrics_method_names[] = {
  "/sensory.api.v1.video.VideoBiometrics/CreateEnrollment",
  "/sensory.api.v1.video.VideoBiometrics/Authenticate",
};

std::unique_ptr< VideoBiometrics::Stub> VideoBiometrics::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VideoBiometrics::Stub> stub(new VideoBiometrics::Stub(channel, options));
  return stub;
}

VideoBiometrics::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateEnrollment_(VideoBiometrics_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Authenticate_(VideoBiometrics_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::sensory::api::v1::video::CreateEnrollmentRequest, ::sensory::api::v1::video::CreateEnrollmentResponse>* VideoBiometrics::Stub::CreateEnrollmentRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::sensory::api::v1::video::CreateEnrollmentRequest, ::sensory::api::v1::video::CreateEnrollmentResponse>::Create(channel_.get(), rpcmethod_CreateEnrollment_, context);
}

void VideoBiometrics::Stub::async::CreateEnrollment(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::video::CreateEnrollmentRequest,::sensory::api::v1::video::CreateEnrollmentResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::sensory::api::v1::video::CreateEnrollmentRequest,::sensory::api::v1::video::CreateEnrollmentResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_CreateEnrollment_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::video::CreateEnrollmentRequest, ::sensory::api::v1::video::CreateEnrollmentResponse>* VideoBiometrics::Stub::AsyncCreateEnrollmentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sensory::api::v1::video::CreateEnrollmentRequest, ::sensory::api::v1::video::CreateEnrollmentResponse>::Create(channel_.get(), cq, rpcmethod_CreateEnrollment_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::video::CreateEnrollmentRequest, ::sensory::api::v1::video::CreateEnrollmentResponse>* VideoBiometrics::Stub::PrepareAsyncCreateEnrollmentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sensory::api::v1::video::CreateEnrollmentRequest, ::sensory::api::v1::video::CreateEnrollmentResponse>::Create(channel_.get(), cq, rpcmethod_CreateEnrollment_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::sensory::api::v1::video::AuthenticateRequest, ::sensory::api::v1::video::AuthenticateResponse>* VideoBiometrics::Stub::AuthenticateRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::sensory::api::v1::video::AuthenticateRequest, ::sensory::api::v1::video::AuthenticateResponse>::Create(channel_.get(), rpcmethod_Authenticate_, context);
}

void VideoBiometrics::Stub::async::Authenticate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::video::AuthenticateRequest,::sensory::api::v1::video::AuthenticateResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::sensory::api::v1::video::AuthenticateRequest,::sensory::api::v1::video::AuthenticateResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::video::AuthenticateRequest, ::sensory::api::v1::video::AuthenticateResponse>* VideoBiometrics::Stub::AsyncAuthenticateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sensory::api::v1::video::AuthenticateRequest, ::sensory::api::v1::video::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_Authenticate_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::video::AuthenticateRequest, ::sensory::api::v1::video::AuthenticateResponse>* VideoBiometrics::Stub::PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sensory::api::v1::video::AuthenticateRequest, ::sensory::api::v1::video::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_Authenticate_, context, false, nullptr);
}

VideoBiometrics::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VideoBiometrics_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< VideoBiometrics::Service, ::sensory::api::v1::video::CreateEnrollmentRequest, ::sensory::api::v1::video::CreateEnrollmentResponse>(
          [](VideoBiometrics::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::sensory::api::v1::video::CreateEnrollmentResponse,
             ::sensory::api::v1::video::CreateEnrollmentRequest>* stream) {
               return service->CreateEnrollment(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VideoBiometrics_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< VideoBiometrics::Service, ::sensory::api::v1::video::AuthenticateRequest, ::sensory::api::v1::video::AuthenticateResponse>(
          [](VideoBiometrics::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::sensory::api::v1::video::AuthenticateResponse,
             ::sensory::api::v1::video::AuthenticateRequest>* stream) {
               return service->Authenticate(ctx, stream);
             }, this)));
}

VideoBiometrics::Service::~Service() {
}

::grpc::Status VideoBiometrics::Service::CreateEnrollment(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sensory::api::v1::video::CreateEnrollmentResponse, ::sensory::api::v1::video::CreateEnrollmentRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VideoBiometrics::Service::Authenticate(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sensory::api::v1::video::AuthenticateResponse, ::sensory::api::v1::video::AuthenticateRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* VideoRecognition_method_names[] = {
  "/sensory.api.v1.video.VideoRecognition/ValidateLiveness",
};

std::unique_ptr< VideoRecognition::Stub> VideoRecognition::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VideoRecognition::Stub> stub(new VideoRecognition::Stub(channel, options));
  return stub;
}

VideoRecognition::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ValidateLiveness_(VideoRecognition_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::sensory::api::v1::video::ValidateRecognitionRequest, ::sensory::api::v1::video::LivenessRecognitionResponse>* VideoRecognition::Stub::ValidateLivenessRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::sensory::api::v1::video::ValidateRecognitionRequest, ::sensory::api::v1::video::LivenessRecognitionResponse>::Create(channel_.get(), rpcmethod_ValidateLiveness_, context);
}

void VideoRecognition::Stub::async::ValidateLiveness(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sensory::api::v1::video::ValidateRecognitionRequest,::sensory::api::v1::video::LivenessRecognitionResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::sensory::api::v1::video::ValidateRecognitionRequest,::sensory::api::v1::video::LivenessRecognitionResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateLiveness_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::video::ValidateRecognitionRequest, ::sensory::api::v1::video::LivenessRecognitionResponse>* VideoRecognition::Stub::AsyncValidateLivenessRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sensory::api::v1::video::ValidateRecognitionRequest, ::sensory::api::v1::video::LivenessRecognitionResponse>::Create(channel_.get(), cq, rpcmethod_ValidateLiveness_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::sensory::api::v1::video::ValidateRecognitionRequest, ::sensory::api::v1::video::LivenessRecognitionResponse>* VideoRecognition::Stub::PrepareAsyncValidateLivenessRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sensory::api::v1::video::ValidateRecognitionRequest, ::sensory::api::v1::video::LivenessRecognitionResponse>::Create(channel_.get(), cq, rpcmethod_ValidateLiveness_, context, false, nullptr);
}

VideoRecognition::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VideoRecognition_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< VideoRecognition::Service, ::sensory::api::v1::video::ValidateRecognitionRequest, ::sensory::api::v1::video::LivenessRecognitionResponse>(
          [](VideoRecognition::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::sensory::api::v1::video::LivenessRecognitionResponse,
             ::sensory::api::v1::video::ValidateRecognitionRequest>* stream) {
               return service->ValidateLiveness(ctx, stream);
             }, this)));
}

VideoRecognition::Service::~Service() {
}

::grpc::Status VideoRecognition::Service::ValidateLiveness(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sensory::api::v1::video::LivenessRecognitionResponse, ::sensory::api::v1::video::ValidateRecognitionRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sensory
}  // namespace api
}  // namespace v1
}  // namespace video

